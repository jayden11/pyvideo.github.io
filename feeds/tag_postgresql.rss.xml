<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>http://pyvideo.org/</link><description></description><lastBuildDate>Fri, 18 Nov 2016 00:00:00 +0000</lastBuildDate><item><title>A Non-coder's Journey with Python and Postgresql</title><link>http://pyvideo.org/pycon-jamaica-2016/a-non-coders-journey-with-python-and-postgresql.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python is sometimes thought of as the language for the casual coder. Rhys Stewart, self declared &amp;quot;non-coder&amp;quot; and SQL junkie (which means he can do crazy things with databases) will share his experiences of using Python with Postgresql for day to day tasks. He's not promising best practices but he says they are &amp;quot;pretty good&amp;quot; and work for him.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.pythonjam.org.jm/conference-2016"&gt;https://www.pythonjam.org.jm/conference-2016&lt;/a&gt; the PyCon Jamaica 2016 technology conference for Python software developers was held (November 17 - 18, 2016).  The conference was immediately followed by the Great Python Scavenger Hunt &lt;a class="reference external" href="https://www.pythonjam.org.jm/conference-2016/scavenger-race"&gt;https://www.pythonjam.org.jm/conference-2016/scavenger-race&lt;/a&gt;. Our conferences are open to beginners, experts and non-programmers.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Rhys Stewart</dc:creator><pubDate>Fri, 18 Nov 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-11-18:pycon-jamaica-2016/a-non-coders-journey-with-python-and-postgresql.html</guid><category>postgresql</category></item><item><title>Data Integration in the World of Microservices</title><link>http://pyvideo.org/pydata-berlin-2016/data-integration-in-the-world-of-microservices.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData Berlin 2016&lt;/p&gt;
&lt;p&gt;Since its launch in 2008, Zalando has grown with tremendous speed. The road from startup to multinational corporation has been full of challenges, especially for Zalando's technology team. Distributed across Berlin, Helsinki, Dublin, Hamburg and Dortmund — with nearly 1000 professionals strong — Zalando Technology still plans to expand by adding 1,000 more developers through the end of 2016.&lt;/p&gt;
&lt;p&gt;This rapid growth has shown us that we need to remain flexible about developing processes and organizational structures, to allow us to continue scaling and experimenting. In March 2015, our team adopted Radical Agility: a tech management approach that emphasizes Autonomy, Purpose, and Mastery, with trust as the glue holding it all together.&lt;/p&gt;
&lt;p&gt;To make autonomy possible, teams can now choose their own technology stacks for the products they own. Microservices, speaking with each other using RESTful APIs, promise to minimize the costs of integration between autonomous teams. In addition, Isolated AWS accounts run on top of our own open-source Platform as a Service (called STUPS.io), give each autonomous team enough hardware to experiment and introduce new features without breaking our entire system.&lt;/p&gt;
&lt;p&gt;One small issue with having microservices isolated in their individual AWS accounts: Our teams keep local data for themselves. In this environment, building an ETL process for data analyses, or integrating data from different services becomes quite challenging.&lt;/p&gt;
&lt;p&gt;PostgreSQL's new logical replication features, however, now make it possible to stream all the data changes from the isolated databases to the data integration system so that it can collect this data, represent it in different forms, and prepare it for analysis.&lt;/p&gt;
&lt;p&gt;In this talk, I will discuss Zalando's open-source data collection prototype, which uses PostgreSQL's logical replication streaming capabilities to collect data from various PostgreSQL databases, and recreate it for different formats and systems (Data Lake, Operational Data Store, KPI calculation systems, automatic process monitoring). The audience will come away with new ideas for how to use Postgres streaming replication in a microservices environment.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Valentine Gogichashvili</dc:creator><pubDate>Tue, 31 May 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-05-31:pydata-berlin-2016/data-integration-in-the-world-of-microservices.html</guid><category>stups.io</category><category>postgresql</category><category>replication</category><category>etl</category></item><item><title>Django Deployment for the Average Bloke</title><link>http://pyvideo.org/chipy/django-deployment-for-the-average-bloke.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Deploying a Django/Pinax site on the following stack: Linux Debian Lenny
Apache mod_wsgi PostgreSQL.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This is the config you want to use if you don't know what you want to
use. You don't need to make any choices, you don't have to do any
research, and you don't even need to read the docs if you don't want to.
And as an added bonus, I show how to wget a vm image to deploy into with
network ports exposed. It is very much like working with a hosting
provider like Slice Host, and it makes a great framework for testing
server installs.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Carl Karsten</dc:creator><pubDate>Thu, 13 Jan 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-01-13:chipy/django-deployment-for-the-average-bloke.html</guid><category>apache</category><category>chipy</category><category>deployment</category><category>mod_wsgi</category><category>pinax</category><category>postgresql</category><category>web</category></item><item><title>Secrets of PostgreSQL Performance</title><link>http://pyvideo.org/djangocon-2011/djangocon-2011--secrets-of-postgresql-performance.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Secrets of PostgreSQL Performance&lt;/p&gt;
&lt;p&gt;Presented by Frank Wiles&lt;/p&gt;
&lt;p&gt;PostgreSQL is effectively the default RDBMS for Django. Learn the dark
arts of optimizing this powerful database to be blazingly fast on your
own hardware or in the cloud.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Frank Wiles</dc:creator><pubDate>Mon, 01 Jan 1990 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,1990-01-01:djangocon-2011/djangocon-2011--secrets-of-postgresql-performance.html</guid><category>djangocon</category><category>djangocon2011</category><category>optimize</category><category>optimizing</category><category>postgresql</category><category>rdbms</category></item><item><title>PostgreSQL when it's not your job</title><link>http://pyvideo.org/djangocon-2012/postgresql-when-its-not-your-job.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;In this DevOps world, Django developers are increasingly being asked to
manage the database as well. In 40 brisk minutes, we will talk about
(nearly) everything you need to know to bring up, tune, and keep a
PostgreSQL database health. We'll go over installation, basic tuning,
backups, disaster recovery, and helpful tools and techniques.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;It's a very rare startup these days that has a full-time DBA on staff;
mostly, the developers are pressed into service to handle the database
as well. In this talk, we'll present the survival skills required to
manage your PostgreSQL database while trying to push the product out the
door.&lt;/p&gt;
&lt;p&gt;We'll cover:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Installation.&lt;/li&gt;
&lt;li&gt;Basic tuning (it's easier than you think).&lt;/li&gt;
&lt;li&gt;Performance, including things you must not do.&lt;/li&gt;
&lt;li&gt;Backups and disaster recovery.&lt;/li&gt;
&lt;li&gt;Helpful tools, tips and tricks.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Django experience is helpful, but no PostgreSQL experience required.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Christophe Pettus</dc:creator><pubDate>Tue, 04 Sep 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-09-04:djangocon-2012/postgresql-when-its-not-your-job.html</guid><category>django</category><category>postgresql</category></item><item><title>Building a hosting platform with Python</title><link>http://pyvideo.org/europython-2011/building-a-hosting-platform-with-python.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Andrew Godwin - 20 June 2011 in &amp;quot;Track Lasagne&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;At ep.io we built a Python hosting platform from the ground up, designed
to run large numbers of web applications on a small number of physical
machines both securely and in a reasonably scalable way. This talk will
show you how we built our infrastructure - using Redis, eventlet,
PostgreSQL and more - and what lessons we learnt from our first few
thousand deploys.&lt;/p&gt;
&lt;p&gt;See how we split services into multiple processes and greenthreads; the
pains of building a cooperatively-multitasking PTY module; how Redis
isn't the answer to everything, but is still very useful; how to
persuade third-party software to work securely in a shared environment;
and how important it is to have good logging, especially when you have
more than five servers.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrew Godwin</dc:creator><pubDate>Wed, 20 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-20:europython-2011/building-a-hosting-platform-with-python.html</guid><category>ep.io</category><category>hosting</category><category>infrastructure</category><category>postgresql</category><category>redis</category><category>scalable</category><category>web</category></item><item><title>django-rdflib and postgresql - the best of both worlds</title><link>http://pyvideo.org/europython-2011/django-rdflib-and-postgresql-the-best-of-both-w.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Stefan Talpalaru - 21 June 2011 in &amp;quot;Track Ravioli&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;rdflib is a python library implementing a database with various triples
back- end, parser, data serializers, SPARQL is a Python interface to
extract/insert triples. We integrated it in Django reusing the database
connection and exposing an ORM interface, along with full-text search on
literals. This presentation shows a django-rdflib case study with a
PostgreSQL backend in &lt;a class="reference external" href="http://brancusi1.usc.edu"&gt;Brain Architecture Management
System&lt;/a&gt; - a neuroscientific project for the
University of Southern California. Benefits of the flexible RDF
structure will be shown, allowing researchers to insert free format
data, making data public with a customizable serialization and use the
powerful full-text search integrated in PostgreSQL.&lt;/p&gt;
&lt;p&gt;Objective: show attendees an effective combination of RDF, PostgreSQL
full- text search and Django ORM via django-rdflib.&lt;/p&gt;
&lt;p&gt;Requirements: Django familiarity.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Stefan Talpalaru</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-13:europython-2011/django-rdflib-and-postgresql-the-best-of-both-w.html</guid><category>architecture</category><category>database</category><category>django</category><category>orm</category><category>postgresql</category><category>reusing</category><category>search</category><category>serialization</category><category>university</category></item><item><title>django-rdflib e postgresql - il meglio dei due mondi</title><link>http://pyvideo.org/europython-2011/django-rdflib-e-postgresql-il-meglio-dei-due-mo.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Stefan Talpalaru - 24 June 2011 in &amp;quot;Track Italiana Big
Mac &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;rdflib è una libreria python che fornisce una base di dati con vari
back-end per le triple, dei parser, serializzatori, SPARQL è
un'interfaccia in python per estrarre/inserire le triple. L'abbiamo
integrata con Django tramite il riutilizzo della connessione alla base
di dati fornendo un'interfaccia ORM e la capacità di fare ricerca
full-text sui valori letterali. La presentazione contiene un studio di
caso per django-rdflib con un back-end postgresql in Brain Architecture
Management System (&lt;a class="reference external" href="http://brancusi1.usc.edu"&gt;http://brancusi1.usc.edu&lt;/a&gt;) - un progetto
neuroscientifico per University of Southern California. Si vedranno i
benefici della struttura flessibile del RDF che permette ai ricercatori
di introdurre dati in formatto libero, rendere i dati pubblici con una
serializzazione personalizzata e usare la potente ricerca full-text
fornita da postgresql.&lt;/p&gt;
&lt;p&gt;Scopo: introdurre al pubblico una combinazione di RDF, la ricerca
full-text di postgresql e l'ORM di Django tramite django-rdflib.&lt;/p&gt;
&lt;p&gt;Requisiti: familiarità con Django.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Stefan Talpalaru</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-13:europython-2011/django-rdflib-e-postgresql-il-meglio-dei-due-mo.html</guid><category>architecture</category><category>django</category><category>orm</category><category>postgresql</category><category>university</category></item><item><title>Getting ready for PostgreSQL 9.1</title><link>http://pyvideo.org/europython-2011/getting-ready-for-postgresql-91.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Gabriele Bartolini,Harald Armin Massa,Marco Nenciarini
- 22 June 2011 in &amp;quot;Training Pizza Napoli &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PostgreSQL is an advanced, versatile open-source database management
system that integrates perfectly with Python. It is developed by a very
active international community and is distributed under the BSD-like
PostgreSQL License.&lt;/p&gt;
&lt;p&gt;Enterprise-class features (including SQL standard compliance, ACID
transactions, disaster recovery, high availability, replication,
partitioning and general extensibility) make PostgreSQL suitable for
business critical environments seeking to reduce the TCO of their
database solutions without altering their functional needs. PostgreSQL
9.0, released in September 2010, was the first version of PostgreSQL
with Hot Standby, a built-in master/slave replication mechanism.
Asynchronous replication through the standard and consolidated log
shipping technique (previously used with Warm Standby for high
availability) has been enhanced with streaming replication.&lt;/p&gt;
&lt;p&gt;Version 9.1, expected to be out later in 2011, will add synchronous
replication to PostgreSQL, making it the first DBMS that allows
developers and users to control the replication strategy at
transactional granularity. Come to the talk and discover all the major
new features of PostgreSQL 9.1, including extensions management,
writable common table expressions (WCTE), etc.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Gabriele Bartolini</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-13:europython-2011/getting-ready-for-postgresql-91.html</guid><category>asynchronous</category><category>business</category><category>community</category><category>database</category><category>distributed</category><category>extensions</category><category>partitioning</category><category>postgresql</category><category>replication</category></item><item><title>Making use of OpenStreetMap data with Python</title><link>http://pyvideo.org/europython-2011/making-use-of-openstreetmap-data-with-python.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Andrii Mishkovskyi - 22 June 2011 in &amp;quot;Track Lasagne&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Ever wondered how web maps are created? Ever wondered if you could build
something like Google Maps over a weekend? You probably can't, but this
talk will show you the basics of what you need to know, such as
importing data, rendering maps and even building simple routes. And all
of this in Python!&lt;/p&gt;
&lt;p&gt;Abstract: * Learning how OSM data looks * Parsing and importing the
data * Rendering maps with Mapnik * Bits of code required to build
geocoder * Building simple router with Python and PostGIS * And anything
else I forgot to mention in this abstract but will talk about&lt;/p&gt;
&lt;p&gt;Definitions: OpenStreetMap - the so-called &amp;quot;Wikipedia of maps&amp;quot; project,
with thousands of contributors who edit the map data of the whole world.
Unlike similar projects, the map data is completely free (both as in
beer and as in speech) and thus anyone can make use of it. Mapnik -
rendering framework, created specifically for OpenStreetMap, written in
C++ and Python. PostGIS - an extension of PostgreSQL database, with
support for many useful GIS features.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrii Mishkovskyi</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-13:europython-2011/making-use-of-openstreetmap-data-with-python.html</guid><category>gis</category><category>google</category><category>importing</category><category>learning</category><category>maps</category><category>parsing</category><category>postgresql</category><category>web</category></item><item><title>PL/Python -- Python inside the PostgreSQL RDBMS</title><link>http://pyvideo.org/europython-2011/plpython-python-inside-the-postgresql-rdbms.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Peter Geoghegan - 20 June 2011 in &amp;quot;Track Ravioli&amp;quot;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Unknown</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-13:europython-2011/plpython-python-inside-the-postgresql-rdbms.html</guid><category>postgresql</category><category>rdbms</category></item><item><title>PostgreSQL - the database-sister of Python</title><link>http://pyvideo.org/europython-2011/postgresql-the-database-sister-of-python.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Harald Armin Massa - 21 June 2011 in &amp;quot;Track Lasagne&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk is the updated and especially enhanced of the &amp;quot;Python and
PostgreSQL - a match made in heaven&amp;quot; talk of EP 2006, CERN, Switzerland.
PostgreSQL and Python share more then the first letter: their
communities have great similiarities; their development processes are
really comparable; their licenses and their openness to academics AND
business (on a technical and communitie perspective) are big pluses. We
will have a look at those similiarities and learn why PostgreSQL is
really the database sister to Python. There will be an overview of
PostgreSQL, information of how to connect PostgreSQL and Python; how
PostgreSQL streaming replication works and what it can do for you, how
PL/Python helps to have Web 2.5 JSON storage and handling right inside
PostgreSQL. We will show that YESQL is also a valid answer to many data
storage qeuestions.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Harald Armin Massa</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-13:europython-2011/postgresql-the-database-sister-of-python.html</guid><category>business</category><category>database</category><category>json</category><category>postgresql</category><category>replication</category><category>web</category></item><item><title>Aspettando PostgreSQL 9.1</title><link>http://pyvideo.org/europython-2011/aspettando-postgresql-91.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Gabriele Bartolini - 22 June 2011 in &amp;quot;Track Italiana
Big Mac &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PostgreSQL è un sistema open-source per la gestione di database molto
avanzato ed estremamente versatile che si integra perfettamente con
Python. E' sviluppato da una comunità internazionale molto attiva ed è
distribuito secondo la licenza in stile BSD denominata &amp;quot;PostgreSQL
License&amp;quot;.&lt;/p&gt;
&lt;p&gt;Le funzionalità di classe enterprise (come la conformità con lo standard
SQL, le transazioni ACID, la disaster recovery, l'alta disponibilità o
HA, la replica, il partizionamento e in generale l'estensibilità)
rendono PostgreSQL particolarmente adatto per quegli ambienti
business-critical che intendono ridurre il costo di proprietà totale
(TCO) delle loro soluzioni di database senza alterarne i requisiti
funzionali. PostgreSQL 9.0, rilasciato nel settembre del 2010, è stata
la prima versione di PostgreSQL con Hot Standby, un meccanismo nativo
per la replica master/slave. Al consueto e collaudato meccanismo di
replica secondo la tecnica del log shipping (usata precedentemente per
scopi di HA con Warm Standby) è stata aggiunta la replica in streaming.&lt;/p&gt;
&lt;p&gt;La versione 9.1, attesa per la seconda parte del 2011, aggiungerà la
replica sincrona a PostgreSQL, rendendolo il primo DBMS in grado di
permettere a sviluppatori e utenti di controllare la strategia di
replica a livello di singola transazione. Partecipa al talk per scoprire
tutte le altre funzionalità principali che saranno incluse in PostgreSQL
9.1, fra le quali: gestione delle estensioni, writable common table
expression, ecc.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Gabriele Bartolini</dc:creator><pubDate>Thu, 07 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-07:europython-2011/aspettando-postgresql-91.html</guid><category>database</category><category>postgresql</category></item></channel></rss>