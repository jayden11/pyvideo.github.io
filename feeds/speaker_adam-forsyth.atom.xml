<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="http://pyvideo.org/" rel="alternate"></link><link href="http://pyvideo.org/feeds/speaker_adam-forsyth.atom.xml" rel="self"></link><id>http://pyvideo.org/</id><updated>2016-07-31T00:00:00+00:00</updated><entry><title>Python for Home-Ec</title><link href="http://pyvideo.org/pygotham-2016/python-for-home-ec.html" rel="alternate"></link><published>2016-07-16T00:00:00+00:00</published><updated>2016-07-16T00:00:00+00:00</updated><author><name>Adam Forsyth</name></author><id>tag:pyvideo.org,2016-07-16:pygotham-2016/python-for-home-ec.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you ever tried to make something with scrap wood, and wondered how to use it optimally? Do have a bunch of pickles and jams you made, and you want to eat them in an order that maximizes variety? These are real problems a co-worker of mine had, and we used Python to solve them. I'll show the data we started with, the solutions we came up with, and a bit of the computer science behind them.&lt;/p&gt;
</summary></entry><entry><title>Python Not Recommended</title><link href="http://pyvideo.org/europython-2015/europython-2015-adam-forsyth-python-not-recommended.html" rel="alternate"></link><published>2015-08-05T00:00:00+00:00</published><updated>2015-08-05T00:00:00+00:00</updated><author><name>Adam Forsyth</name></author><id>tag:pyvideo.org,2015-08-05:europython-2015/europython-2015-adam-forsyth-python-not-recommended.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Adam Forsyth - Python Not Recommended
[EuroPython 2015]
[21 July 2015]
[Bilbao, Euskadi, Spain]&lt;/p&gt;
&lt;p&gt;Braintree is a Ruby shop. By default, we use Ruby and Rails for
projects. We also use Ruby-based projects for much of our tooling,
including puppet, capistrano, and rake. However, we strongly believe
in using the right tool for the job. What that means has evolved over
ti
me, and I'll discuss what solutions we chose in the past as well as
our current choices.&lt;/p&gt;
&lt;p&gt;So what's it like doing Python at a Ruby shop? You get lots of jokes
about language features Ruby has but Python lacks and lots of
disbelief that Python will survive the 2/3 split. People also tend to
apply the best practices and conventions of Ruby to Python code as if
t
hey were the same. Python's major inroad at Braintree has been,
surprisingly enough, as a platform for high-concurrency situations.
This is a direct result of the power of Tornado as a platform for
asynchronous I/O. It also helps that many Python is very approachable
and
many developers have at least some experience with it.&lt;/p&gt;
&lt;p&gt;Braintree has three pieces of our infrastructure using Python and
Tornado -- an incoming request proxy; an outgoing request proxy; and a
webook delivery service. They've served us well for 3+ years but all
suffer from a number of problems. The outdated concurrency feature
s of CPython / Python 2 as well as our lack of experience with and
commitment to Tornado have always been an issue. As the meat of the
talk, I'll speak in depth about the other issues we've encountered
with each of the three applications and our short- and long- term solu
tions to the problems.&lt;/p&gt;
&lt;p&gt;The state as of the end of 2014 appeared dire for Python at Braintree.
All the old Python code in our stack is on the way out, and Python has
been specifically recommended agaist for new projects. Our Python
client library is used by some of our largest merchants, and is
ready for the future by supporting Python 2.6+ and Python 3.3+ in a
single codebase. We also have a vibrant Python community at Venmo, our
sister company. Both Braintree and Venmo support Python by attending,
hosting, sponsoring, and speaking at meetups, conferences, and
other events in Chicago, New York, and elsewhere. At Braintree, our
Data Science team uses Python almost exclusively and they're becoming
a bigger part of our business every day. We also use custom tooling
written in Python to manage our infrastructure.&lt;/p&gt;
</summary></entry><entry><title>Python Not Recommended</title><link href="http://pyvideo.org/pygotham-2015/python-not-recommended.html" rel="alternate"></link><published>2015-08-16T00:00:00+00:00</published><updated>2015-08-16T00:00:00+00:00</updated><author><name>Adam Forsyth</name></author><id>tag:pyvideo.org,2015-08-16:pygotham-2015/python-not-recommended.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;At Braintree, we've moved away from using Python. We've always used Ruby
as our primary language, but Python used to be the go-to choice for
things where Ruby wasn't a good fit. I will discuss the problems we've
had with Python, why we decided to move to other solutions, and what
we've chosen instead. Finally, I'll talk about where we're continuing to
use Python and what the future holds.&lt;/p&gt;
</summary></entry><entry><title>Exploring Function Annotations</title><link href="http://pyvideo.org/pyohio-2016/exploring-function-annotations.html" rel="alternate"></link><published>2016-07-31T00:00:00+00:00</published><updated>2016-07-31T00:00:00+00:00</updated><author><name>Adam Forsyth</name></author><id>tag:pyvideo.org,2016-07-31:pyohio-2016/exploring-function-annotations.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python's function annotations allow you to provide metadata about a function's inputs and outputs. Most often, these annotations are used for type checking or type casting. I'll talk through examples of each, including &lt;cite&gt;typing&lt;/cite&gt; from the Python 3.5 standard library and the &lt;cite&gt;mypy&lt;/cite&gt; static type checker. This talk expects basic knowledge of Python but no experience with function annotations is needed.&lt;/p&gt;
</summary></entry><entry><title>The Chicago Process: How Braintree Develops Software</title><link href="http://pyvideo.org/chipy/the-chicago-process-how-braintree-develops-softw.html" rel="alternate"></link><published>2013-12-12T00:00:00+00:00</published><updated>2013-12-12T00:00:00+00:00</updated><author><name>Adam Forsyth</name></author><id>tag:pyvideo.org,2013-12-12:chipy/the-chicago-process-how-braintree-develops-softw.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Braintree needs to be highly available and secure, while still
maintaining a rapid development pace and strict backwards compatibility.
In order to achieve that, we use what has become known as the &amp;quot;Chicago
Process&amp;quot;. This involves pairing, strict TDD, a team structure, and
weekly iterations, all to empower the devs to make decisions and get
work of a high quality done while avoiding siloing.&lt;/p&gt;
</summary></entry><entry><title>Getting the most out of Stack Overflow</title><link href="http://pyvideo.org/pycon-au-2013/getting-the-most-out-of-stack-overflow.html" rel="alternate"></link><published>2013-07-07T00:00:00+00:00</published><updated>2013-07-07T00:00:00+00:00</updated><author><name>Adam Forsyth</name></author><id>tag:pyvideo.org,2013-07-07:pycon-au-2013/getting-the-most-out-of-stack-overflow.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Stack Overflow is the single greatest repository of coding knowledge in
the world. Now approaching five years old, its community-moderated,
strict Q&amp;amp;A format has made it far more useful than other similar sites.&lt;/p&gt;
&lt;p&gt;Contributing to it, however, can be intimidating. The questions of new
users are often voted down or closed with little comment, or edited by
the community in was the original poster doesn't understand. Answering
is even worse. How do other people manage to post a detailed answer to a
specific question in minutes, or even seconds? How could I possibly know
so much about such a broad range of topics, even within a single
programming language or framework?&lt;/p&gt;
&lt;p&gt;Over the past three years, I've learned a lot from contributing to Stack
Overflow. It has honed my research, technical writing, and rapid
prototyping skills, as well as greatly expanded my knowledge of the
Python ecosystem, standard library, and CPython internals.&lt;/p&gt;
&lt;p&gt;I'll share not only how to use the site to learn, but also how to
compete effectively with the thousands of other programmers who answer
questions there on a daily basis -- we all like to win. I'll talk about
what goes into a good answer, as well as a good question. I'll also talk
about how contributing to Stack Overflow is like contributing to any
other open source project in many ways -- in what you gain, as well as
what the community gains, partly because of the CC-by-SA licensing used
by the Stack Exchange network of sites.&lt;/p&gt;
</summary></entry></feed>