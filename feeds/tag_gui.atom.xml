<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="http://pyvideo.org/" rel="alternate"></link><link href="http://pyvideo.org/feeds/tag_gui.atom.xml" rel="self"></link><id>http://pyvideo.org/</id><updated>2011-07-24T00:00:00+00:00</updated><entry><title>PyOhio 2010: GUI Tools</title><link href="http://pyvideo.org/pyohio-2010/pyohio-2010--gui-tools.html" rel="alternate"></link><published>1990-01-01T00:00:00+00:00</published><updated>1990-01-01T00:00:00+00:00</updated><author><name>James Bonanno</name></author><id>tag:pyvideo.org,1990-01-01:pyohio-2010/pyohio-2010--gui-tools.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;GUI Tools&lt;/p&gt;
&lt;p&gt;Presented by James Bonanno&lt;/p&gt;
&lt;p&gt;There are several Graphical User Interface frameworks available for
Python. In this talk, perpahs the two most popular, wxPython and PyQt,
are examined. The talk will focus on major differences, tools, and a
specific example done both in wxPython and PyQt, that is a non-trivial
production grade example.&lt;/p&gt;
&lt;p&gt;[VIDEO HAS ISSUES: sound is inaudible for the first minute]&lt;/p&gt;
</summary><category term="gui"></category><category term="pyohio"></category><category term="pyohio2010"></category><category term="pyqt"></category><category term="wxpython"></category></entry><entry><title>PyOhio 2011: Commercial GUI Development with Python &amp; PySide</title><link href="http://pyvideo.org/pyohio-2011/pyohio-2011--commercial-gui-development-with-pyth.html" rel="alternate"></link><published>1990-01-01T00:00:00+00:00</published><updated>1990-01-01T00:00:00+00:00</updated><author><name>James Bonanno</name></author><id>tag:pyvideo.org,1990-01-01:pyohio-2011/pyohio-2011--commercial-gui-development-with-pyth.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Commercial GUI Development with Python and PySide&lt;/p&gt;
&lt;p&gt;Presented by James Bonanno&lt;/p&gt;
&lt;p&gt;Commercial Desktop GUIs need to be secure, flexible, reliable, and easy
to maintain. A rapid application development framework, called PyRad, is
introduced, that uses PySide and Cython. Together with Python, this
development framework has allowed the authors to create numerous GUIs in
a short time period, with a consistent look and feel.&lt;/p&gt;
</summary><category term="cython"></category><category term="gui"></category><category term="pyohio"></category><category term="pyohio2011"></category><category term="pyrad"></category><category term="pyside"></category></entry><entry><title>Developing Desktop and mobile apps with PySide and QML</title><link href="http://pyvideo.org/europython-2011/developing-desktop-and-mobile-apps-with-pyside-an.html" rel="alternate"></link><published>2011-07-24T00:00:00+00:00</published><updated>2011-07-24T00:00:00+00:00</updated><author><name>Thomas Perl</name></author><id>tag:pyvideo.org,2011-07-24:europython-2011/developing-desktop-and-mobile-apps-with-pyside-an.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Thomas Perl - 24 June 2011 in &amp;quot;Training Pizza
Margherita &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PySide offers Python bindings to the Qt libraries. This allows rapid
development of great UI-based Python applications. With the addition of
QML in Qt 4.7, this now gives developers a chance to develop
touch-based, rich applications directly with Python. This talk
introduces PySide development, combined with QML, and shows some
real-world examples of mobile PySide applications.&lt;/p&gt;
&lt;p&gt;This talk is based on my PySide/QML on &lt;a class="reference external" href="http://thp.io/2010%20/meego-python/"&gt;MeeGo
tutorials&lt;/a&gt;, and shows some of
the possibilities. It is aimed at Python developers looking for a GUI
toolkit to create fluent, hardware-accelerated cross-platform UIs using
QML.&lt;/p&gt;
&lt;p&gt;Materials available at: &lt;a class="reference external" href="http://thp.io/2011/europython/"&gt;http://thp.io/2011/europython/&lt;/a&gt;&lt;/p&gt;
</summary><category term="gui"></category><category term="mobile"></category><category term="pyside"></category><category term="qt"></category></entry><entry><title>Sqlkit: empowering database access</title><link href="http://pyvideo.org/europython-2011/sqlkit-empowering-database-access.html" rel="alternate"></link><published>2011-07-24T00:00:00+00:00</published><updated>2011-07-24T00:00:00+00:00</updated><author><name>Alessandro Dentella</name></author><id>tag:pyvideo.org,2011-07-24:europython-2011/sqlkit-empowering-database-access.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Alessandro Dentella - 23 June 2011 in &amp;quot;Track
Spaghetti&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;It's very easy to access databases with Python, and there are many ORMs
allowing a high level of abstraction. Still, it's a long road from there
to interactive handling of data, even for very simple tasks.&lt;/p&gt;
&lt;p&gt;Sqlkit tries to act as a bridge, offering some mega-widgets that allow
you to build GUI applications or directly access data using the
'sqledit' application, shipped with sqlkit; sqlkit is built with PyGTK
and SQLAlchemy.&lt;/p&gt;
&lt;p&gt;This presentation covers some of the most powerful features of sqlkit,
and shows how easy it is to build small programs for personal use, as
well as rich and complex applications. It primarily focuses on two
points: how easy it is to create data forms (eventually with one2many or
many2many, thanks to a original definition of layouts), and the template
system based on OpenOffice which allows easy report creation.&lt;/p&gt;
&lt;p&gt;This presentation shows how sqlkit can be used both as application
development framework and as a tool to help us while developing other
applications (e.g.: Django, OpenERP,… ).&lt;/p&gt;
&lt;p&gt;To deliver a gradual presentation, we'll use the configuration system of
sqledit, starting from a minimal configuration (a single URL) we'll add
elements to that until we'll have a full application.&lt;/p&gt;
</summary><category term="database"></category><category term="forms"></category><category term="framework"></category><category term="gui"></category><category term="openoffice"></category><category term="python,"></category></entry><entry><title>Sqlkit: database ad accesso immediato</title><link href="http://pyvideo.org/europython-2011/sqlkit-database-ad-accesso-immediato.html" rel="alternate"></link><published>2011-07-18T00:00:00+00:00</published><updated>2011-07-18T00:00:00+00:00</updated><author><name>Alessandro Dentella</name></author><id>tag:pyvideo.org,2011-07-18:europython-2011/sqlkit-database-ad-accesso-immediato.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Alessandro Dentella - 21 June 2011 in &amp;quot;Track Italiana
Big Mac&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;È molto facile accedere ad un database con Python e ci sono molti ORM
che permettono un alto livello di astrazione. Da qui c'é ancora una
lunga strada per arrivare a manipolare interattivamente i dati anche per
semplici compiti.&lt;/p&gt;
&lt;p&gt;Sqlkit cerca di coprire questa distanza fornendo alcuni mega-widgets che
permettono di costruire ogni applicazione GUI o accedere direttamente ai
dati con l'applicazione 'sqledit', che viene distribuita con sqlkit.
Sqlkit è costruita con PyGTK e SQLAlchemy.&lt;/p&gt;
&lt;p&gt;Questa presentazione esplora alcune fra le più potenti caratteristiche
di sqlkit e mostra quanto sia semplice costruire piccoli programmini ad
uso personale o applicazioni ricche ed articolate. Si focalizza
principalmente su due punti: quanto sia facile creare maschere per
editare dati (anche relazioni on2many o many2many, grazie al modo
originale di definire i layout) e al sistema di template basato su
OpenOffice che rende incredibilmente semplice creare report.&lt;/p&gt;
&lt;p&gt;Questa presentazione vuole mostrare come sqlkit può essere usato sia
come framework di sviluppo di applicazioni, sia come strumento che ci
aiuta mentre sviluppiamo altre applicazioni (es.: Django, OpenERP,… ).&lt;/p&gt;
&lt;p&gt;Per rendere la presentazione più graduale, sfrutteremo il sistema di
configurazione di sqledit Partendo da una configurazione minima -un URL-
aggiungeremo elementi fino ad ottenere una vera applicazione.&lt;/p&gt;
</summary><category term="ci"></category><category term="database"></category><category term="framework"></category><category term="gui"></category><category term="openoffice"></category><category term="orm"></category></entry><entry><title>Volker Kuhlmann - Rapid GUI application development with python</title><link href="http://pyvideo.org/kiwi-pycon-2009/volker-kuhlmann---rapid-gui-application-developme.html" rel="alternate"></link><published>1990-01-01T00:00:00+00:00</published><updated>1990-01-01T00:00:00+00:00</updated><author><name>Volker Kuhlmann</name></author><id>tag:pyvideo.org,1990-01-01:kiwi-pycon-2009/volker-kuhlmann---rapid-gui-application-developme.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Rapid GUI application development with Python&lt;/p&gt;
&lt;p&gt;Presented by Volker Kuhlmann&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Options and tools for rapid desktop GUI application development using
python are examined, and how they compare to competing languages and
platforms.&lt;/p&gt;
&lt;p&gt;Outline&lt;/p&gt;
&lt;p&gt;Examine GUI options for python including Qt, and their performance with
respect to ease of use, runtime, and platform portability. Examine
options for the tool chain (IDE, editor, debugger, programming aids) and
characterise their ease of use and level of sophistication, and compare
with commonly used equivalents, both open source and not open source.
Demonstrate a sample program.&lt;/p&gt;
</summary><category term="gui"></category><category term="kiwipycon"></category><category term="kiwipycon2009"></category><category term="qt"></category></entry><entry><title>PyConAU 2010: An Introduction to Processing</title><link href="http://pyvideo.org/pycon-au-2010/pyconau-2010--an-introduction-to-processing.html" rel="alternate"></link><published>1990-01-01T00:00:00+00:00</published><updated>1990-01-01T00:00:00+00:00</updated><author><name>Clinton J Roy</name></author><id>tag:pyvideo.org,1990-01-01:pycon-au-2010/pyconau-2010--an-introduction-to-processing.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;An Introduction to Processing&lt;/p&gt;
&lt;p&gt;Presented by Clinton J Roy (University of Queensland)&lt;/p&gt;
&lt;p&gt;Processing is an Open Source language designed to make interactive
graphics and animation programming easier than traditional GUI toolkits.
Processing is used to prototype systems and create interactive data
visualisations.&lt;/p&gt;
&lt;p&gt;[NOTES: Missing first 2 minutes of audio, then camera microphone for
first section.]&lt;/p&gt;
</summary><category term="gui"></category><category term="multimedia"></category><category term="processing"></category><category term="pyconau"></category><category term="pyconau2010"></category></entry><entry><title>PyConAU 2010: Genropy - a framework for creating complex applications deployed on the web</title><link href="http://pyvideo.org/pycon-au-2010/pyconau-2010--genropy---a-framework-for-creating-.html" rel="alternate"></link><published>1990-01-01T00:00:00+00:00</published><updated>1990-01-01T00:00:00+00:00</updated><author><name>Jeff B Edwards</name></author><id>tag:pyvideo.org,1990-01-01:pycon-au-2010/pyconau-2010--genropy---a-framework-for-creating-.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Genropy - A framework for creating complex applications deployed on the
web&lt;/p&gt;
&lt;p&gt;Presented by Jeff B Edwards (Goodsoftware)&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://blog.genropy.org/"&gt;Genropy&lt;/a&gt; is the python implementation of
Genro, and is an application framework quite different from the standard
(django, cherrypy, turbogears), for building powerful database
applications deployed from the browser. Many differences and advantages
between this framework and traditional python application frameworks are
explained. Genropy is a suitable for creating complex 'applications' as
opposed to 'sites'. The differentiation is that an application is
something an operator uses all day, has trained users, that have to
'squeeze' all the power from it available. Conversely, a 'site' is
basically public and not necessarily powerful as a user spends a
relatively small amount of time on it. Genropy is the framework for
creation applications. It is used for attendee registration and sales in
pycon italy, the larger national conference in Europe (Florence, Italy).&lt;/p&gt;
&lt;p&gt;This session will demonstrate how to create a simple application (3
tables) and demonstrate the ease and power of using python for the model
view and controller on the client. It demonstrates how one api- being
the genro Bag - is used to create the model, to map the sql to objects,
to create the GUI and communicate all data. So all of it can be done in
python instead of having to use many different technologies and
languages.&lt;/p&gt;
&lt;p&gt;Jeff Edwards from Goodsoftware is strategic partner of Sofwell who is
the author of Genropy.&lt;/p&gt;
</summary><category term="databases"></category><category term="gui"></category><category term="pyconau"></category><category term="pyconau2010"></category><category term="web"></category></entry></feed>