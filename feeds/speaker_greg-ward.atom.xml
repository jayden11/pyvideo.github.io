<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="http://pyvideo.org/" rel="alternate"></link><link href="http://pyvideo.org/feeds/speaker_greg-ward.atom.xml" rel="self"></link><id>http://pyvideo.org/</id><updated>2016-11-12T00:00:00+00:00</updated><entry><title>Version control worst practices</title><link href="http://pyvideo.org/pycon-ca-2016/version-control-worst-practices.html" rel="alternate"></link><published>2016-11-12T00:00:00+00:00</published><updated>2016-11-12T00:00:00+00:00</updated><author><name>Greg Ward</name></author><id>tag:pyvideo.org,2016-11-12:pycon-ca-2016/version-control-worst-practices.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Nowadays, everybody uses version control. But until you learn to
&lt;em&gt;misuse&lt;/em&gt; your version control system, you're missing out on ways to
minimize developer productivity and pessimize your workflow. I'll show
you 12 time-tested worst practices that will set you down the wrong path
from Day One.&lt;/p&gt;
&lt;div class="section" id="greg-ward-bio"&gt;
&lt;h4&gt;Greg Ward Bio&lt;/h4&gt;
&lt;p&gt;I've been using and creating open source software since before the term
&amp;quot;open source&amp;quot; was coined, and involved with the Python community since
the late nineties. I've written or contributed to several modules in the
standard library. And I've been working as a programmer for over 20
years. I don't think I've made every mistake in the book, but I've made
a lot of them, and I hope to share some of the things I have learned the
hard way and save you the trouble.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>Go for Python Hackers</title><link href="http://pyvideo.org/pycon-ca-2013/go-for-python-hackers-0.html" rel="alternate"></link><published>2013-08-11T00:00:00+00:00</published><updated>2013-08-11T00:00:00+00:00</updated><author><name>Greg Ward</name></author><id>tag:pyvideo.org,2013-08-11:pycon-ca-2013/go-for-python-hackers-0.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;There is a resurgence of native-compiled programming languages going on.
Some of this work is in response to Python; we're now part of The
Establishment against which newcomers are measured. I'll give an
overview of Go, a recent native-compiled language, and how it relates to
Python.&lt;/p&gt;
</summary><category term="talk"></category></entry><entry><title>Unit Testing Makes Your Code Better</title><link href="http://pyvideo.org/pycon-us-2014/unit-testing-makes-your-code-better.html" rel="alternate"></link><published>2014-04-13T00:00:00+00:00</published><updated>2014-04-13T00:00:00+00:00</updated><author><name>Greg Ward</name></author><id>tag:pyvideo.org,2014-04-13:pycon-us-2014/unit-testing-makes-your-code-better.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Unit testing is like public transit: everyone agrees it's a good thing
for other people to do. It's easier to swallow when you see how unit
testing improves not only the correctness of your code, but the design
as well. I'll walk through a real-life case study where adding unit
tests turned a pretty good module into an even better one: easier to
understand, extend, and reuse.&lt;/p&gt;
</summary></entry><entry><title>How to Write Reusable Code</title><link href="http://pyvideo.org/pycon-us-2015/how-to-write-reusable-code.html" rel="alternate"></link><published>2015-04-11T00:00:00+00:00</published><updated>2015-04-11T00:00:00+00:00</updated><author><name>Greg Ward</name></author><id>tag:pyvideo.org,2015-04-11:pycon-us-2015/how-to-write-reusable-code.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Learning to write high-quality, reusable code takes years of dedicated
work. Or you can take a shortcut: attend this talk and learn some of the
tricks I've figured out over a couple of decades of programming.&lt;/p&gt;
</summary></entry></feed>