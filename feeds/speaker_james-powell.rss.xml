<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>http://pyvideo.org/</link><description></description><lastBuildDate>Fri, 05 May 2017 00:00:00 +0000</lastBuildDate><item><title>Building Web-based Analysis &amp; Simulation Platforms with React/Redux, Flask, Celery, Bokeh, and Numpy</title><link>http://pyvideo.org/pydata-london-2017/building-web-based-analysis-simulation-platforms-with-reactredux-flask-celery-bokeh-and-numpy.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Titles - Building Web-based Analysis &amp;amp; Simulation Platforms with React/Redux, Flask, Celery, Bokeh, and Numpy&lt;/p&gt;
&lt;p&gt;Filmed at PyData 2017&lt;/p&gt;
&lt;p&gt;Description
What use is analytical code if it can't be integrated into a business workflow to solve real problems? This tutorial is about integrating analytical work into a real production system that can be used by business users. It focuses on building a web-based platform for managing long-running analytical code and presenting results in a convenient format, using cutting-edge combination of tools.&lt;/p&gt;
&lt;p&gt;Abstract
The purpose of this stack is to be able to rapidly create web-based environments for users to interact with the results of analytical and simulation processes (without needing to retrain one's self as a web programmer!)&lt;/p&gt;
&lt;p&gt;This tutorial is composed of the following pieces:&lt;/p&gt;
&lt;p&gt;building a simple simulation using Numpy. For the purposes of this tutorial, we model a very simple Monte Carlo simulation with a number of user-controllable, tweakable algorithm inputs and model parameters. The simulation is chosen to be simple enough to present and code quickly. The purpose of this tutorial is not building Monte Carlo simulations but packaging them into lightweight production systems.&lt;/p&gt;
&lt;p&gt;Celery for launching and managing the above simulation jobs. This tutorial will not cover all aspects of Celery. It will merely show how the tool can be used as a job management system.&lt;/p&gt;
&lt;p&gt;Flask as a very thin JSON API layer. The tutorial will make use of Flask plugins for quickly building JSON APIs. This is the thinnest and least interesting component of the tutorial and won't be covered in great depth.&lt;/p&gt;
&lt;p&gt;React + Redux for a slick, simple single-page app. Attendees are expected to be least familiar with Javascript and the React ecosystem. The tutorial will spend a fair amount of time on this component, and will cover setting up build environment using Babel (for JSX transpilation) and Gulp as a build system.&lt;/p&gt;
&lt;p&gt;Bokeh for presenting graphical results from the simulation. This component may be cut based on time considerations.&lt;/p&gt;
&lt;p&gt;If time permits, it might also be possible to discuss the use of React Native to quickly build mobile apps using the same infrastructure.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">James Powell</dc:creator><pubDate>Fri, 05 May 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-05-05:pydata-london-2017/building-web-based-analysis-simulation-platforms-with-reactredux-flask-celery-bokeh-and-numpy.html</guid></item><item><title>__instancecheck__ and user-defined type systems</title><link>http://pyvideo.org/pytexas-2013/__instancecheck__-and-user-defined-type-systems.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;James Powell is a Python programmer residing in New York City. He is the co-organiser of the NYC Python meetup (nycpython.com) and has spoken at PyData SV, PyData NYC, PyTexas, PyArkansas, PyGotham, and at the NYC Python meetup. He also authors a blog on Python topics at dontusethiscode.com&lt;/p&gt;
&lt;p&gt;instancecheck and subclasscheck are part of the fundamental protocols supported by objects in Python, and they are used in the standard library to support type checking via interfaces (e.g., isinstance(x, collections.Iterable) instead of type(x) is list)
This talk discusses how they work, from an end-user perspective and from the perspective of a CPython developer, and what these can be used for (e.g., modelling problems with user-defined, custom type systems.) This talk will also discuss real-world problems in a giant, multi-million line Python system that the presenter has seen and resolved using knowledge of these constructs.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">James Powell</dc:creator><pubDate>Fri, 16 Aug 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-08-16:pytexas-2013/__instancecheck__-and-user-defined-type-systems.html</guid></item><item><title>Classes and Metaclasses</title><link>http://pyvideo.org/pytexas-2013/classes-and-metaclasses.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;James Powell is a Python programmer residing in New York City. He is the co-organiser of the NYC Python meetup (nycpython.com) and has spoken at PyData SV, PyData NYC, PyTexas, PyArkansas, PyGotham, and at the NYC Python meetup. He also authors a blog on Python topics at dontusethiscode.com&lt;/p&gt;
&lt;p&gt;This talk discusses the fundamentals of how classes and metaclasses work in Python 2 and 3 from the perspective of the CPython interpreter. It covers the way these constructs can be used to model problems. e.g., metaclasses and build_class are the only mechanisms in Python that can be used to enforce constraints from a base class to a derived class.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">James Powell</dc:creator><pubDate>Fri, 16 Aug 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-08-16:pytexas-2013/classes-and-metaclasses.html</guid></item><item><title>Embeddings of Python</title><link>http://pyvideo.org/pytexas-2013/embeddings-of-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;James Powell is a Python programmer residing in New York City. He is the co-organiser of the NYC Python meetup (nycpython.com) and has spoken at PyData SV, PyData NYC, PyTexas, PyArkansas, PyGotham, and at the NYC Python meetup. He also authors a blog on Python topics at dontusethiscode.com&lt;/p&gt;
&lt;p&gt;This talk discusses embeddings of Python: the known &amp;quot;high-level embedding&amp;quot;: whole interpreter running within a C/C++ application using PyRun_SimpleString; a novel &amp;quot;medium-level embedding&amp;quot;: (potentially) zero-interpreter embedding within a C/C++ application using Cython for translation; a novel &amp;quot;Python with Python embedding&amp;quot;: running a Python interpreter from within a Python module, within the same process (with split/hybrid GC &amp;amp; PyObject shims)&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">James Powell</dc:creator><pubDate>Fri, 16 Aug 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-08-16:pytexas-2013/embeddings-of-python.html</guid></item><item><title>Integration with the Vernacular</title><link>http://pyvideo.org/pydata-seattle-2015/integration-with-the-vernacular.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The numpy model of computation in Python has proven to be one of the most successful ways to integrate high-performance computational code into an application. This talk offers a foundational conceptualization for this approach and discusses its strengths and limitations.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">James Powell</dc:creator><pubDate>Sun, 26 Jul 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-07-26:pydata-seattle-2015/integration-with-the-vernacular.html</guid></item><item><title>Panel: Using, contributing to, and integrating open source in large corporate environments</title><link>http://pyvideo.org/pydata-seattle-2015/panel-using-contributing-to-and-integrating-open-source-in-large-corporate-environments.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData is a gathering of users and developers of data analysis tools in Python. The goals are to provide Python enthusiasts a place to share ideas and learn from each other about how best to apply our language and tools to ever-evolving challenges in the vast realm of data management, processing, analytics, and visualization.&lt;/p&gt;
&lt;p&gt;We aim to be an accessible, community-driven conference, with tutorials for novices, advanced topical workshops for practitioners, and opportunities for package developers and users to meet in person.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">James Powell</dc:creator><pubDate>Sat, 25 Jul 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-07-25:pydata-seattle-2015/panel-using-contributing-to-and-integrating-open-source-in-large-corporate-environments.html</guid></item><item><title>Principles of Reporting Systems: It's About Time we Talked About Bitemporality</title><link>http://pyvideo.org/pydata-carolinas-2016/principles-of-reporting-systems-its-about-time-we-talked-about-bitemporality.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">James Powell</dc:creator><pubDate>Fri, 16 Sep 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-09-16:pydata-carolinas-2016/principles-of-reporting-systems-its-about-time-we-talked-about-bitemporality.html</guid></item><item><title>CPython internals: why bother?</title><link>http://pyvideo.org/pycon-ca-2016/cpython-internals-why-bother.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;So you've heard that the Python interpreter you use is called &amp;quot;CPython.&amp;quot;
It's written in C! But who cares? Why should you even bother to learn
more? Could this ever be helpful? Could it help you debug your code or
answer questions about how the language works? Thirty minutes is an
awful lot of time to spend saying &amp;quot;no, just forget about it&amp;quot;...&lt;/p&gt;
&lt;div class="section" id="james-powell-bio"&gt;
&lt;h4&gt;James Powell Bio&lt;/h4&gt;
&lt;p&gt;James is a volunteer at NumFOCUS, the 501(c)3 non-profit that supports
and promotes open source in data science, data analytics, and scientific
computing. At NumFOCUS, he serves as an office of the board, helping to
organize the PyData conference series. He also helps run New York's
local python meetup groups, NYC Python and Learn Python NYC, and is a
past-chair and current organizer for the New York Python conference,
PyGotham.&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">James Powell</dc:creator><pubDate>Sun, 13 Nov 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-11-13:pycon-ca-2016/cpython-internals-why-bother.html</guid></item><item><title>Closing Session</title><link>http://pyvideo.org/pydata-dc-2016/closing-session.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData DC 2016 Closing Notes&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">James Powell</dc:creator><pubDate>Sun, 09 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-09:pydata-dc-2016/closing-session.html</guid></item><item><title>Design Principles</title><link>http://pyvideo.org/pydata-dc-2016/design-principles.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData DC 2016&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">James Powell</dc:creator><pubDate>Sun, 09 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-09:pydata-dc-2016/design-principles.html</guid><category>Design</category></item><item><title>Don't Live Patch Your CPython Interpreter</title><link>http://pyvideo.org/pydata-chicago-2016/dont-live-patch-your-cpython-interpreter.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData Chicago 2016&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">James Powell</dc:creator><pubDate>Sat, 27 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-27:pydata-chicago-2016/dont-live-patch-your-cpython-interpreter.html</guid><category>CPython</category><category>interpreter</category></item><item><title>Python Gone Bananas: Monkey Patching Isn't Monkey Business</title><link>http://pyvideo.org/pygotham-2016/python-gone-bananas-monkey-patching-isnt-monkey-business.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python is an extremely dynamic language with a very &amp;quot;rich runtime.&amp;quot; Unlike in a compiled language like C or go, symbols (functions and data objects) can be bound and rebound at runtime; swapped out without the need for complicated syntax and without the risk of unsafe complications.
In the Python community, this is called &amp;quot;monkey-patching.&amp;quot; But it's not as bananas as it sounds!
In fact, it can be a very useful mechanism for extending functionality or for making robust, surgical fixes to a code-base!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">James Powell</dc:creator><pubDate>Sun, 17 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-07-17:pygotham-2016/python-gone-bananas-monkey-patching-isnt-monkey-business.html</guid></item><item><title>Overview of the NumFOCUS Data Science Stack</title><link>http://pyvideo.org/pydata-san-francisco-2016/overview-of-the-numfocus-data-science-stack.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData SF 2016&lt;/p&gt;
&lt;p&gt;Overview of the sponsored tools in NumFOCUS' Data Science Stack&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">James Powell</dc:creator><pubDate>Wed, 24 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-24:pydata-san-francisco-2016/overview-of-the-numfocus-data-science-stack.html</guid></item><item><title>The "NumPy" Approach</title><link>http://pyvideo.org/pydata-san-francisco-2016/the-numpy-approach.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData SF 2016&lt;/p&gt;
&lt;p&gt;The &amp;quot;NumPy&amp;quot; Approach&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">James Powell</dc:creator><pubDate>Wed, 24 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-24:pydata-san-francisco-2016/the-numpy-approach.html</guid></item><item><title>What's New in Python 3</title><link>http://pyvideo.org/pydata-san-francisco-2016/whats-new-in-python-3.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData SF 2016&lt;/p&gt;
&lt;p&gt;What's New in Python 3 - James Powell&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">James Powell</dc:creator><pubDate>Wed, 24 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-24:pydata-san-francisco-2016/whats-new-in-python-3.html</guid></item><item><title>The "Kwargh!" Problem</title><link>http://pyvideo.org/pydata-berlin-2016/the-kwargh-problem.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData Berlin 2016&lt;/p&gt;
&lt;p&gt;PyData is a gathering of users and developers of data analysis tools in Python. The goals are to provide Python enthusiasts a place to share ideas and learn from each other about how best to apply our language and tools to ever-evolving challenges in the vast realm of data management, processing, analytics, and visualization.&lt;/p&gt;
&lt;p&gt;We aim to be an accessible, community-driven conference, with tutorials for novices, advanced topical workshops for practitioners, and opportunities for package developers and users to meet in person.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">James Powell</dc:creator><pubDate>Tue, 31 May 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-05-31:pydata-berlin-2016/the-kwargh-problem.html</guid></item><item><title>`from __past__ import print_statement`: a Dadaist Rejection of Python 2 vs 3</title><link>http://pyvideo.org/pydata-amsterdam-2016/from-__past__-import-print_statement-a-dadaist-rejection-of-python-2-vs-3.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData Amsterdam 2016&lt;/p&gt;
&lt;p&gt;Description&lt;/p&gt;
&lt;p&gt;If the title doesn't make any sense, then there's no hope that the description will be any better. This talk will be a strange dive into interpreter hacks, the pointlessness of the Python 2 vs 3 debate, and the twisted artistic drive that pushes the speaker to come up with these perversions of the Python language. Prepared to be simultaneously repulsed, intrigued, and completely bored.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Honestly, does anyone read abstracts? Clearly you do! Maybe the talk is happening right now. You probably have no idea what the speaker is saying. You're looking at your phone: &amp;quot;what was this talk about again?&amp;quot;&lt;/p&gt;
&lt;p&gt;Would you be surprised to find out that even the speaker doesn't know what this talk is about? I hope so—I hope you would be surprised; how could the speaker not know what he's talking about? He's wearing a SUIT after all!&lt;/p&gt;
&lt;p&gt;(This talk constitutes he opinions of the presenter alone and do not reflect the opinions of &amp;quot;PyData&amp;quot; or &amp;quot;NumFOCUS.&amp;quot;)&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">James Powell</dc:creator><pubDate>Sat, 26 Mar 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-03-26:pydata-amsterdam-2016/from-__past__-import-print_statement-a-dadaist-rejection-of-python-2-vs-3.html</guid></item><item><title>Embeddings of Python</title><link>http://pyvideo.org/pycon-es-2013/embeddings-of-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Autor: James Powell&lt;/p&gt;
&lt;p&gt;Track: Avanzado&lt;/p&gt;
&lt;p&gt;How can Python be embedded into other applications (C/C++)? What bearing does this have on our conceptualisation of systems written in Python? This talk covers the very-high-level embedding and the pure-embedding and also includes two novel embeddings: a zero-interpreter embedding using Cython and a Python interpreter embedded as a extension model within another Python interpreter (the &amp;quot;Xzibit&amp;quot; embedding.) This is a talk I've given at PyData Boston and PyTexas. It's an advanced level talk around the ways we can embed Python into other (C/C++) applications. It includes two fairly novel results of my own research.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">James Powell</dc:creator><pubDate>Tue, 31 Dec 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-12-31:pycon-es-2013/embeddings-of-python.html</guid></item><item><title>Generators Showdown Showcase</title><link>http://pyvideo.org/pycon-es-2013/generators-showdown-showcase.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Autor: James Powell&lt;/p&gt;
&lt;p&gt;Track: Avanzado&lt;/p&gt;
&lt;p&gt;What are generators and coroutines in Python? What additional conceptualisations do they offer, and how can we use them to better model problems? This is a talk I've given at PyCon Canada, PyData Boston, and PyTexas. It's an intermediate-level talk around the core concept of generators with a lot of examples of not only neat things you can do with generators but also new ways to model and conceptualise problems.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">James Powell</dc:creator><pubDate>Sun, 29 Dec 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-12-29:pycon-es-2013/generators-showdown-showcase.html</guid><category>generators</category><category>coroutines</category></item><item><title>Generators will free your mind</title><link>http://pyvideo.org/pycon-es-2014/generators-will-free-your-mind.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What are generators and coroutines in Python? What additional conceptualisations do they offer, and how can we use them to better model problems? This is a talk I've given at PyData London, PyCon Spain, and the conference &amp;quot;for Python Quants&amp;quot;. It's an intermediate-level talk around the core concept of generators with a lot of examples of not only neat things you can do with generators but also new ways to model and conceptualise problems.&lt;/p&gt;
&lt;p&gt;Generators are one of the most notable features of Python, and they are a critical component of Python 3's driving focus on iterability as a core protocol. This talk introduces the basic concepts surrounding generators, generator expressions, and co-routines, then dives into ways that generators can improve our code: not just in terms of performance but also by offering us better ways to model our problems.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">James Powell</dc:creator><pubDate>Mon, 06 Apr 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-04-06:pycon-es-2014/generators-will-free-your-mind.html</guid><category>generators</category><category>coroutines</category></item><item><title>Hacking the CPython Interpreter</title><link>http://pyvideo.org/scipy-2016/hacking-the-cpython-interpreter-scipy-2016-james-powell.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">James Powell</dc:creator><pubDate>Fri, 15 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-07-15:scipy-2016/hacking-the-cpython-interpreter-scipy-2016-james-powell.html</guid><category>SciPy 2016</category></item><item><title>Python and Johnny Cash</title><link>http://pyvideo.org/pydata-london-2016/james-powell-python-and-johnny-cash.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData London 2016&lt;/p&gt;
&lt;p&gt;I was given this title by the Executive Director of NumFOCUS as punishment for being late in putting together a proposal. This talk will be a huge stretch to link Python to Johnny Cash. I suppose this means I'll have to wear all black. I'll probably show off some nifty (C)Python hacks, like adding AST-literals or resurrecting the print statement or implementing lambda-fusion.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">James Powell</dc:creator><pubDate>Wed, 11 May 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-05-11:pydata-london-2016/james-powell-python-and-johnny-cash.html</guid></item><item><title>Panel: The challenges and frontiers of data science in Europe</title><link>http://pyvideo.org/pydata-berlin-2014/panel-the-challenges-and-frontiers-of-data-scien.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Adam Drake</dc:creator><pubDate>Sun, 27 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-27:pydata-berlin-2014/panel-the-challenges-and-frontiers-of-data-scien.html</guid></item><item><title>Generators Will Free Your Mind</title><link>http://pyvideo.org/pydata-berlin-2014/generators-will-free-your-mind.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">James Powell</dc:creator><pubDate>Sat, 26 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-26:pydata-berlin-2014/generators-will-free-your-mind.html</guid></item><item><title>The Pathetic Fallacy, or, an Engineering Approach to Programming</title><link>http://pyvideo.org/pygotham-2014/the-pathetic-fallacy-or-an-engineering-approach.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Software programming is a young discipline, placed somewhere between the
rigorous world of mathematics and the pragmatic world of engineering. As
evidence of its immaturity as a discipline, consider how frequently the
same problems arise in the practice of writing a programme, and how
these problems are unaccompanied by widely-disseminated
conceptualisations or a commonly agreed-upon pathology or even a
well-defined guiding philosophy and epistemology. In other words, we
keep running into the same problems, and we often lack even a basis for
discussing them (much less avoiding them)!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">James Powell</dc:creator><pubDate>Tue, 16 Sep 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-09-16:pygotham-2014/the-pathetic-fallacy-or-an-engineering-approach.html</guid></item><item><title>A CPython Eating Its Own Tail</title><link>http://pyvideo.org/pytexas-2014/a-cpython-eating-its-own-tail.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This is an expert-level talk that dives into CPython and discusses
various ways to embed Python interpreters. It starts with the &amp;quot;very high
level&amp;quot; embedding &amp;amp; the &amp;quot;pure&amp;quot; embedding, shows a fairly novel &amp;quot;zero
interpreter&amp;quot; embedding using Cython, a few attempts at a ctypes/cffi
embedding, and builds to a finish with a source-filter embedding of a
Python interpreter into itself.&lt;/p&gt;
&lt;p&gt;The purpose of this talk is to have some fun diving into CPython
internals while looking practical approaches to embedding CPython
interpreters into other (C/C++) processes. The final result, a Python 3
interpreter embedded into a Python 2 interpreter as an extension model,
is novel but may be of fairly limited actual use. It is, however, pretty
wild and a lot of fun!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">James Powell</dc:creator><pubDate>Sun, 05 Oct 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-10-05:pytexas-2014/a-cpython-eating-its-own-tail.html</guid></item><item><title>Lightning Talks</title><link>http://pyvideo.org/pytexas-2014/lightning-talks-11.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;ul class="simple"&gt;
&lt;li&gt;(00:00) - Sasha Hart -- Make PyPI Fast&lt;/li&gt;
&lt;li&gt;(0:01:36) - Sasha Hart -- Find Your Editor&lt;/li&gt;
&lt;li&gt;(0:04:17) - Jeff Rush -- Ways to Call Out&lt;/li&gt;
&lt;li&gt;(0:06:28) - Jeff Rush -- Weak References&lt;/li&gt;
&lt;li&gt;(0:08:17) - James Powell -- Newton's Method&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">James Powell</dc:creator><pubDate>Sun, 05 Oct 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-10-05:pytexas-2014/lightning-talks-11.html</guid></item><item><title>Generators Will Free Your Mind</title><link>http://pyvideo.org/pytexas-2014/generators-will-free-your-mind-0.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What are generators and coroutines in Python? What additional
conceptualisations do they offer, and how can we use them to better
model problems? It's an intermediate-level talk around the core concept
of generators with a lot of examples of not only neat things you can do
with generators but also new ways to model and conceptualise problems.&lt;/p&gt;
&lt;p&gt;Generators are one of the most notable features of Python, and they are
a critical component of Python 3's driving focus on iterability as a
core protocol. This talk introduces the basic concepts surrounding
generators, generator expressions, and co-routines, then dives into ways
that generators can improve our code: not just in terms of performance
but also by offering us better ways to model our problems.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">James Powell</dc:creator><pubDate>Sat, 04 Oct 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-10-04:pytexas-2014/generators-will-free-your-mind-0.html</guid></item><item><title>I haven't decided</title><link>http://pyvideo.org/pytexas-2015/i-havent-decided.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;More info coming soon&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">James Powell</dc:creator><pubDate>Fri, 09 Oct 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-10-09:pytexas-2015/i-havent-decided.html</guid></item><item><title>It's Saturday Morning—Sleep in!, or, Don't Use This Keynote</title><link>http://pyvideo.org/pytexas-2015/its-saturday-morningsleep-in-or-dont-use-th.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">James Powell</dc:creator><pubDate>Fri, 09 Oct 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-10-09:pytexas-2015/its-saturday-morningsleep-in-or-dont-use-th.html</guid></item></channel></rss>