<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>http://pyvideo.org/</link><description></description><lastBuildDate>Fri, 10 Jul 2015 00:00:00 +0000</lastBuildDate><item><title>klepto Unified Persistent Storage to Memory, Database, or Disk</title><link>http://pyvideo.org/scipy-2015/klepto-unified-persistent-storage-to-memory-database-or-disk.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michael McKerns</dc:creator><pubDate>Fri, 10 Jul 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-07-10:scipy-2015/klepto-unified-persistent-storage-to-memory-database-or-disk.html</guid></item><item><title>The Failure of Python Object Serializations: Why HPC in Python is Broken and How to Fix it</title><link>http://pyvideo.org/scipy-2014/the-failure-of-python-object-serializations-why.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Parallel and asynchronous computing in python is crippled by pickle's
poor object serialization. Dill, a more robust serialization package,
strives to serialize all of python. Dill has been used to enable state
persistence and recovery, global caching, and the coordination of
distributed parallel calculations across a network of the world's
largest computers.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Parallel and asynchronous computing in python is crippled by pickle's
poor object serialization. However, a more robust serialization package
would drastically improve the situation. To leverage the cores found in
modern processors we need to communicate functions between different
processes -- and that means callables must be serialized without pickle
barfing. Similarly, parallel and distributed computing with MPI, GPUs,
sockets, and across other process boundaries all need serialized
functions (or other callables). So why is pickling in python so broken?
Python's ability to leverage these awesome communication technologies is
limited by python's own inability to be a fully serializable language.
In actuality, serialization in python is quite limited, and for really
no good reason.&lt;/p&gt;
&lt;p&gt;Many raise security concerns for full object serialization, however it
can be argued that it is not pickle's responsibility to do proper
authentication. In fact, one could apply rather insecure serialization
of all objects the objects were all sent across RSA-encrypted
ssh-tunnels, for example.&lt;/p&gt;
&lt;p&gt;Dill is a serialization package that strives to serialize all of python.
We have forked python's multiprocessing to use dill. Dill can also be
leveraged by mpi4py, ipython, and other parallel or distributed python
packages. Dill serves as the backbone for a distributed parallel
computing framework that is being used to design the next generation of
large-scale heterogeneous computing platforms, and has been leveraged in
large-scale calculations of risk and uncertainty. Dill has been used to
enable state persistence and recovery, global caching, and the
coordination of distributed parallel calculations across a network of
the world's largest computers.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://pythonhosted.org/dill"&gt;http://pythonhosted.org/dill&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/uqfoundation"&gt;https://github.com/uqfoundation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://matthewrocklin.com/blog/work/2013/12/05/Parallelism-and-Serialization/"&gt;http://matthewrocklin.com/blog/work/2013/12/05/Parallelism-and-Serialization/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://stackoverflow.com/questions/19984152/what-can-multiprocessing-and-dill-do-together?rq=1"&gt;http://stackoverflow.com/questions/19984152/what-can-multiprocessing-and-dill-do-together?rq=1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://groups.google.com/forum/#!topic/mpi4py/1fd4FwdgpWY"&gt;https://groups.google.com/forum/#!topic/mpi4py/1fd4FwdgpWY&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://nbviewer.ipython.org/gist/anonymous/5241793"&gt;http://nbviewer.ipython.org/gist/anonymous/5241793&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michael McKerns</dc:creator><pubDate>Wed, 09 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-09:scipy-2014/the-failure-of-python-object-serializations-why.html</guid></item><item><title>The failure of python object serialization: why HPC in python is broken, and how to fix it</title><link>http://pyvideo.org/euroscipy-2014/the-failure-of-python-object-serialization-why-h.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Parallel and asynchronous computing in python is crippled by pickle's
poor object serialization. However, a more robust serialization package
would drastically improve the situation. To leverage the cores found in
modern processors we need to communicate functions between different
processes -- and that means callables must be serialized without pickle
barfing. Similarly, parallel and distributed computing with MPI, GPUs,
sockets, and across other process boundaries all need serialized
functions (or other callables). So why is pickling in python so broken?
Python's ability to leverage these awesome communication technologies is
limited by python's own inability to be a fully serializable language.
In actuality, serialization in python is quite limited, and for really
no good reason.&lt;/p&gt;
&lt;p&gt;Many raise security concerns for full object serialization, however it
can be argued that it is not pickle's responsibility to do proper
authentication. In fact, one could apply rather insecure serialization
of all objects the objects were all sent across RSA-encrypted
ssh-tunnels, for example.&lt;/p&gt;
&lt;p&gt;Dill is a serialization package that strives to serialize all of python.
We have forked python's multiprocessing to use dill. Dill can also be
leveraged by mpi4py, ipython, and other parallel or distributed python
packages. Dill serves as the backbone for a distributed parallel
computing framework that is being used to design the next generation of
large-scale heterogeneous computing platforms, and has been leveraged in
large-scale calculations of risk and uncertainty. Dill has been used to
enable state persistence and recovery, global caching, and the
coordination of distributed parallel calculations across a network of
the world's largest computers.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://pythonhosted.org/dill"&gt;http://pythonhosted.org/dill&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/uqfoundation"&gt;https://github.com/uqfoundation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://matthewrocklin.com/blog/work/2013/12/05/Parallelism-and-Serialization/"&gt;http://matthewrocklin.com/blog/work/2013/12/05/Parallelism-and-Serialization/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://stackoverflow.com/questions/19984152/what-can-multiprocessing-and-dill-do-together?rq=1"&gt;http://stackoverflow.com/questions/19984152/what-can-multiprocessing-and-dill-do-together?rq=1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://groups.google.com/forum/#!topic/mpi4py/1fd4FwdgpWY"&gt;https://groups.google.com/forum/#!topic/mpi4py/1fd4FwdgpWY&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://nbviewer.ipython.org/gist/anonymous/5241793"&gt;http://nbviewer.ipython.org/gist/anonymous/5241793&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michael McKerns</dc:creator><pubDate>Wed, 22 Oct 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-10-22:euroscipy-2014/the-failure-of-python-object-serialization-why-h.html</guid></item></channel></rss>