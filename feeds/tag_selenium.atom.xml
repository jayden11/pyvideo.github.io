<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="http://pyvideo.org/" rel="alternate"></link><link href="http://pyvideo.org/feeds/tag_selenium.atom.xml" rel="self"></link><id>http://pyvideo.org/</id><updated>2017-02-05T00:00:00+00:00</updated><entry><title>BDD To The Bone - Using Behave and Selenium to Test-Drive Web Applications</title><link href="http://pyvideo.org/pytennessee-2017/bdd-to-the-bone-using-behave-and-selenium-to-test-drive-web-applications.html" rel="alternate"></link><published>2017-02-05T00:00:00+00:00</published><updated>2017-02-05T00:00:00+00:00</updated><author><name>Pat Viafore</name></author><id>tag:pyvideo.org,2017-02-05:pytennessee-2017/bdd-to-the-bone-using-behave-and-selenium-to-test-drive-web-applications.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you ever felt that unit tests just weren't enough? It feels like something always still goes wrong when your customers start to use your application. All your unit tests pass, so what is going on? In this talk, we're going to look how to use the behave library to explore behavior driven development as well as the selenium library to control your web application through a browser.&lt;/p&gt;
</summary><category term="selenium"></category><category term="bdd"></category><category term="behave"></category><category term="test-driver"></category></entry><entry><title>PyCon 2009: Introduction to Functional Web Testing With Twill and Selenium (Part 2 of 2)</title><link href="http://pyvideo.org/pycon-us-2009/pycon-2009--introduction-to-functional-web-testi0.html" rel="alternate"></link><published>1990-01-01T00:00:00+00:00</published><updated>1990-01-01T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,1990-01-01:pycon-us-2009/pycon-2009--introduction-to-functional-web-testi0.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;[VIDEO HAS ISSUES: ] This tutorial aims to educate attendees on the the
basics of functional testing of web applications. Is your app rendered
as plain HTML? Great! We'll show you how to build a test suite for it.
Is your app all AJAXy? No problem! We can do that too! We're going to
write a web application, first in straight html and then with AJAX, and
show you how to try to break it. At the end of this hands-on session,
you'll be able to write tests for almost any web site, using all
open-source tools and our favorite language - Python.&lt;/p&gt;
</summary><category term="pycon"></category><category term="pycon2009"></category><category term="selenium"></category><category term="twill"></category></entry><entry><title>PyCon 2009: Introduction to Functional Web Testing With Twill and Selenium (Part 1 of 2)</title><link href="http://pyvideo.org/pycon-us-2009/pycon-2009--introduction-to-functional-web-testin.html" rel="alternate"></link><published>1990-01-01T00:00:00+00:00</published><updated>1990-01-01T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,1990-01-01:pycon-us-2009/pycon-2009--introduction-to-functional-web-testin.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;[VIDEO HAS ISSUES: ] This tutorial aims to educate attendees on the the
basics of functional testing of web applications. Is your app rendered
as plain HTML? Great! We'll show you how to build a test suite for it.
Is your app all AJAXy? No problem! We can do that too! We're going to
write a web application, first in straight html and then with AJAX, and
show you how to try to break it. At the end of this hands-on session,
you'll be able to write tests for almost any web site, using all
open-source tools and our favorite language - Python.&lt;/p&gt;
</summary><category term="pycon"></category><category term="pycon2009"></category><category term="selenium"></category><category term="twill"></category></entry><entry><title>Testing the Mobile (and Desktop) Web with Selenium 2.0 - Better, Faster, and more Pythonicly</title><link href="http://pyvideo.org/pycon-us-2011/pycon-2011--testing-the-mobile--and-desktop--web-.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Jason Huggins</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--testing-the-mobile--and-desktop--web-.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Testing the Mobile (and Desktop) Web with Selenium 2.0 - Better, Faster,
and more Pythonicly&lt;/p&gt;
&lt;p&gt;Presented by Jason Huggins&lt;/p&gt;
&lt;p&gt;Selenium is a popular web application testing tool for acceptance
testing dynamic web applications. Selenium 2.0 has a different
architecture that makes it leaner, meaner, and more pythonic -- for
testing desktop &lt;em&gt;and&lt;/em&gt; mobile web (iPhone/Android) apps. This talk will
go into detail on how Selenium 2 works. If you like testing and Python,
you'll enjoy what's cooking in Selenium 2.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Selenium was originally created by Jason Huggins and his team at
ThoughtWorks in 2004 as a tool for cross-browser acceptance testing of
dynamic web apps -- apps that use JavaScript heavily on the client. Over
the years, the Selenium tool family has expanded to include a Firefox
record and playback tool (Selenium IDE), a Remote Control server that
allows API access from any major programming language, and a Grid server
that allows tests to run in parallel across many machines.&lt;/p&gt;
&lt;p&gt;Despite it's widespread industry adoption, the Selenium project is far
from done. Selenium's goal is to drive any browser the same way an end
user would (e.g. opening pages, clicking buttons, entering text, etc.)
with any programming language on any OS platform. It's an ambitious
goal, and with a steady stream of new browsers (Chrome), new platforms
(Android, iPhone), and new HTML5 technologies (video, canvas, offline
storage) to support, just keeping up is an arduous task.&lt;/p&gt;
&lt;p&gt;Astute observers will note, though, the bulk of Selenium's automation
engine is implemented in JavaScript, which is confined by the browser's
security sandbox in which it executes JavaScript code. That security
sandbox ultimately is at odds with Selenium's goal to drive the browser
just as a user would. A user has no problem interacting with security
alerts for untrusted certificates, or file upload dialog boxes, but
Selenium can't deal with these kinds of things easily without extra
effort.&lt;/p&gt;
&lt;p&gt;Enter WebDriver. There's a lot in common between the Selenium and
WebDriver projects. They're both tools for automated testing of web
applications, and both aspire to offer browser test automation from any
language on any platform. However, they do their thing in radically
different ways. Selenium uses the strategy that JavaScript is the one
common tool available for automating all browsers, even though its
capabilities can be highly constrained. Meanwhile, WebDriver leverages
the strategy that acknowledges different automation strategies work best
for different browsers. COM works best for IE on Windows, Apple Events
for Safari on OS X. And Firefox, well, the best way to natively automate
Firefox is to turn it into a telnet server. (But that's a whole other
PyCon talk entirely!) WebDriver aims to natively drive each browser the
best way possible for maximum capability, then hiding those differences
between lower level C and C++ APIs, and finally exposing the
functionality through the appropriate C/C++ mechanism for each target
language, such as using ctypes for Python. With WebDriver's technical
approach, anything a user can do is now possible in test automation
code.&lt;/p&gt;
&lt;p&gt;This talk will go into detail explaining how Selenium and WebDriver (aka
Selenium 2) work, comparing the strengths and weaknesses of each tool's
approach to browser automation. The talk will then explain what Selenium
2.0 looks like and how to use it.&lt;/p&gt;
&lt;p&gt;Talk outline:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Description of problem space&lt;ul&gt;
&lt;li&gt;More browsers&lt;/li&gt;
&lt;li&gt;More frequent browser releases&lt;/li&gt;
&lt;li&gt;HTML 5 - video, canvas, offline storage&lt;/li&gt;
&lt;li&gt;The web in more places - Mobile, Chrome OS&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Description of Selenium&lt;/li&gt;
&lt;li&gt;Strengths of Selenium&lt;/li&gt;
&lt;li&gt;Description of challenges for Selenium 1&lt;ul&gt;
&lt;li&gt;Javascript security sandbox&lt;/li&gt;
&lt;li&gt;Same origin policy / cross-site scripting&lt;/li&gt;
&lt;li&gt;OS-level popups&lt;/li&gt;
&lt;li&gt;Speed / stability&lt;/li&gt;
&lt;li&gt;Java as the cross-language integration point (aka Not Very
Pythonic, eh?)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Description of Selenium 2 (aka WebDriver)&lt;/li&gt;
&lt;li&gt;Strengths of Selenium 2&lt;/li&gt;
&lt;li&gt;How Selenium 2 is more pythonic&lt;ul&gt;
&lt;li&gt;(Lots and lots of example code goes here.)&lt;/li&gt;
&lt;li&gt;Spoiler Alert: No Java server required!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How to test Android apps&lt;/li&gt;
&lt;li&gt;How to test iPhone apps&lt;/li&gt;
&lt;li&gt;Selenium development roadmap&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="browsers"></category><category term="embedded"></category><category term="html5"></category><category term="pycon"></category><category term="pycon2011"></category><category term="selenium"></category><category term="webdriver"></category></entry></feed>