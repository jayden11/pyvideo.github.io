<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="http://pyvideo.org/" rel="alternate"></link><link href="http://pyvideo.org/feeds/tag_python3.atom.xml" rel="self"></link><id>http://pyvideo.org/</id><updated>2013-03-15T00:00:00+00:00</updated><entry><title>Vintage 1978 Superboard II hacking with some Python3 and ZeroMQ</title><link href="http://pyvideo.org/chipy/vintage-1978-superboard-ii-hacking-with-some-pyth.html" rel="alternate"></link><published>2011-01-13T00:00:00+00:00</published><updated>2011-01-13T00:00:00+00:00</updated><author><name>David Beazley</name></author><id>tag:pyvideo.org,2011-01-13:chipy/vintage-1978-superboard-ii-hacking-with-some-pyth.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;I'm not sure if we're still looking for talks on Thursday, but if so,
I'd like to volunteer to give a talk about using Python to do some
retro-computing hacking involving my vintage 1978 Superboard II. It's
not exactly robotics, but it involves hardware and a lot of low-level
hacking (along with some Python3 and ZeroMQ thrown in for good measure
;-).&lt;/p&gt;
</summary><category term="chipy"></category><category term="cool"></category><category term="python3"></category><category term="zeromq"></category></entry><entry><title>Changes to the GIL in Python 3</title><link href="http://pyvideo.org/chipy/changes-to-the-gil-in-python-3.html" rel="alternate"></link><published>2010-01-14T00:00:00+00:00</published><updated>2010-01-14T00:00:00+00:00</updated><author><name>David Beazley</name></author><id>tag:pyvideo.org,2010-01-14:chipy/changes-to-the-gil-in-python-3.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Follow-up to David's last GIL talk in June 2009. This presentation walks
through changes to the GIL that are being made.&lt;/p&gt;
</summary><category term="chipy"></category><category term="gil"></category><category term="python3"></category></entry><entry><title>Blender 2.5 loves Python 3</title><link href="http://pyvideo.org/chipy/blender-2-5-loves-python-3.html" rel="alternate"></link><published>2009-10-08T00:00:00+00:00</published><updated>2009-10-08T00:00:00+00:00</updated><author><name>Christopher Allan Webber</name></author><id>tag:pyvideo.org,2009-10-08:chipy/blender-2-5-loves-python-3.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Blender 2.5 loves Python 3&lt;/p&gt;
&lt;p&gt;Presented by Chris Webber on October 8th, 2009&lt;/p&gt;
&lt;p&gt;Chris talks about the upcoming Blender 2.5 release. &amp;quot;Blender 2.5 is the
first app I know of that &lt;em&gt;requires&lt;/em&gt; Python 3.X. So that's pretty
interesting on its own. But there's plenty more interesting stuff to
discuss. It's going to be mostly an overview talk. Blender's python
integration could possibly span 3 separate talks, especially considering
the blender game engine's use of it, which is a separate but interesting
talk.&amp;quot;&lt;/p&gt;
&lt;p&gt;ChiPy is a group of Chicago Python Programmers, l33t, and n00bs.
Meetings are held monthly at various locations around Chicago. Also,
ChiPy is a proud sponsor of many Open Source and Educational efforts in
Chicago. Stay tuned to the mailing list for more info. &lt;a class="reference external" href="http://chipy.org/"&gt;ChiPy
website&lt;/a&gt;&lt;/p&gt;
</summary><category term="blender"></category><category term="chipy"></category><category term="chriswebber"></category><category term="python3"></category></entry><entry><title>Panel: Python 3</title><link href="http://pyvideo.org/pycon-au-2011/panel-python-3.html" rel="alternate"></link><published>2011-08-23T00:00:00+00:00</published><updated>2011-08-23T00:00:00+00:00</updated><author><name>Nick Coghlan</name></author><id>tag:pyvideo.org,2011-08-23:pycon-au-2011/panel-python-3.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;This is a panel discussion in which Nick Coghlan, Raymond Hettinger and
Richard Jones discuss the state of Python 3, some of the new features,
the 3rd party adoption, migration strategies and open to the floor for
questions.&lt;/p&gt;
</summary><category term="migration"></category><category term="python3"></category></entry><entry><title>Python 3.3</title><link href="http://pyvideo.org/pycon-de-2012/python-3-3.html" rel="alternate"></link><published>2012-10-31T00:00:00+00:00</published><updated>2012-10-31T00:00:00+00:00</updated><author><name>Martin v. Löwis</name></author><id>tag:pyvideo.org,2012-10-31:pycon-de-2012/python-3-3.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Am 29.9.2012 wurde nach 19-monatiger Entwicklungszeit Python 3.3&lt;/p&gt;
&lt;p&gt;fertiggestellt. Es ist die größte Erweiterung von Python seit Version&lt;/p&gt;
&lt;p&gt;3.0; Änderungen gab es in allen Bereichen der Implementierung (Syntax,&lt;/p&gt;
&lt;p&gt;Standardbibliothek, Paketierung, interne Strukturen). In dem Vortrag&lt;/p&gt;
&lt;p&gt;werden die wesentlichen Änderungen umrissen, sowohl aus Anwendersicht&lt;/p&gt;
&lt;p&gt;wie auch aus Sicht eines core committers.&lt;/p&gt;
</summary><category term="python"></category><category term="python3"></category></entry><entry><title>Mastering Python 3 I/O (part 1)</title><link href="http://pyvideo.org/pycon-us-2010/pycon-2010--mastering-python-3-i-o.html" rel="alternate"></link><published>2010-02-19T00:00:00+00:00</published><updated>2010-02-19T00:00:00+00:00</updated><author><name>David Beazley</name></author><id>tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--mastering-python-3-i-o.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Mastering Python 3 I/O&lt;/p&gt;
&lt;p&gt;Presented by David Beazley&lt;/p&gt;
&lt;p&gt;As most Python programmers know, Python 3 breaks backwards compatibility
with Python 2 in a number of significant ways. Although guides to Python
3 tend to focus on superficial incompatibilities such as the new print
function, changes to exception handling, or new language features, the
most substantial changes concern the strict separation of Unicode and
bytes as well as the new I/O stack. Not only do these changes have
far-reaching effects throughout the standard library, but changes to I/O
are likely to be the most major source of problems for anyone porting an
existing Python application to Python 3. In this tutorial, we're going
to take a top-to-bottom tour of the entire Python 3 I/O system. We'll
focus on how to properly handle both text and binary data, changes to
standard library modules, examine advanced features such as the buffer
API, perform some performance experiments, and end with practical advice
for programmers working on porting applications from Python 2 to 3.
Intended Audience&lt;/p&gt;
&lt;p&gt;Intermediate to advanced Python programmers who are either developing
new applications or contemplating a migration to Python 3. Attendees
should already be familiar with the basics of Python programming
including standard datatypes and commonly used library modules. A
background in systems programming topics such as file handling,
subprocesses, and socket programming is also recommended. Class Outline&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Introducing Python 3 (with a focus on I/O)&lt;/li&gt;
&lt;li&gt;Text Processing&lt;/li&gt;
&lt;li&gt;Binary Data Handling&lt;/li&gt;
&lt;li&gt;Dealing with System Interfaces and External Programs&lt;/li&gt;
&lt;li&gt;The New io library&lt;/li&gt;
&lt;li&gt;Network programming&lt;/li&gt;
&lt;li&gt;The revised buffer API and direct I/O&lt;/li&gt;
&lt;li&gt;Porting from Python 2 to 3.&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="io"></category><category term="pycon"></category><category term="pycon2010"></category><category term="python3"></category><category term="tutorial"></category></entry><entry><title>Pynie: Python 3 on Parrot (#148)</title><link href="http://pyvideo.org/pycon-us-2010/pycon-2010--pynie--python-3-on-parrot---148.html" rel="alternate"></link><published>2010-02-19T00:00:00+00:00</published><updated>2010-02-19T00:00:00+00:00</updated><author><name>Allison Randal</name></author><id>tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--pynie--python-3-on-parrot---148.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Pyine: Python 3 on Parrot&lt;/p&gt;
&lt;p&gt;Presented by Allison Randal&lt;/p&gt;
&lt;p&gt;Pynie is an implementation of Python 3 on Parrot. The goal of Pynie is
to duplicate the pure-Python behavior of CPython 3.x, and perhaps
eventually a C API compatibility layer. Parrot provides a set of
compiler tools and core functionality common to many dynamic languages,
so the core code of Pynie is lightweight. Pynie allows Python 3
libraries to be shared between multiple languages. This talk is an
overview of the features Pynie currently supports and the work left to
be done, together with an introduction to the internals of Pynie.&lt;/p&gt;
</summary><category term="parrot"></category><category term="pycon"></category><category term="pycon2010"></category><category term="pyine"></category><category term="python3"></category></entry><entry><title>Python 3: The Next Generation (#48)</title><link href="http://pyvideo.org/pycon-us-2010/pycon-2010--python-3--the-next-generation---48.html" rel="alternate"></link><published>2010-02-19T00:00:00+00:00</published><updated>2010-02-19T00:00:00+00:00</updated><author><name>Wesley J. Chun</name></author><id>tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--python-3--the-next-generation---48.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python 3: The Next Generation&lt;/p&gt;
&lt;p&gt;Presented by Wesley J. Chun&lt;/p&gt;
&lt;p&gt;This talk is about the evolution of Python. We will discuss Python 2 and
Python 3: what the compatibility issues are, what the main differences
are, and also talk about migration, Python 2.6, and other transition
tools.&lt;/p&gt;
</summary><category term="2to3"></category><category term="pycon"></category><category term="pycon2010"></category><category term="python3"></category></entry><entry><title>Saturday Morning Lightning Talks</title><link href="http://pyvideo.org/pycon-us-2011/pycon-2011--saturday-morning-lightning-talks.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--saturday-morning-lightning-talks.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Saturday morning lightning talks&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Saturday Morning Lightning Talks&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;00:00 Alfredo Deza - Faster VIM Python Editing
(&lt;a class="reference external" href="https://github.com/alfredodeza/chapa.vim"&gt;github.com/alfredodeza/chapa.vim&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;03:40 Dean Hall - Python-on-a-chip
(&lt;a class="reference external" href="http://pythononachip.org/"&gt;pythononachip.org&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;07:55 Ned Batchelder - Cog will make you happy
(&lt;a class="reference external" href="http://nedbatchelder.com/code/cog"&gt;nedbatchelder.com/code/cog&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;13:55 Brett Cannon - (Some of) your PSF money at work&lt;/li&gt;
&lt;li&gt;21:10 Baiju Muthukaden - GetPython3.net
(&lt;a class="reference external" href="http://getpython3.net/"&gt;getpython3.net&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;25:20 Shai Ben-yehuda - Light-weight UI&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;[VIDEO HAS ISSUES: slides for Alfredo's and Ned's talks are impossible
to read.]&lt;/p&gt;
</summary><category term="chapa.vim"></category><category term="cog"></category><category term="pycon"></category><category term="pycon2011"></category><category term="pymite"></category><category term="python3"></category><category term="pythononachip"></category><category term="vim"></category></entry><entry><title>Status of Unicode in Python 3</title><link href="http://pyvideo.org/pycon-us-2011/pycon-2011--status-of-unicode-in-python-3.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Victor Stinner</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--status-of-unicode-in-python-3.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Introduced in Python 2.0, unicode became the default string type in
Python 3.0. It took 8 years to switch to unicode, and since Python 3.0,
a lot of bugs has been fixed. The switch to unicode opened many
questions. Should Python support both bytes and characters for
filenames? What to do with undecodable bytes? etc.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The talk will focus on the recent issues fixed in Python 3.1 and 3.2:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Use the PEP 383 (error handler to store undecodable bytes) everywhere&lt;/li&gt;
&lt;li&gt;Encoding of the command line arguments: utf-8 on Mac OS X, locale
encoding on UNIX/BSD, unicode on Windows&lt;/li&gt;
&lt;li&gt;Environment variables: creation of os.environb&lt;/li&gt;
&lt;li&gt;Filenames: huge work to support the PEP 383 everywhere, creation of
os.fsencode() and os.fsdecode()&lt;/li&gt;
&lt;li&gt;Python source code encoding: use tokenize.detect_encoding() instead
of the locale encoding&lt;/li&gt;
&lt;li&gt;some library examples: email, ftp, ...&lt;/li&gt;
&lt;li&gt;etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The talk will present not only the changes in Python, but also in the C
API.&lt;/p&gt;
</summary><category term="pycon"></category><category term="pycon2011"></category><category term="python3"></category><category term="unicode"></category></entry><entry><title>Python 3: the next generation is here already</title><link href="http://pyvideo.org/pycon-us-2011/python-3-the-next-generation-is-here-already.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Wesley J. Chun</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/python-3-the-next-generation-is-here-already.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python 3: the next generation is here already&lt;/p&gt;
&lt;p&gt;Presented by wesley chun&lt;/p&gt;
&lt;p&gt;This talk is about the evolution of Python. We will discuss Python 2 and
Python 3: what the compatibility issues are, what the main differences
are, and also talk about migration, Python 2.6/2.7, and other transition
tools.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Python is currently at a crossroads: Python 2 has taken it from a quiet
word- of-mouth language to primetime, with many companies around the
world using it and an ever-increasing global marketshare of the
programming world. But now comes Python 3, the first version of the
language that is not backwards compatible with previous releases.&lt;/p&gt;
&lt;p&gt;What does this mean? Are all my Python programs going to break? Will I
have to rewrite everything? How much time do I have? When is Python 2
going to be EOL'd? Is the language undergoing a complete rewrite and
will I even recognize it? What are the changes between Python 2 and 3
anyway? Also, the next generation is already here, as Python 3 is over
two years old now. What has been ported so far, and what is its current
status? Are migration plans or transition tools available? If I want to
start learning Python, should I do Python 2 or Python 3? Are all Python
2 books obsolete?&lt;/p&gt;
&lt;p&gt;We will attempt to answer all of these questions and more. Join us!&lt;/p&gt;
&lt;p&gt;OUTLINE/TOPICS&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Python 2 vs. Python 3&lt;/li&gt;
&lt;li&gt;Introduction to Python 3&lt;/li&gt;
&lt;li&gt;Backwards Compatibility&lt;/li&gt;
&lt;li&gt;Generational Changes&lt;/li&gt;
&lt;li&gt;Key Differences&lt;/li&gt;
&lt;li&gt;Role of Remaining Python 2.x releases&lt;/li&gt;
&lt;li&gt;Transition &amp;amp; Migration Plans &amp;amp; Tools&lt;/li&gt;
&lt;li&gt;Futures&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="2to3"></category><category term="pycon"></category><category term="pycon2011"></category><category term="python2"></category><category term="python3"></category></entry><entry><title>Transforming Code into Beautiful, Idiomatic Python</title><link href="http://pyvideo.org/pycon-us-2013/transforming-code-into-beautiful-idiomatic-pytho.html" rel="alternate"></link><published>2013-03-15T00:00:00+00:00</published><updated>2013-03-15T00:00:00+00:00</updated><author><name>Raymond Hettinger</name></author><id>tag:pyvideo.org,2013-03-15:pycon-us-2013/transforming-code-into-beautiful-idiomatic-pytho.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Learn to take better advantage of Python's best features and improve
existing code through a series of code transformations, &amp;quot;When you see
this, do that instead.&amp;quot;&lt;/p&gt;
&lt;p&gt;Timetable:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=184s"&gt;03:04&lt;/a&gt; -- Looping over a range of functions&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=287s"&gt;04:47&lt;/a&gt; -- Looping over a collection&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=328s"&gt;05:28&lt;/a&gt; -- Looping backwards&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=411s"&gt;06:51&lt;/a&gt; -- Looping over a collection of indicies&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=456s"&gt;07:36&lt;/a&gt; -- Looping over two collections&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=582s"&gt;09:42&lt;/a&gt; -- Looping in sorted order&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=604s"&gt;10:04&lt;/a&gt; -- Custom sort order&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=747s"&gt;12:27&lt;/a&gt; -- Call a function until a sentinel value&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=952s"&gt;15:52&lt;/a&gt; -- Distinguishing multiple exit points in loops&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=1158s"&gt;19:18&lt;/a&gt; -- Looping over dictionary keys&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=1270s"&gt;21:10&lt;/a&gt; -- Looping over dictionary keys and values&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=1312s"&gt;21:52&lt;/a&gt; -- Construct a dictionary from pairs&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=1395s"&gt;23:15&lt;/a&gt; -- Counting with dictionaries&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=1530s"&gt;25:30&lt;/a&gt; -- Grouping with dictionaries&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=1677s"&gt;27:57&lt;/a&gt; -- Is a dictionary pop() atomic?&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=1752s"&gt;29:12&lt;/a&gt; -- Linking dictionaries&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=1870s"&gt;31:10&lt;/a&gt; -- Clarify function calls with keyword arguments&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=1937s"&gt;32:17&lt;/a&gt; -- Clarify multiple return values with named tuples&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=1993s"&gt;33:13&lt;/a&gt; -- Unpacking sequences&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=2041s"&gt;34:01&lt;/a&gt; -- Updating multiple state variables&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=2175s"&gt;36:15&lt;/a&gt; -- Simultaneous state updates&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=2304s"&gt;38:24&lt;/a&gt; -- Concatenating strings&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=2321s"&gt;38:41&lt;/a&gt; -- Updating sequences&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=2397s"&gt;39:57&lt;/a&gt; -- Using decorators to factor-out administrative logic&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=2424s"&gt;40:24&lt;/a&gt; -- Caching decorator&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=2479s"&gt;41:19&lt;/a&gt; -- Factor-out temporary contexts for decimal&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=2521s"&gt;42:01&lt;/a&gt; -- How to open and close files&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=2545s"&gt;42:25&lt;/a&gt; -- How to use locks&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=2590s"&gt;43:10&lt;/a&gt; -- Factor-out temporary contexts&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=2696s"&gt;44:56&lt;/a&gt; -- Context manager: redirect_stdout()&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=2764s"&gt;46:04&lt;/a&gt; -- Concise expressive one-liners&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="talk"></category><category term="python3"></category><category term="pythonic"></category></entry></feed>