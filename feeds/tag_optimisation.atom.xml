<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="http://pyvideo.org/" rel="alternate"></link><link href="http://pyvideo.org/feeds/tag_optimisation.atom.xml" rel="self"></link><id>http://pyvideo.org/</id><updated>1990-01-01T00:00:00+00:00</updated><entry><title>PyConAU 2010: Making your Python code fast</title><link href="http://pyvideo.org/pycon-au-2010/pyconau-2010--making-your-python-code-fast.html" rel="alternate"></link><published>1990-01-01T00:00:00+00:00</published><updated>1990-01-01T00:00:00+00:00</updated><author><name>Andrew Bennetts</name></author><id>tag:pyvideo.org,1990-01-01:pycon-au-2010/pyconau-2010--making-your-python-code-fast.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Making your Python code fast&lt;/p&gt;
&lt;p&gt;Presented by Andrew Bennetts (Canonical)&lt;/p&gt;
&lt;p&gt;Before you can make your program faster you need to understand why it
slow. Andrew will show you some tools and techniques for investigating
and analysing your program's performance.&lt;/p&gt;
</summary><category term="optimisation"></category><category term="performance"></category><category term="pyconau"></category><category term="pyconau2010"></category></entry><entry><title>PyConAU 2010: Need for Speed</title><link href="http://pyvideo.org/pycon-au-2010/pyconau-2010--need-for-speed.html" rel="alternate"></link><published>1990-01-01T00:00:00+00:00</published><updated>1990-01-01T00:00:00+00:00</updated><author><name>Dr. Graeme Cross</name></author><id>tag:pyvideo.org,1990-01-01:pycon-au-2010/pyconau-2010--need-for-speed.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Need for Speed&lt;/p&gt;
&lt;p&gt;Presented by Dr. Graeme Cross&lt;/p&gt;
&lt;p&gt;&amp;quot;Bottlenecks occur in surprising places, so don't try to second guess
and put in a speed hack until you have proven that's where the
bottleneck is.&amp;quot; (Rob Pike)&lt;/p&gt;
&lt;p&gt;Python is a great balance of productivity, expressiveness and
performance, but there are times when it would nice to have a Python
application run faster. This is particularly true for large scale data
processing, numerical work, controlling real world devices, and
animation.&lt;/p&gt;
&lt;p&gt;Using some real-world examples, this talk covers tools and techniques
that allow you to systematically understand where the bottlenecks are in
your code and then how to effectively optimise your code, without having
to resort to writing modules in C/C++.&lt;/p&gt;
</summary><category term="language"></category><category term="optimisation"></category><category term="profiling"></category><category term="pyconau"></category><category term="pyconau2010"></category></entry><entry><title>PyConAU 2010: What's eating my memory?</title><link href="http://pyvideo.org/pycon-au-2010/pyconau-2010--what--39-s-eating-my-memory.html" rel="alternate"></link><published>1990-01-01T00:00:00+00:00</published><updated>1990-01-01T00:00:00+00:00</updated><author><name>Andrew Bennetts</name></author><id>tag:pyvideo.org,1990-01-01:pycon-au-2010/pyconau-2010--what--39-s-eating-my-memory.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What's eating my memory?&lt;/p&gt;
&lt;p&gt;Presented by Andrew Bennetts (Canonical)&lt;/p&gt;
&lt;p&gt;Ever wondered why your Python process has consumed 2 gigabytes of memory
overnight? Ever torn out your hair trying to find out why? Andrew will
show you some tools and techniques that can help you investigate.&lt;/p&gt;
</summary><category term="memory"></category><category term="optimisation"></category><category term="performance"></category><category term="pyconau"></category><category term="pyconau2010"></category></entry></feed>