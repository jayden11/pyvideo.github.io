<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="http://pyvideo.org/" rel="alternate"></link><link href="http://pyvideo.org/feeds/tag_statistics.atom.xml" rel="self"></link><id>http://pyvideo.org/</id><updated>2016-10-07T00:00:00+00:00</updated><entry><title>Doing frequentist statistics with Scipy</title><link href="http://pyvideo.org/pydata-dc-2016/doing-frequentist-statistics-with-scipy.html" rel="alternate"></link><published>2016-10-07T00:00:00+00:00</published><updated>2016-10-07T00:00:00+00:00</updated><author><name>Gustavo Patino</name></author><id>tag:pyvideo.org,2016-10-07:pydata-dc-2016/doing-frequentist-statistics-with-scipy.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData DC 2016&lt;/p&gt;
&lt;p&gt;Github: &lt;a class="reference external" href="https://github.com/gapatino/Doing-frequentist-statistics-with-Scipy"&gt;https://github.com/gapatino/Doing-frequentist-statistics-with-Scipy&lt;/a&gt;
Slides: &lt;a class="reference external" href="http://www.slideshare.net/PyData/doing-frequentist-statistics-with-scipy"&gt;http://www.slideshare.net/PyData/doing-frequentist-statistics-with-scipy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Frequentist statistical tests are still very common, and in some fields they continue to represent the technical standard. In this session we will cover the execution and interpretation of the most common tests using the SciPy.stats package, and plotting the results with Matplotlib and Seaborn. The focus will be on traditional approaches to the tests, not on Bayesian and bootstrapping approaches&lt;/p&gt;
&lt;p&gt;The session will cover: - Normality testing - Student's t-test and ANOVA - Wilcoxon rank sum and Kruskal-Wallis - Correlation - Univariate linear and logistic regression - Chi-square - p-value interpretation - Effect size calculation&lt;/p&gt;
</summary><category term="scipy"></category><category term="statistics"></category></entry><entry><title>Bayesian Statistical Analysis using Python - Part 3</title><link href="http://pyvideo.org/scipy-2014/bayesian-statistical-analysis-using-python-part.html" rel="alternate"></link><published>2014-07-09T00:00:00+00:00</published><updated>2014-07-09T00:00:00+00:00</updated><author><name>Chris Fonnesbeck</name></author><id>tag:pyvideo.org,2014-07-09:scipy-2014/bayesian-statistical-analysis-using-python-part.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;This hands-on tutorial will introduce statistical analysis in Python
using Bayesian methods. Bayesian statistics offer a flexible &amp;amp; powerful
way of analyzing data, but are computationally-intensive, for which
Python is ideal. As a gentle introduction, we will solve simple problems
using NumPy and SciPy, before moving on to Markov chain Monte Carlo
methods to build more complex models using PyMC.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The aim of this course is to introduce new users to the Bayesian
approach of statistical modeling and analysis, so that they can use
Python packages such as NumPy, SciPy and
&lt;a class="reference external" href="https://github.com/pymc-devs/pymc"&gt;PyMC&lt;/a&gt; effectively to analyze
their own data. It is designed to get users quickly up and running with
Bayesian methods, incorporating just enough statistical background to
allow users to understand, in general terms, what they are implementing.
The tutorial will be example-driven, with illustrative case studies
using real data. Selected methods will include approximation methods,
importance sampling, Markov chain Monte Carlo (MCMC) methods such as
Metropolis-Hastings and Slice sampling. In addition to model fitting,
the tutorial will address important techniques for model checking, model
comparison, and steps for preparing data and processing model output.
Tutorial content will be derived from the instructor's book &lt;em&gt;Bayesian
Statistical Computing using Python&lt;/em&gt;, to be published by Springer in late
2014.&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="PyMC forest plot" src="http://d.pr/i/pqWT+" /&gt;
&lt;p class="caption"&gt;PyMC forest plot&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;img alt="DAG" src="http://d.pr/i/AHZV+" /&gt;
&lt;p class="caption"&gt;DAG&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;All course content will be available as a GitHub repository, including
IPython notebooks and example data.&lt;/p&gt;
&lt;div class="section" id="tutorial-outline"&gt;
&lt;h4&gt;Tutorial Outline&lt;/h4&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Overview of Bayesian statistics.&lt;/li&gt;
&lt;li&gt;Bayesian Inference with NumPy and SciPy&lt;/li&gt;
&lt;li&gt;Markov chain Monte Carlo (MCMC)&lt;/li&gt;
&lt;li&gt;The Essentials of PyMC&lt;/li&gt;
&lt;li&gt;Fitting Linear Regression Models&lt;/li&gt;
&lt;li&gt;Hierarchical Modeling&lt;/li&gt;
&lt;li&gt;Model Checking and Validation&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="installation-instructions"&gt;
&lt;h4&gt;Installation Instructions&lt;/h4&gt;
&lt;p&gt;The easiest way to install the Python packages required for this
tutorial is via
&lt;a class="reference external" href="https://store.continuum.io/cshop/anaconda/"&gt;Anaconda&lt;/a&gt;, a scientific
Python distribution offered by Continuum analytics. Several other
tutorials will be recommending a similar setup.&lt;/p&gt;
&lt;p&gt;One of the key features of Anaconda is a command line utility called
&lt;tt class="docutils literal"&gt;conda&lt;/tt&gt; that can be used to manage third party packages. We have built
a PyMC package for &lt;tt class="docutils literal"&gt;conda&lt;/tt&gt; that can be installed from your terminal
via the following command:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
conda install -c https://conda.binstar.org/pymc pymc
&lt;/pre&gt;
&lt;p&gt;This should install any prerequisite packages that are required to run
PyMC.&lt;/p&gt;
&lt;p&gt;One caveat is that conda does not yet have a build of PyMC for &lt;strong&gt;Python
3&lt;/strong&gt;. Therefore, you would have to build it yourself via pip:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
pip install git+git://github.com/pymc-devs/pymc.git&amp;#64;2.3
&lt;/pre&gt;
&lt;p&gt;For those of you on Mac OS X that are already using the
&lt;a class="reference external" href="http://brew.sh"&gt;Homebrew&lt;/a&gt; package manager, I have prepared a script
that will install the entire Python scientific stack, including PyMC
2.3. You can download the script
&lt;a class="reference external" href="https://gist.github.com/fonnesbeck/7de008b05e670d919b71"&gt;here&lt;/a&gt; and
run it via:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sh install_superpack_brew.sh
&lt;/pre&gt;
&lt;/div&gt;
</summary><category term="bayesian"></category><category term="statistics"></category></entry><entry><title>Bayesian Statistical Analysis using Python - Part 2</title><link href="http://pyvideo.org/scipy-2014/bayesian-statistical-analysis-using-python-part-0.html" rel="alternate"></link><published>2014-07-09T00:00:00+00:00</published><updated>2014-07-09T00:00:00+00:00</updated><author><name>Chris Fonnesbeck</name></author><id>tag:pyvideo.org,2014-07-09:scipy-2014/bayesian-statistical-analysis-using-python-part-0.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;This hands-on tutorial will introduce statistical analysis in Python
using Bayesian methods. Bayesian statistics offer a flexible &amp;amp; powerful
way of analyzing data, but are computationally-intensive, for which
Python is ideal. As a gentle introduction, we will solve simple problems
using NumPy and SciPy, before moving on to Markov chain Monte Carlo
methods to build more complex models using PyMC.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The aim of this course is to introduce new users to the Bayesian
approach of statistical modeling and analysis, so that they can use
Python packages such as NumPy, SciPy and
&lt;a class="reference external" href="https://github.com/pymc-devs/pymc"&gt;PyMC&lt;/a&gt; effectively to analyze
their own data. It is designed to get users quickly up and running with
Bayesian methods, incorporating just enough statistical background to
allow users to understand, in general terms, what they are implementing.
The tutorial will be example-driven, with illustrative case studies
using real data. Selected methods will include approximation methods,
importance sampling, Markov chain Monte Carlo (MCMC) methods such as
Metropolis-Hastings and Slice sampling. In addition to model fitting,
the tutorial will address important techniques for model checking, model
comparison, and steps for preparing data and processing model output.
Tutorial content will be derived from the instructor's book &lt;em&gt;Bayesian
Statistical Computing using Python&lt;/em&gt;, to be published by Springer in late
2014.&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="PyMC forest plot" src="http://d.pr/i/pqWT+" /&gt;
&lt;p class="caption"&gt;PyMC forest plot&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;img alt="DAG" src="http://d.pr/i/AHZV+" /&gt;
&lt;p class="caption"&gt;DAG&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;All course content will be available as a GitHub repository, including
IPython notebooks and example data.&lt;/p&gt;
&lt;div class="section" id="tutorial-outline"&gt;
&lt;h4&gt;Tutorial Outline&lt;/h4&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Overview of Bayesian statistics.&lt;/li&gt;
&lt;li&gt;Bayesian Inference with NumPy and SciPy&lt;/li&gt;
&lt;li&gt;Markov chain Monte Carlo (MCMC)&lt;/li&gt;
&lt;li&gt;The Essentials of PyMC&lt;/li&gt;
&lt;li&gt;Fitting Linear Regression Models&lt;/li&gt;
&lt;li&gt;Hierarchical Modeling&lt;/li&gt;
&lt;li&gt;Model Checking and Validation&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="installation-instructions"&gt;
&lt;h4&gt;Installation Instructions&lt;/h4&gt;
&lt;p&gt;The easiest way to install the Python packages required for this
tutorial is via
&lt;a class="reference external" href="https://store.continuum.io/cshop/anaconda/"&gt;Anaconda&lt;/a&gt;, a scientific
Python distribution offered by Continuum analytics. Several other
tutorials will be recommending a similar setup.&lt;/p&gt;
&lt;p&gt;One of the key features of Anaconda is a command line utility called
&lt;tt class="docutils literal"&gt;conda&lt;/tt&gt; that can be used to manage third party packages. We have built
a PyMC package for &lt;tt class="docutils literal"&gt;conda&lt;/tt&gt; that can be installed from your terminal
via the following command:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
conda install -c https://conda.binstar.org/pymc pymc
&lt;/pre&gt;
&lt;p&gt;This should install any prerequisite packages that are required to run
PyMC.&lt;/p&gt;
&lt;p&gt;One caveat is that conda does not yet have a build of PyMC for &lt;strong&gt;Python
3&lt;/strong&gt;. Therefore, you would have to build it yourself via pip:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
pip install git+git://github.com/pymc-devs/pymc.git&amp;#64;2.3
&lt;/pre&gt;
&lt;p&gt;For those of you on Mac OS X that are already using the
&lt;a class="reference external" href="http://brew.sh"&gt;Homebrew&lt;/a&gt; package manager, I have prepared a script
that will install the entire Python scientific stack, including PyMC
2.3. You can download the script
&lt;a class="reference external" href="https://gist.github.com/fonnesbeck/7de008b05e670d919b71"&gt;here&lt;/a&gt; and
run it via:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sh install_superpack_brew.sh
&lt;/pre&gt;
&lt;/div&gt;
</summary><category term="bayesian"></category><category term="statistics"></category></entry><entry><title>Bayesian Statistical Analysis using Python - Part 1</title><link href="http://pyvideo.org/scipy-2014/bayesian-statistical-analysis-using-python-part-1.html" rel="alternate"></link><published>2014-07-09T00:00:00+00:00</published><updated>2014-07-09T00:00:00+00:00</updated><author><name>Chris Fonnesbeck</name></author><id>tag:pyvideo.org,2014-07-09:scipy-2014/bayesian-statistical-analysis-using-python-part-1.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;This hands-on tutorial will introduce statistical analysis in Python
using Bayesian methods. Bayesian statistics offer a flexible &amp;amp; powerful
way of analyzing data, but are computationally-intensive, for which
Python is ideal. As a gentle introduction, we will solve simple problems
using NumPy and SciPy, before moving on to Markov chain Monte Carlo
methods to build more complex models using PyMC.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The aim of this course is to introduce new users to the Bayesian
approach of statistical modeling and analysis, so that they can use
Python packages such as NumPy, SciPy and
&lt;a class="reference external" href="https://github.com/pymc-devs/pymc"&gt;PyMC&lt;/a&gt; effectively to analyze
their own data. It is designed to get users quickly up and running with
Bayesian methods, incorporating just enough statistical background to
allow users to understand, in general terms, what they are implementing.
The tutorial will be example-driven, with illustrative case studies
using real data. Selected methods will include approximation methods,
importance sampling, Markov chain Monte Carlo (MCMC) methods such as
Metropolis-Hastings and Slice sampling. In addition to model fitting,
the tutorial will address important techniques for model checking, model
comparison, and steps for preparing data and processing model output.
Tutorial content will be derived from the instructor's book &lt;em&gt;Bayesian
Statistical Computing using Python&lt;/em&gt;, to be published by Springer in late
2014.&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="PyMC forest plot" src="http://d.pr/i/pqWT+" /&gt;
&lt;p class="caption"&gt;PyMC forest plot&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;img alt="DAG" src="http://d.pr/i/AHZV+" /&gt;
&lt;p class="caption"&gt;DAG&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;All course content will be available as a GitHub repository, including
IPython notebooks and example data.&lt;/p&gt;
&lt;div class="section" id="tutorial-outline"&gt;
&lt;h4&gt;Tutorial Outline&lt;/h4&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Overview of Bayesian statistics.&lt;/li&gt;
&lt;li&gt;Bayesian Inference with NumPy and SciPy&lt;/li&gt;
&lt;li&gt;Markov chain Monte Carlo (MCMC)&lt;/li&gt;
&lt;li&gt;The Essentials of PyMC&lt;/li&gt;
&lt;li&gt;Fitting Linear Regression Models&lt;/li&gt;
&lt;li&gt;Hierarchical Modeling&lt;/li&gt;
&lt;li&gt;Model Checking and Validation&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="installation-instructions"&gt;
&lt;h4&gt;Installation Instructions&lt;/h4&gt;
&lt;p&gt;The easiest way to install the Python packages required for this
tutorial is via
&lt;a class="reference external" href="https://store.continuum.io/cshop/anaconda/"&gt;Anaconda&lt;/a&gt;, a scientific
Python distribution offered by Continuum analytics. Several other
tutorials will be recommending a similar setup.&lt;/p&gt;
&lt;p&gt;One of the key features of Anaconda is a command line utility called
&lt;tt class="docutils literal"&gt;conda&lt;/tt&gt; that can be used to manage third party packages. We have built
a PyMC package for &lt;tt class="docutils literal"&gt;conda&lt;/tt&gt; that can be installed from your terminal
via the following command:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
conda install -c https://conda.binstar.org/pymc pymc
&lt;/pre&gt;
&lt;p&gt;This should install any prerequisite packages that are required to run
PyMC.&lt;/p&gt;
&lt;p&gt;One caveat is that conda does not yet have a build of PyMC for &lt;strong&gt;Python
3&lt;/strong&gt;. Therefore, you would have to build it yourself via pip:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
pip install git+git://github.com/pymc-devs/pymc.git&amp;#64;2.3
&lt;/pre&gt;
&lt;p&gt;For those of you on Mac OS X that are already using the
&lt;a class="reference external" href="http://brew.sh"&gt;Homebrew&lt;/a&gt; package manager, I have prepared a script
that will install the entire Python scientific stack, including PyMC
2.3. You can download the script
&lt;a class="reference external" href="https://gist.github.com/fonnesbeck/7de008b05e670d919b71"&gt;here&lt;/a&gt; and
run it via:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sh install_superpack_brew.sh
&lt;/pre&gt;
&lt;/div&gt;
</summary><category term="bayesian"></category><category term="statistics"></category></entry><entry><title>Frequentism and Bayesianism: What's the Big Deal?</title><link href="http://pyvideo.org/scipy-2014/frequentism-and-bayesianism-whats-the-big-deal.html" rel="alternate"></link><published>2014-07-09T00:00:00+00:00</published><updated>2014-07-09T00:00:00+00:00</updated><author><name>Jake VanderPlas</name></author><id>tag:pyvideo.org,2014-07-09:scipy-2014/frequentism-and-bayesianism-whats-the-big-deal.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Statistical analysis comes in two main flavors: frequentist and
Bayesian. The subtle differences between the two can lead to widely
divergent approaches to common data analysis tasks. After a brief
discussion of the philosophical distinctions between the views, I’ll
utilize well-known Python libraries to demonstrate how this philosophy
affects practical approaches to several common analysis tasks.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In scientific data mining and machine learning, a fundamental division
is that of the frequentist and Bayesian approaches to statistics. Often
the fodder for impassioned debate among statisticians and other
practitioners, the subtle philosophical differences between the two
camps can lead to surprisingly different practical approaches to the
analysis of scientific data.&lt;/p&gt;
&lt;p&gt;In this talk I will delve into both the philosophical and practical
aspects of Bayesian and frequentist approaches, drawing from a &lt;a class="reference external" href="http://jakevdp.github.io/blog/2014/03/11/frequentism-and-bayesianism-a-practical-intro/"&gt;series
of
posts&lt;/a&gt;
from my blog.&lt;/p&gt;
&lt;p&gt;I'll start by addressing the philosophical differences between
frequentism and Bayesianism, which boil down to different definitions of
probability. I'll next move briefly into the mathematical details behind
the two approaches, at a level which will be informative to a general
scientific audience. I'll then show some examples of the two approaches
applied to some increasingly more complicated problems using standard
Python packages, namely: &lt;a class="reference external" href="http://numpy.org"&gt;NumPy&lt;/a&gt;,
&lt;a class="reference external" href="http://scipy.org"&gt;SciPy&lt;/a&gt;, &lt;a class="reference external" href="http://matplotlib.org"&gt;Matplotlib&lt;/a&gt;,
and &lt;a class="reference external" href="http://dan.iel.fm/emcee/"&gt;emcee&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With this combination of philosophy and practical examples, the audience
should walk away with a much better understanding of the differences
between frequentist and Bayesian approaches to statistical analysis, and
especially how the philosophy of each approach affects the practical
aspects of computation in data-intensive scientific research.&lt;/p&gt;
</summary><category term="statistics"></category></entry></feed>