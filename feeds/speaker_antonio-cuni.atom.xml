<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="http://pyvideo.org/" rel="alternate"></link><link href="http://pyvideo.org/feeds/speaker_antonio-cuni.atom.xml" rel="self"></link><id>http://pyvideo.org/</id><updated>2015-08-07T00:00:00+00:00</updated><entry><title>PyPy status (a.k.a.: no, PyPy è ancora vivo)</title><link href="http://pyvideo.org/pycon-italia-2014/pypy-status-aka-no-pypy-e-ancora-vivo.html" rel="alternate"></link><published>2014-05-24T00:00:00+00:00</published><updated>2014-05-24T00:00:00+00:00</updated><author><name>Antonio Cuni</name></author><id>tag:pyvideo.org,2014-05-24:pycon-italia-2014/pypy-status-aka-no-pypy-e-ancora-vivo.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In questo talk presenterò le ultime novità di PyPy, con un particolare focus su quello che è accaduto negli ultimi anni. In particolare parlerò della velocità di PyPy e di quali sono le linee di sviluppo attuali, come ad esempio:&lt;/p&gt;
&lt;p&gt;lo status del JIT compiler e delle prestazioni di PyPy in generale;&lt;/p&gt;
&lt;p&gt;i miglioramenti del Garbage Collector (GC);&lt;/p&gt;
&lt;p&gt;lo status dei sottoprogetti per implementare NumPy e la compatibilità con Python 3;&lt;/p&gt;
&lt;p&gt;CFFI, che vuole essere una libreria generica per interfacciarsi con il C sia per PyPy che per CPython&lt;/p&gt;
&lt;p&gt;uno sguardo veloce al sottoprogetto STM (Software Transactional Memory), che ha mira a risolvere l'annoso problema del GIL&lt;/p&gt;
</summary></entry><entry><title>Python and PyPy performance (not) for dummies</title><link href="http://pyvideo.org/europython-2015/python-and-pypy-performance-not-for-dummies.html" rel="alternate"></link><published>2015-08-07T00:00:00+00:00</published><updated>2015-08-07T00:00:00+00:00</updated><author><name>Antonio Cuni</name></author><id>tag:pyvideo.org,2015-08-07:europython-2015/python-and-pypy-performance-not-for-dummies.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Antonio Cuni - Python and PyPy performance (not) for dummies
[EuroPython 2015]
[21 July 2015]
[Bilbao, Euskadi, Spain]&lt;/p&gt;
&lt;p&gt;In this talk we would like to have a short introduction on how Python
programs are compiled and executed, with a special attention towards
just in time compilation done by PyPy. PyPy is the most advanced Python
interpreter around and while it should generally just speed up your programs
there is a wide range of performance that you can get out of PyPy, ranging from
slightly faster than CPython to C speeds, depending on how you write your
programs.&lt;/p&gt;
&lt;p&gt;We will split the talk in two parts. In the first part we will explain
how things work and what can and what cannot be optimized as well as describe
the basic heuristics of JIT compiler and optimizer. In the next part we will
do a survey of existing tools for looking at performance of Python programs
with specific focus on PyPy.&lt;/p&gt;
&lt;p&gt;As a result of this talk, an audience member should be better equipped with
tools how to write new software and improve existing software with performance
in mind.&lt;/p&gt;
&lt;p&gt;The talk will be given by Antonio Cuni and Maciej Fijalkowski,
both long time PyPy core developers and expert in the area of
Python performance.&lt;/p&gt;
</summary></entry><entry><title>PyPy hands-on</title><link href="http://pyvideo.org/europython-2011/pypy-hands-on.html" rel="alternate"></link><published>2011-07-21T00:00:00+00:00</published><updated>2011-07-21T00:00:00+00:00</updated><author><name>Antonio Cuni</name></author><id>tag:pyvideo.org,2011-07-21:europython-2011/pypy-hands-on.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Antonio Cuni,Armin Rigo - 21 June 2011 in &amp;quot;Training
Pizza Margherita&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The session is divided into two parts, of roughly 2 hours each. People
who are interested only in the first part, can leave the session after
it. However, the first part is a prerequisite for the second one, thus
people are not advised to join in the middle of the session.&lt;/p&gt;
&lt;p&gt;The session is meant to be highly interactive. People are invited to
bring their own laptop and try things by themselves.&lt;/p&gt;
&lt;div class="section" id="part-1-run-your-application-under-pypy"&gt;
&lt;h4&gt;Part 1: Run your application under PyPy&lt;/h4&gt;
&lt;p&gt;This tutorial is targeted to Python users who want to run their favorite
Python application under PyPy, and exploit the most of it. The following
topics will be covered:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
- how to fix/avoid CPython implementation details (e.g., refcounting)

- general overview of how the PyPy JIT works

- how to optimize your program for the PyPy JIT

- how to view and interpret the traces produced by the JIT

- how to tweak the parameters of the JIT and the GC

- how to use existing CPython C extensions on PyPy, and fix them if necessary
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="part-2-write-your-own-interpreter-with-pypy"&gt;
&lt;h4&gt;Part 2: Write your own interpreter with PyPy&lt;/h4&gt;
&lt;p&gt;PyPy is not only a Python interpreter, but also a toolchain to implement
dynamic languages. This tutorial is targeted to people who want to
implement their own programming languages, or who simply want to know
more about how the PyPy JIT works internally.&lt;/p&gt;
&lt;p&gt;The students will be given the source code for a toy language
implemented in RPython. They will learn:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
- how to translate it to C using the PyPy translation toolchain

- what are the &amp;quot;hints&amp;quot; needed by the JIT generator, and how to place them
&lt;/pre&gt;
&lt;p&gt;Then, they will be challenged to add the proper hints to the toy
interpreter, to get the best result with the JIT.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;THINGS TO DO BEFORE THE TRAINING&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You are encouraged to bring your laptop to the training session.&lt;/p&gt;
&lt;p&gt;Make sure that the following prerequisites are met:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Install PyPy 1.5:&lt;ul&gt;
&lt;li&gt;&lt;a class="reference external" href="http://pypy.org/download.html"&gt;http://pypy.org/download.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://doc.pypy.org/en/latest/getting-started.html#installing-pypy"&gt;http://doc.pypy.org/en/latest/getting-started.html#installing-pypy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Make sure that &lt;tt class="docutils literal"&gt;setuptools&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;distribute&lt;/tt&gt; are installed (look
at the URL above for instructions)&lt;/li&gt;
&lt;li&gt;Clone the pypy repository, and update to the 1.5 version:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$ hg clone &lt;a class="reference external" href="http://bitbucket.org/pypy/pypy"&gt;http://bitbucket.org/pypy/pypy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;$ cd pypy&lt;/p&gt;
&lt;p&gt;$ hg up -r release-1.5&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Clone the jitviewer repository and install it on pypy:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$ hg clone &lt;a class="reference external" href="http://bitbucket.org/pypy/jitviewer"&gt;http://bitbucket.org/pypy/jitviewer&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;$ cd jitviewer&lt;/p&gt;
&lt;p&gt;$ /path/to/pypy-1.5/bin/pypy setup.py develop&lt;/p&gt;
&lt;p&gt;If you intend to follow also the second part (&amp;quot;Write your own
interpreter with PyPy&amp;quot;), you need to make sure you have a working
&lt;a class="reference external" href="http://doc.pypy.org/en/latest/getting-started-python.html%20#translating-the-pypy-python-interpreter"&gt;developing
environment&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</summary><category term="cd"></category><category term="cpython"></category><category term="extensions"></category><category term="hg"></category><category term="jit"></category><category term="optimize"></category><category term="pypy"></category><category term="setup.py"></category><category term="tutorial"></category></entry><entry><title>PyPy in production</title><link href="http://pyvideo.org/europython-2011/pypy-in-production.html" rel="alternate"></link><published>2011-07-13T00:00:00+00:00</published><updated>2011-07-13T00:00:00+00:00</updated><author><name>Antonio Cuni</name></author><id>tag:pyvideo.org,2011-07-13:europython-2011/pypy-in-production.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Antonio Cuni,Armin Rigo - 23 June 2011 in &amp;quot;Track
Lasagne&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The PyPy project has recently gathered a lot of attention for its
progress in speeding up the Python language - it is the fastest Python
interpreter, and the most compatible and most stable 'alternative´ one.
No longer merely a research project, PyPy is now suitable for production
use. We are working on improvements on calling into C libraries and
generally integrating with the existing Python extensions ecosystem.&lt;/p&gt;
&lt;p&gt;We will give an overview on how the tracing Just-in-Time compiler works
in PyPy. From there, we will then focus on what the PyPy project has
achieved, particularly in the past two years:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;most Python benchmarks run much faster than with CPython or Psyco&lt;/li&gt;
&lt;li&gt;the real-world PyPy compiler toolchain itself (200 KLocs) runs twice
as fast&lt;/li&gt;
&lt;li&gt;already supports 32 and 64bit x86 and is in the process of supporting
ARM&lt;/li&gt;
&lt;li&gt;full compatibility with CPython (more than Jython/IronPython)&lt;/li&gt;
&lt;li&gt;full (and JIT-ed) ctypes support to call C libraries from Python&lt;/li&gt;
&lt;li&gt;supports Stackless Python (in-progress)&lt;/li&gt;
&lt;li&gt;new &amp;quot;cpyext&amp;quot; layer which integrates existing CPython C extensions&lt;/li&gt;
&lt;li&gt;an experimental super-fast JIT-compilation of calls to C++ libraries&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We want to reserve time for discussing potential future work like SWIG
and/or Cython compatibility and other areas brought up by the audience.
There are many interesting details that can be explored further; we will
focus on the points the audience is most interested in.&lt;/p&gt;
&lt;p&gt;For more info:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://pypy.org/"&gt;http://pypy.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Our blog: &lt;a class="reference external" href="http://morepypy.blogspot.com/"&gt;http://morepypy.blogspot.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Eureka program: &lt;a class="reference external" href="http://www.eurostars-eureka.eu/"&gt;http://www.eurostars-eureka.eu/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Eurostars Eureka is our funding source since 2009. It is a
cross-European funding collaboration that targets small firms which
produce research.&lt;/em&gt;&lt;/p&gt;
</summary><category term="cpython"></category><category term="ctypes"></category><category term="cython"></category><category term="extensions"></category><category term="pypy"></category><category term="stackless"></category></entry><entry><title>Python white magic</title><link href="http://pyvideo.org/europython-2012/python-white-magic.html" rel="alternate"></link><published>2012-07-04T00:00:00+00:00</published><updated>2012-07-04T00:00:00+00:00</updated><author><name>Antonio Cuni</name></author><id>tag:pyvideo.org,2012-07-04:europython-2012/python-white-magic.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] Antonio Cuni - 3 JULY 2012 in &amp;quot;Track Spaghetti&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python is a powerful language. Beginners appreciate its surface of
simplicity and ease to use, where (almost) everything “just works” (TM)
as expected. However, under the hood, there is a whole world of rules
and layers which can be (ab)used by experienced programmers to tweak the
language in unexpected ways. Often, these techniques are labeled as
“hacks” or “black magic”, to indicate that they should not used in
production or that you should not look at it unless you are “initiated”
to some not better specified sorcery. However, if used with care and in
the right places, these techniques can lead to better, faster and/or
more readable code, or can be extremely useful during debugging, and
thus deserve the definition of “white magic” which programmers can use
to improve their code. Moreover, looking at how they are implemented is
a good way to learn about some of the deep corners of the language. This
talk presents some of these advanced techniques which I have seen in use
in real code, e.g. in PyPy or pdb++. Including, but not limited to:
creating new functions by reusing existing code objects, instantiating
multiple copies of the same module, playing with metaclasses in various
ways, changing the &lt;strong&gt;class&lt;/strong&gt; of an object on the fly to get specialized
behavior, automatically entering the debugger when a certain event
occur, etc.&lt;/p&gt;
</summary></entry><entry><title>Understanding PyPy</title><link href="http://pyvideo.org/pycon-italia-2015/understanding-pypy.html" rel="alternate"></link><published>2015-06-09T00:00:00+00:00</published><updated>2015-06-09T00:00:00+00:00</updated><author><name>Antonio Cuni</name></author><id>tag:pyvideo.org,2015-06-09:pycon-italia-2015/understanding-pypy.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;PyPy is an alternative implementation of CPython implemented in Python.
Understanding concepts like RPython, JIT, PyPy garbage collection and
other core concepts can be difficult for newcomers to understand. This
talk is aimed to introduce all of these concepts to help better
understand how PyPy works.&lt;/p&gt;
</summary></entry></feed>