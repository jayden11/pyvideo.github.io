<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>http://pyvideo.org/</link><description></description><lastBuildDate>Fri, 05 Feb 2016 00:00:00 +0000</lastBuildDate><item><title>Dave Halter – API Design is Hard – SPS16</title><link>http://pyvideo.org/swiss-python-summit-2016/dave-halter-api-design-is-hard-sps16.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&amp;quot;Have you ever been really annoyed about some APIs of open source libraries? There's are good reasons to be. Most libraries are devoted to backwards compatibility and are not able to change content anymore.
Coming from writing a Python library called &amp;quot;Jedi&amp;quot;, I can feel with you. I have hated my own APIs more than enough. I have learned the hard way and want to tell you a few things I would have loved to hear years earlier!&amp;quot;&lt;/p&gt;
&lt;p&gt;Talk recorded at the Swiss Python Summit on February 5th, 2016.&lt;/p&gt;
&lt;p&gt;Licensed as Creative Commons Attribution 4.0 International.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dave Halter</dc:creator><pubDate>Fri, 05 Feb 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-02-05:swiss-python-summit-2016/dave-halter-api-design-is-hard-sps16.html</guid></item><item><title>Identifying Bugs Before Runtime With Jedi</title><link>http://pyvideo.org/europython-2014/identifying-bugs-before-runtime-with-jedi.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Finding bugs before runtime has been an incredibly tedious task in
Python. Jedi is an autocompletion library with interesting capabilities:
It understands a lot of the dynamic features of Python. I will show you
how we can use the force of (the) Jedi to identify bugs in your Python
code. It's not just another pylint. It's way better.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Jedi is an autocompletion library for Python that has gained quite a
following over the last year. There are a couple of plugins for the most
popular editors (VIM, Sublime, Emacs, etc.) and mainstream IDEs like
Spyder are switching to Jedi.&lt;/p&gt;
&lt;p&gt;Jedi basically tries to redefine the boundaries of autocompletion in
dynamic languages. Most people still think that there's no hope for
decent autocompletion in Python. This talk will try to argue the
opposite, that decent autocompletion is very close.&lt;/p&gt;
&lt;p&gt;While the first part will be about Jedi, the second part of this talk
will discuss the future of dynamic analysis. Dynamic Analysis is what I
call the parts that static analysis doesn't cover. The hope is to
generate a kind of &amp;quot;compiler&amp;quot; that doesn't execute code but reports
additional bugs in your code (AttributeErrors and the like).&lt;/p&gt;
&lt;p&gt;I still have to work out the details of the presentation. I also have to
add that Jedi I'm currently working full-time on Jedi and that there's
going to be some major improvements until the conference. Autocompletion
and static/dynamic analysis as well as refactoring are hugely important
tools for a dynamic language IMHO, because they can improve the only big
disadvantage compared to static languages: Finding bugs before running
your tool.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dave Halter</dc:creator><pubDate>Wed, 23 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-23:europython-2014/identifying-bugs-before-runtime-with-jedi.html</guid></item></channel></rss>