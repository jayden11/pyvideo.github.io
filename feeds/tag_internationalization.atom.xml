<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="http://pyvideo.org/" rel="alternate"></link><link href="http://pyvideo.org/feeds/tag_internationalization.atom.xml" rel="self"></link><id>http://pyvideo.org/</id><updated>2012-09-04T00:00:00+00:00</updated><entry><title>A Gringo's Guide to Internationalization</title><link href="http://pyvideo.org/djangocon-2012/a-gringos-guide-to-internationalization.html" rel="alternate"></link><published>2012-09-04T00:00:00+00:00</published><updated>2012-09-04T00:00:00+00:00</updated><author><name>Jacob Burch</name></author><id>tag:pyvideo.org,2012-09-04:djangocon-2012/a-gringos-guide-to-internationalization.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Coming from a speaker who escaped a notion to &amp;quot;why would we need to
translate?&amp;quot; this talk aims to show what actually goes into translating a
website or app using Django's Internationalization tools. Covered will
be an overview of batteries included, best practices and anti-patterns
in using them, and some third party tools to help make your life
escaping the myth of a Lingua Franca easier.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;There's often a bubble in the English-speaking programming world that
the entire internet runs on English. Our Top-level domains are shortened
english words. Our programming languages--Python in particular--try to
emulate English words and grammar.&lt;/p&gt;
&lt;p&gt;Firmly in place in this world for many years, my first attempt to
translate a pre-existing site came with a high sticker shock of nuanced
difficulty. This talk covers all the lessons I learned in taking a
fully-fleshed web app with no translation (and a programmer with no
translation experience) to being completely translated.&lt;/p&gt;
&lt;div class="section" id="talk-overview"&gt;
&lt;h4&gt;Talk Overview&lt;/h4&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Introduction to Translation&lt;ol class="arabic"&gt;
&lt;li&gt;Overview of gettext&lt;/li&gt;
&lt;li&gt;Brief history of a translation&lt;/li&gt;
&lt;li&gt;Add gettext calls&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;django-admin.py&lt;/span&gt; makemessages&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;Ship po file to translation service&lt;/li&gt;
&lt;li&gt;Receive file back&lt;/li&gt;
&lt;li&gt;Compile&lt;/li&gt;
&lt;li&gt;Fin&lt;/li&gt;
&lt;li&gt;gettext vs gettext_lazy&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Batteries Included&lt;ol class="arabic"&gt;
&lt;li&gt;gettext Python calls&lt;/li&gt;
&lt;li&gt;Middleware&lt;/li&gt;
&lt;li&gt;template tags&lt;/li&gt;
&lt;li&gt;trans vs. blocktrans&lt;/li&gt;
&lt;li&gt;Anti-patterns of the battery included use.&lt;/li&gt;
&lt;li&gt;Heavy whitespace in blocktrans&lt;/li&gt;
&lt;li&gt;Monster-sized translations&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;The best laid plans of mice and men...&lt;ol class="arabic"&gt;
&lt;li&gt;Problems that get in the way of A history of a translation.&lt;/li&gt;
&lt;li&gt;Realize half the site is still untranslated&lt;/li&gt;
&lt;li&gt;Edit out the translations you already had translated to avoid
re-curring costs&lt;/li&gt;
&lt;li&gt;Have the product adjust so two words change&lt;/li&gt;
&lt;li&gt;Realize common text that's in the database&lt;/li&gt;
&lt;li&gt;Fin?&lt;/li&gt;
&lt;li&gt;Patterns and tools to help&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;poxx.py&lt;/tt&gt; and the idea of a 'canonical' po file.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;dbgettext&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;Wholly-translated template files (translate_include,
trans_render)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Advanced Translation Technique&lt;ol class="arabic"&gt;
&lt;li&gt;While undocumented, translation backend is pretty darn flexible
and the source code is a treasure trove to make 'impossible' use
cases not too bad.&lt;/li&gt;
&lt;li&gt;Overview of how the translation service works behind the scenes&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;_translation&lt;/tt&gt; thread local&lt;/li&gt;
&lt;li&gt;Merged translations (root-&amp;gt;app-&amp;gt;default)&lt;/li&gt;
&lt;li&gt;Sessions vs. Accept-Language&lt;/li&gt;
&lt;li&gt;Middleware and Context processors&lt;/li&gt;
&lt;li&gt;Example of advanced translation code: Multi-tenancy translation.&lt;/li&gt;
&lt;li&gt;Translating some sites, not translating others&lt;/li&gt;
&lt;li&gt;Translating Site A one way, Site B another&lt;/li&gt;
&lt;li&gt;Using an English translation for duct-tape and profit.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Why Django's i18n sucks.&lt;ol class="arabic"&gt;
&lt;li&gt;In the vein of the &amp;quot;Django Sucks&amp;quot; Key note. It doesn't really, but
it could use some changes--from minor to major.&lt;/li&gt;
&lt;li&gt;Why .po Files are archaic and limited.&lt;/li&gt;
&lt;li&gt;What we can do to improve for 1.5 and beyond.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</summary><category term="django"></category><category term="internationalization"></category></entry><entry><title>JSON data + RML template = PDF report</title><link href="http://pyvideo.org/europython-2011/json-data-rml-template-pdf-report.html" rel="alternate"></link><published>2011-07-24T00:00:00+00:00</published><updated>2011-07-24T00:00:00+00:00</updated><author><name>Stefano Cotta Ramusino</name></author><id>tag:pyvideo.org,2011-07-24:europython-2011/json-data-rml-template-pdf-report.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Stefano Cotta Ramusino - 23 June 2011 in &amp;quot;Track
Ravioli&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The main problem with reports generated in Python is how to separate the
content from the style using ReportLab library, because all informations
should be saved in a single source file that, by example, is impossible
to understand for your graphic designer.&lt;/p&gt;
&lt;p&gt;So the solution: just modularizes all components you need and identify
simple container formats for your data input (JSON) and document
template (ReportLab RML).&lt;/p&gt;
&lt;p&gt;Now with the power of Genshi and XInclude we will create dynamic
templates that include specific snippets (e.g., to generate on the fly a
decent graph with matplotlib or cairoplot to fill some lacks of
ReportLab) and we will detach the stylesheet from the template
structure.&lt;/p&gt;
&lt;p&gt;And at the end you can also have the internationalization service in the
PDF report generation!&lt;/p&gt;
</summary><category term="internationalization"></category><category term="json"></category><category term="matplotlib"></category></entry><entry><title>Internationalizing your Django project (#74)</title><link href="http://pyvideo.org/pycon-us-2010/pycon-2010--internationalizing-your-django-projec.html" rel="alternate"></link><published>2010-02-19T00:00:00+00:00</published><updated>2010-02-19T00:00:00+00:00</updated><author><name>Matt Croydon</name></author><id>tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--internationalizing-your-django-projec.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Internationalizing your Django project&lt;/p&gt;
&lt;p&gt;Presented by Matt Croydon (Mediaphormedia)&lt;/p&gt;
&lt;p&gt;Internationalizing your Django application isn't as hard as it sounds.
This session introduces the topic of internationalization and walks
through what it takes to use Django's internationalization tools,
including how to mark models, views, and templates for translation and
how to enable internationalization in your application. We will also
step through localizing your application in a new language.&lt;/p&gt;
</summary><category term="i18n"></category><category term="internationalization"></category><category term="pycon"></category><category term="pycon2010"></category></entry></feed>