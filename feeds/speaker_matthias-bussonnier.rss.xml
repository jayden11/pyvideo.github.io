<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>http://pyvideo.org/</link><description></description><lastBuildDate>Sat, 20 May 2017 00:00:00 +0000</lastBuildDate><item><title>Ending Py2Py3 compatibility in a user friendly manner PyCon 2017</title><link>http://pyvideo.org/pycon-us-2017/ending-py2py3-compatibility-in-a-user-friendly-manner-pycon-2017.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;quot;Four shalt thou not count, neither count thou two, excepting that
thou then proceed to three.&amp;quot;&lt;/p&gt;
&lt;blockquote&gt;
Monty Python and the Holy Grail; Scene 33&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;Python 3 has been around for more than eight years, and much of the
Python ecosystem is now available both on Python 2 and Python 3, often
using a single code base. Nonetheless, this compatibility comes at a
development cost and some library authors are considering ending support
for Python 2 . These once-python-2-compatible libraries are at risk of
being upgraded on non compatible system and cause user (and developer)
frustration.&lt;/p&gt;
&lt;p&gt;While it may seem simple to cease support for Python 2, the challenge is
not in ending support, but doing so in a way that does not wreak havoc
for users who stay on Python 2. And that is not only a communications
problem, but a technical one : up until recently, it was impossible to
tag a release as Python 3 only; today it is possible.&lt;/p&gt;
&lt;p&gt;Like any maintainer of a widely used library, we want to ensure that
users continue to use Python 2 continue to have functioning libraries,
even after development proceeds in a way that does not support Python 2.&lt;/p&gt;
&lt;p&gt;One approach is to ensure easy installation of older versions if
possible avoid incompatible versions altogether. Users should not need
to manually pin maximal version dependencies across their development
environments and projects if all they want is to use the latest versions
of libraries that are compatible with their system.&lt;/p&gt;
&lt;p&gt;Even if we did expect that of users, consider what would happen when a
package they rely on converts to be only Python 3 compatible. If they
were not tracking the complete dependency tree, they might discover, on
upgrade, that their projects no longer work. To avert this they would
need to pin those at the last version compatible with Python 2. Users
that want to use older python versions should not have to go through so
much anguish to do so.&lt;/p&gt;
&lt;p&gt;In order to solve this problem, and thereby make both users' and
maintainers' lives easier, we ventured into the rabbit-hole called
Packaging.&lt;/p&gt;
&lt;p&gt;Though we set off with a singular quest, our tale roves through many
lands. We'll narrate the story of our amending PEPs, our efforts in
building the ramparts of the pypa/Warehouse Castle, battles with the
dragons of Pip, and errands in the &amp;quot;land of no unit tests&amp;quot; otherwise
known as PyPI legacy.&lt;/p&gt;
&lt;p&gt;By the end of the above tale, the audience members will know the road to
Python 3 only libraries had once had hazards that are now easily
avoidable. So long as users upgrade their package management tools.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Matthias Bussonnier</dc:creator><pubDate>Sat, 20 May 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-05-20:pycon-us-2017/ending-py2py3-compatibility-in-a-user-friendly-manner-pycon-2017.html</guid></item><item><title>IPython and Jupyter in Depth: High productivity, interactive Python</title><link>http://pyvideo.org/pycon-us-2017/ipython-and-jupyter-in-depth-high-productivity-interactive-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="section" id="description"&gt;
&lt;h4&gt;Description&lt;/h4&gt;
&lt;p&gt;IPython and Jupyter provide tools for interactive computing that are
widely used in scientific computing, education, and data science, but
can benefit any Python developer.&lt;/p&gt;
&lt;p&gt;You will learn how to use IPython in different ways, as:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;an interactive shell,&lt;/li&gt;
&lt;li&gt;a graphical console,&lt;/li&gt;
&lt;li&gt;a network-aware VM (Virtual machine) in GUIs,&lt;/li&gt;
&lt;li&gt;a web-based notebook combining code, graphics and rich HTML.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We will demonstrate how to deploy a custom environment with Docker that
not only contains multiple Python kernels but also a couple of other
languages.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="objectives"&gt;
&lt;h4&gt;Objectives&lt;/h4&gt;
&lt;p&gt;At the end of this tutorial, attendees will have an understanding of the
overall design of Jupyter (and IPython) as a suite of applications they
can use and combine in multiple ways in the course of their development
work with Python and other programming languages. They will learn:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Tricks from the IPython machinery that are useful in everyday
development,&lt;/li&gt;
&lt;li&gt;What high-level applications in Jupyter, the web-based notebooks, can
do and how these applications can be used.&lt;/li&gt;
&lt;li&gt;How to use IPython and Jupyter together so that they can be best used
for the problem at hand.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="python-level"&gt;
&lt;h4&gt;Python Level&lt;/h4&gt;
&lt;p&gt;Intermediate&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="domain-level"&gt;
&lt;h4&gt;Domain Level&lt;/h4&gt;
&lt;p&gt;Introductory&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="detailed-abstract"&gt;
&lt;h4&gt;Detailed Abstract&lt;/h4&gt;
&lt;p&gt;IPython started in 2001 simply as a better interactive Python shell.
Over the last decade it has grown into a powerful set of interlocking
tools that maximize developer productivity in Python while working
interactively.&lt;/p&gt;
&lt;p&gt;Today, Jupyter consists of an IPython kernel that executes user code,
provides many features for introspection and namespace manipulation, and
tools to control this kernel either in-process or out-of-process thanks
to a well specified communications protocol implemented over ZeroMQ.
This architecture allows the core features to be accessed via a variety
of clients, each providing unique functionality tuned to a specific use
case:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;An interactive, terminal-based shell with capabilities beyond the
default Python interactive interpreter (this is the classic
application opened by the &lt;tt class="docutils literal"&gt;ipython&lt;/tt&gt; command that many users have
worked with)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;A &lt;a class="reference external" href="http://jupyter.org/"&gt;web-based notebook&lt;/a&gt; that can execute code
and also contain rich text and figures, mathematical equations and
arbitrary HTML. This notebook presents a document-like view with
cells where code is executed but that can be edited in-place,
reordered, mixed with explanatory text and figures, etc. The notebook
provides an interactive experience that combines live code and
results with literate documentation and the rich media that modern
browsers can display:&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="Notebook screenshot" src="http://jupyter.org/assets/jupyterpreview.png" /&gt;
&lt;p class="caption"&gt;Notebook screenshot&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The notebooks also allow for code in multiple languages allowing to mix
Python with Cython, C, R and other programming languages to access
features hard to obain from Python.&lt;/p&gt;
&lt;p&gt;These tools also increasingly work with languages other than Python, and
we renamed the language independent frontend components to &lt;em&gt;Jupyter&lt;/em&gt; in
order to make this clearer. The Python kernel we provide and the
original terminal-based shell will continue to be called &lt;em&gt;IPython&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;In this hands-on, in-depth tutorial, we will briefly describe IPython's
architecture and will then show how to use the above tools for a highly
productive workflow in Python.&lt;/p&gt;
&lt;p&gt;The materials for this tutorial are &lt;a class="reference external" href="https://github.com/ipython/ipython-in-depth"&gt;available on a github
repository&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Matthias Bussonnier</dc:creator><pubDate>Thu, 18 May 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-05-18:pycon-us-2017/ipython-and-jupyter-in-depth-high-productivity-interactive-python.html</guid></item><item><title>Project Jupyter</title><link>http://pyvideo.org/pybay-2016/project-jupyter.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;An overview of Project Jupyter.
​
Abstract
Jupyter is an open source, language agnostic, interactive computing platform used in scientific computing and data science that provides multiple tools tailored for different workflows, from traditional terminal-style control to the popular web-based Notebook. The Jupyter Notebook is a web application that allows users to create and share documents that contain live code, equations, visualizations and explanatory text. Jupyter is the evolution of the original ideas in the IPython interactive shell, as we generalized them into a language agnostic protocol that has now been implemented in over 50 separate languages.&lt;/p&gt;
&lt;p&gt;One project within the Jupyter ecosystem, JupyterHub, is a multi-user environment for Jupyter Notebooks that runs off a central server and that can be used to serve Notebooks to classes of students, corporate workgroups, or scientific research groups. JupyterHub is the backbone for UC Berkeley’s new Undergraduate Data Science Education Program, an ambitious program that aims to provide every freshman with core knowledge and skills in data science.&lt;/p&gt;
&lt;p&gt;In this talk we will discuss and demonstrate the many development activities underway at Project Jupyter, including IPython 5.0, JupyterHub, and JupyterLab, and how these tools are used in data science, industry, scientific research, and education.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bio:&lt;/strong&gt;
Jamie Whitacre is the technical project manager for Project Jupyter, an open-source scientific computing and data science ecosystem used extensively in academia and industry. Project Jupyter operates out of the Berkeley Institute for Data Science (BIDS) at UC Berkeley. Matthias Bussonnier is a postdoctoral researcher at BIDS and a core developer for Jupyter and IPython.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/pybay2016/jamie-whitacre-project-jupyter"&gt;https://speakerdeck.com/pybay2016/jamie-whitacre-project-jupyter&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jamie Whitacre</dc:creator><pubDate>Sat, 20 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-20:pybay-2016/project-jupyter.html</guid></item><item><title>Xonsh - put some Python in your Shell</title><link>http://pyvideo.org/pybay-2016/xonsh-put-some-python-in-your-shell.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Xonsh is a Python-ish, BASHwards-looking shell language and command prompt. The language is a superset of Python 3.4+ with additional support for the best parts of shells that you are used to, such as Bash, zsh, fish, and IPython. It works on all major systems including Linux, Mac OSX, and Windows. Xonsh is meant for the daily use of experts and novices alike.
​
Abstract
Programmers spend their time at a command line interface often sticking to default shell. A lot of progress have been made for the friendliness, usability, extensibility of shell. We thus introduce Xonsh which attempt to bring the command line shell to the 21st century.&lt;/p&gt;
&lt;p&gt;Xonsh is general purpose shell that combines Python and the best features of Bash, zsh, IPython and fish. Written in Python and relying only the standard library and PLY, the xonsh language is a strict superset of Python that compiles to a Python AST. The shell can provides exciting features: rich history, tab completion from bash and man pages, syntax highlighting, auto-suggestion, foreign-function aliases and more!&lt;/p&gt;
&lt;p&gt;Wether you are a novice who is looking to use use the command line, or an Python expert Xonsh is made for you.&lt;/p&gt;
&lt;p&gt;Because xonsh is Python, it automatically has all the available python ecosystem at your fingertip. Xonsh makes meshing and intertwining python code with command-line interfaces as seamless as possible. Have you ever wanted to use regular expressions to glob files? No problem! Ever wanted to curl a remote
resource right into &lt;cite&gt;json.loads()&lt;/cite&gt;? Now you can. Do you not want to leave the command line to use pandas, NLTK or add two numbers together? No big deal.&lt;/p&gt;
&lt;p&gt;The xonsh homepage is at &lt;a class="reference external" href="https://xon.sh"&gt;https://xon.sh&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bio:&lt;/strong&gt;
I am a PostDoc at UC Berkeley Institute for Data science, and have been a core Developer of IPython and Jupyter for a couple of years. With a background in Physics I spend most of my time developing tools for the scientific community and for education as well as promoting Python 3.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/pybay2016/matthias-bussonnier-xonsh-put-some-python-in-your-shell"&gt;https://speakerdeck.com/pybay2016/matthias-bussonnier-xonsh-put-some-python-in-your-shell&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Matthias Bussonnier</dc:creator><pubDate>Sat, 20 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-20:pybay-2016/xonsh-put-some-python-in-your-shell.html</guid></item><item><title>Jupyter : Ipython, State Of Multiuser And Real Time Collaboration</title><link>http://pyvideo.org/scipy-2015/jupyter-ipython-state-of-multiuser-and-real-time-collaboration.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Matthias Bussonnier</dc:creator><pubDate>Wed, 08 Jul 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-07-08:scipy-2015/jupyter-ipython-state-of-multiuser-and-real-time-collaboration.html</guid></item></channel></rss>