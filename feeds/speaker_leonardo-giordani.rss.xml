<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>http://pyvideo.org/</link><description></description><lastBuildDate>Wed, 22 Jun 2016 00:00:00 +0000</lastBuildDate><item><title>Django class-based views: survival guide for novices</title><link>http://pyvideo.org/djangocon-europe-2014/django-class-based-views-survival-guide-for-novices.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Are you a Django novice, confused by words like class-based views, URL
dispatchers, HTTP requests? Are you still wondering how to use all those
things to build the pages of your Web site?&lt;/p&gt;
&lt;p&gt;Django programmers that started with versions prior to 1.3 are used to
deal with views as functions, and they learned how to process even
complex forms in a procedural way. From the release 1.3, Django
introduced class-based views (CBVs) and ported its powerful generic
views to this new paradigm (class-based generic views, or CBGVs).&lt;/p&gt;
&lt;p&gt;This change, however, has not been harmless for Django novices: the
django- users mailing list and StackOverflow are full of questions about
views and classes.&lt;/p&gt;
&lt;p&gt;This talk aims to lead Django novices to a good understanding of what
class- based functions are and how they can be effectively used.&lt;/p&gt;
&lt;p&gt;The main topics are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Python classes: how OOP concepts improve the View part of Django MVT.
This part aims to introduce Python classes as data processors and
explains how OOP concepts like inheritance help the fast development
of customized solutions.&lt;/li&gt;
&lt;li&gt;URL dispatchers: how Django CBV process URL parameters. Here I
discuss how Django class-based views store arguments extracted from
URLs and how we can access them.&lt;/li&gt;
&lt;li&gt;HTTP verbs: how Django CBV deal with GET, POST and friends. This part
shows what happens to a class-based view when HTTP requests are
processed and how to leverage the mechanism to customize data
processing.&lt;/li&gt;
&lt;li&gt;CRUD operations through Django generic class-based views. Create,
Read, Update, Delete are the fundamentals operations you need on
data, so it is worth learning to use and customize the powerful
generic views of Django that implement them.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The target of this talk are Django novices who completed and understood
the Django tutorial. Previous knowledge of the basic Python OOP syntax
and concepts is preferred (classes, inheritance, method overriding,
function arguments processing).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Leonardo Giordani</dc:creator><pubDate>Tue, 13 May 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-05-13:djangocon-europe-2014/django-class-based-views-survival-guide-for-novices.html</guid></item><item><title>Abstract base classes uso intelligente delle metaclassi</title><link>http://pyvideo.org/pycon-italia-2016/abstract-base-classes-uso-intelligente-delle-metaclassi.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Leonardo Giordani</dc:creator><pubDate>Wed, 22 Jun 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-06-22:pycon-italia-2016/abstract-base-classes-uso-intelligente-delle-metaclassi.html</guid></item></channel></rss>