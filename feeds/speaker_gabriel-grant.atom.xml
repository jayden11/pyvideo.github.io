<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="http://pyvideo.org/" rel="alternate"></link><link href="http://pyvideo.org/feeds/speaker_gabriel-grant.atom.xml" rel="self"></link><id>http://pyvideo.org/</id><updated>2013-10-03T00:00:00+00:00</updated><entry><title>Building Rich Applications with Django and Ember.js</title><link href="http://pyvideo.org/djangocon-2013/building-rich-applications-with-django-and-ember.html" rel="alternate"></link><published>2013-10-03T00:00:00+00:00</published><updated>2013-10-03T00:00:00+00:00</updated><author><name>Gabriel Grant</name></author><id>tag:pyvideo.org,2013-10-03:djangocon-2013/building-rich-applications-with-django-and-ember.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Building Rich Applications with Django and Ember.js&lt;/p&gt;
&lt;p&gt;Wednesday 2 p.m.--2:45 p.m.&lt;/p&gt;
&lt;p&gt;Audience level: Intermediate&lt;/p&gt;
&lt;p&gt;Description&lt;/p&gt;
&lt;p&gt;Ember.js is the most advanced client-side JavaScript framework
available: it provides optimistic server updates, automatically-updating
templates and sensible defaults to dramatically increase developer
productivity. Abstract&lt;/p&gt;
&lt;p&gt;Learn how Django and Ember.js can compliment each other: how to
integrate them where their functionality overlaps and reconcile the
differences where their approaches contradict.&lt;/p&gt;
&lt;p&gt;Django helps quickly express a data model and handle HTTP requests, but
using it alone isn't conducive to building highly-dynamic interfaces.
Ember, on the other hand, is a client-side framework designed with
precisely these interfaces in mind, but doesn't tackle the server-side
at all.&lt;/p&gt;
&lt;p&gt;Both Django and Ember.js are large, ambitious and opinionated
frameworks. This is what gives them their power over their more
minimalist colleagues (Flask and Backbone.js, respectively) but because
their opinions sometimes differ, it can be difficult to make them play
together.&lt;/p&gt;
&lt;p&gt;In this talk, I'll briefly introduce Ember.js, compare and contrast how
Django and Ember.js handle the various layers of an application, and
show how to bridge between these two worlds.&lt;/p&gt;
&lt;p&gt;Topics covered: - Ember's interpretation of MVC in Django terms -
Overlap in functionality: which pieces of each framework to keep, modify
and throw away - Compiling Assets - Connecting Ember to Django with
Ember-data and Django REST framework&lt;/p&gt;
</summary></entry><entry><title>Take My Money: an Intro to Charging for Things with Django</title><link href="http://pyvideo.org/djangocon-2013/take-my-money-an-intro-to-charging-for-things-with.html" rel="alternate"></link><published>2013-10-03T00:00:00+00:00</published><updated>2013-10-03T00:00:00+00:00</updated><author><name>Gabriel Grant</name></author><id>tag:pyvideo.org,2013-10-03:djangocon-2013/take-my-money-an-intro-to-charging-for-things-with.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;TAKE MY MONEY: AN INTRO TO CHARGING FOR THINGS WITH DJANGO&lt;/p&gt;
&lt;p&gt;Thursday 2 p.m.--2:45 p.m.&lt;/p&gt;
&lt;p&gt;Audience level: Intermediate&lt;/p&gt;
&lt;p&gt;DESCRIPTION Charging for your application can often be almost as
difficult as creating the initial version of the application itself. In
this talk, we'll cover tools and techniques to avoid reinventing the
wheel and get you to your pay-day sooner, no matter what sort of payment
structure you wish to implement.&lt;/p&gt;
&lt;p&gt;ABSTRACT You're got your app ready to go -- your ticket to fame and
fortune. But wait, how are you going to collect that fortune from your
customers? We'll walk through the different payment models common on the
web, and how to charge for each one using Django.&lt;/p&gt;
</summary></entry><entry><title>Distributed, Real-time Web Apps with Stack.io</title><link href="http://pyvideo.org/pycon-ca-2012/distributed-real-time-web-apps-with-stackio.html" rel="alternate"></link><published>2012-11-11T00:00:00+00:00</published><updated>2012-11-11T00:00:00+00:00</updated><author><name>Gabriel Grant</name></author><id>tag:pyvideo.org,2012-11-11:pycon-ca-2012/distributed-real-time-web-apps-with-stackio.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Stack.io[1] is an open-source tool to quickly build real-time web apps.
By directly linking clients to back-end services via WebSockets,
Stack.io helps decompose complex code into a set of simple components in
Python or Node.js. It augments standard RPC with bi-directional
streaming, and provides a layer of auth and service discovery on top.&lt;/p&gt;
&lt;p&gt;[1]: &lt;a class="reference external" href="https://github.com/dotcloud/stack.io"&gt;https://github.com/dotcloud/stack.io&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Storm: the Hadoop of Realtime Stream Processing</title><link href="http://pyvideo.org/pycon-us-2012/storm-the-hadoop-of-realtime-stream-processing.html" rel="alternate"></link><published>2012-03-10T00:00:00+00:00</published><updated>2012-03-10T00:00:00+00:00</updated><author><name>Gabriel Grant</name></author><id>tag:pyvideo.org,2012-03-10:pycon-us-2012/storm-the-hadoop-of-realtime-stream-processing.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Twitter's new scalable, fault-tolerant, and simple(ish) stream
programming system... with Python!&lt;/p&gt;
</summary></entry></feed>