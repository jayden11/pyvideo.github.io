<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>http://pyvideo.org/</link><description></description><lastBuildDate>Sat, 04 Feb 2017 00:00:00 +0000</lastBuildDate><item><title>Crash test of Django ORM</title><link>http://pyvideo.org/pycon-belarus-2017/crash-test-of-django-orm.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The world is swimming in articles and books about Django and Django ORM
itself. All this sources cover only basic use cases of Django ORM
comparing to real world examples. This talk is dedicated to the
proposition to crash test Django ORM 80% of functionalities in 20% of
the time. Also I’m going to show the important features and capabilities
of Django ORM compare to most of SQL features. Traditionally, ORM is
presented in a “bottom-up” fashion, but I would like to propose
approach, on the other hand, is “top-down”. We begin by identifying a
rather short list of standard questions, or precisely types of
questions, that are often asked of relations databases. We then show how
these standard questions are posted in Django ORM, introducing and
motivating the use of its capabilities and features as they become
relevant.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrii Soldatenko</dc:creator><pubDate>Sat, 04 Feb 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-02-04:pycon-belarus-2017/crash-test-of-django-orm.html</guid></item><item><title>Building social network with Neo4j and Python</title><link>http://pyvideo.org/pycon-russia-2016/building-social-network-with-neo4j-and-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Social phenomena is coming. We have lot’s of social applications that we are using every day, let’s say Facebook, twitter, Instagram. Lot’s of such kind apps based on social graph and graph theory. I would like to share my knowledge and expertise about how to work with graphs and build large social graph as engine for Social network using python and Graph databases. We'll compare SQL and NoSQL approaches for friends relationships.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrii Soldatenko</dc:creator><pubDate>Sun, 03 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-07-03:pycon-russia-2016/building-social-network-with-neo4j-and-python.html</guid></item><item><title>What is the best full text search engine for Python?</title><link>http://pyvideo.org/europython-2016/what-is-the-best-full-text-search-engine-for-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Andrii Soldatenko - What is the best full text search engine for Python?
[EuroPython 2016]
[21 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/what-is-the-best-full-text-search-engine-for-python"&gt;https://ep2016.europython.eu//conference/talks/what-is-the-best-full-text-search-engine-for-python&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Compare full text search engines for Python.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Nowadays we can see lot’s of benchmarks and performance tests of
different web frameworks and Python tools. Regarding to search
engines, it’s difficult to find useful information especially
benchmarks or comparing between different search engines. It’s
difficult to manage what search engine you should select for instance,
ElasticSearch, Postgres Full Text Search or may be Sphinx or Whoosh.
You face a difficult choice, that’s why I am pleased to share with you
my acquired experience and benchmarks and focus on how to compare full
text search engines for Python.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrii Soldatenko</dc:creator><pubDate>Thu, 04 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-04:europython-2016/what-is-the-best-full-text-search-engine-for-python.html</guid></item></channel></rss>