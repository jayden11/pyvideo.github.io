<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>http://pyvideo.org/</link><description></description><lastBuildDate>Sun, 20 Sep 2015 00:00:00 +0000</lastBuildDate><item><title>Repeatable automated deployments with Juju</title><link>http://pyvideo.org/pycon-uk-2014/repeatable-automated-deployments-with-juju.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Presented by: Michael Foord &amp;amp; Simon Davy&lt;/p&gt;
&lt;p&gt;Do you deploy your Python services to Amazon EC2, or to Openstack, or even to HP cloud, joyent or Azure? Do you want to - without being tied into any one of them?&lt;/p&gt;
&lt;p&gt;What about local deployments with lxc or kvm containers. How about managing your bare metal servers through Metal As A Service and deploying to OpenStack on top? ISP grade technology for your data centre!&lt;/p&gt;
&lt;p&gt;How about managing your service deployment and infrastructure with Python code? (Devops distilled.)&lt;/p&gt;
&lt;p&gt;If any of this sounds interesting then Juju maybe for you! Treat your servers as cattle not as pets, for service oriented repeatable deployments on your choice of back-end. Orchestrate and relate your services with charms written in Python.&lt;/p&gt;
&lt;p&gt;In this talk we'll demo service deployment for a Django application and related infrastructure.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michael Foord</dc:creator><pubDate>Mon, 20 Oct 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-10-20:pycon-uk-2014/repeatable-automated-deployments-with-juju.html</guid><category>juju</category></item><item><title>The PyCon UK Panel</title><link>http://pyvideo.org/pycon-uk-2015/the-pycon-uk-panel.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In the style of Question Time (or Gardeners' Question Time, but without the plants), PyCon UK's acting Chair Zeth chairs a panel of Python experts who each give an short overview of how they found the conference and then try to answer your questions about the future of Python, Software development and the meaning of life, the universe and everything.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michael Foord</dc:creator><pubDate>Sun, 20 Sep 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-09-20:pycon-uk-2015/the-pycon-uk-panel.html</guid></item><item><title>To the Clouds: Why you should deploy to the cloud even if you don't want to</title><link>http://pyvideo.org/europython-2015/to-the-clouds-why-you-should-deploy-to-the-cloud-even-if-you-dont-want-to.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Michael Foord - To the Clouds: Why you should deploy to the cloud even if you don't want to
[EuroPython 2015]
[21 July 2015]
[Bilbao, Euskadi, Spain]&lt;/p&gt;
&lt;p&gt;Do you deploy your Python services to Amazon EC2, or to Openstack, or
even to HP cloud, joyent or Azure? Do you want to - without being tied
into any one of them? What about local full stack deployments with lxc
or kvm containers?&lt;/p&gt;
&lt;p&gt;Even if you're convinced you don't need &amp;quot;the cloud&amp;quot; because you manage
your own servers, amazing technologies like Private clouds and MaaS,
for dynamic server management on bare metal, may change your mind.&lt;/p&gt;
&lt;p&gt;Fed up with the cloud hype? Let us rehabilitate the buzzword! (A bit anyway.)&lt;/p&gt;
&lt;p&gt;A fully automated cloud deployment system is essential for rapid
scaling, but it's also invaluable for full stack testing on continuous
integration systems. Even better, your service deployment and
infrastructure can be managed with Python code? (Devops distilled)&lt;/p&gt;
&lt;p&gt;Treat your servers as cattle not as pets, for service oriented
repeatable deployments on your choice of back-end. Learn how service
orchestration is a powerful new approach to deployment management, and
do it with Python! If any of this sounds interesting then Juju maybe
for you!&lt;/p&gt;
&lt;p&gt;In this talk we'll see a demo deployment for a Django application and
related infrastructure. We'll be looking at the key benefits of cloud
deployments and how service orchestration is different from the
&amp;quot;machine provisioning&amp;quot; approach of most existing cloud deployment
solutions.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michael Foord</dc:creator><pubDate>Wed, 05 Aug 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-08-05:europython-2015/to-the-clouds-why-you-should-deploy-to-the-cloud-even-if-you-dont-want-to.html</guid></item><item><title>State of the Pythons (Keynote)</title><link>http://pyvideo.org/kiwi-pycon-2013/state-of-the-pythons-keynote.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Keynote&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&amp;#64; Kiwi PyCon 2013 - Saturday, 07 Sep 2013 - Keynote&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Slides&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/nzpug/michael-foord-state-of-the-pythons-keynote"&gt;https://speakerdeck.com/nzpug/michael-foord-state-of-the-pythons-keynote&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michael Foord</dc:creator><pubDate>Thu, 12 Sep 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-09-12:kiwi-pycon-2013/state-of-the-pythons-keynote.html</guid></item><item><title>New *and* Improved: Coming changes to unittest, the standard library test framework (#52)</title><link>http://pyvideo.org/pycon-us-2010/pycon-2010--new--and--improved--coming-changes-to.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;New &lt;em&gt;and&lt;/em&gt; Improved: Coming changes to unittest, the standard library
test framework&lt;/p&gt;
&lt;p&gt;Presented by Michael J Foord&lt;/p&gt;
&lt;p&gt;In Python 2.7 and 3.2 a whole bunch of improvements to unittest will
arrive. unittest is the Python standard library testing framework and
for several years it has languished whilst other Python testing
frameworks have innovated. Some of the best innovations have made their
way into unittest which has had quite a renovation.&lt;/p&gt;
&lt;p&gt;This talk will go through the major changes, like the new assert
methods, test discovery and the load_tests protocol, and also explain
how they can be used with earlier versions of Python.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michael Foord</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--new--and--improved--coming-changes-to.html</guid><category>pycon</category><category>pycon2010</category><category>unittest</category></item><item><title>Testing with mock</title><link>http://pyvideo.org/pycon-us-2011/pycon-2011--testing-with-mock.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Testing with mock&lt;/p&gt;
&lt;p&gt;Presented by Michael Foord&lt;/p&gt;
&lt;p&gt;mock is a Python testing library. It has the goal of making mocking in
tests brain dead simple! mock provides the Mock class and the patch
decorator for safely patching out the objects you are mocking in your
tests. This talk will cover standard mocking patterns. We'll also look
at some of the newer features in the latest release, including support
for mocking magic methods.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;mock provides a core Mock class that removes the need to create a host
of trivial stubs throughout your test suite. After performing an action,
you can make assertions about which methods / attributes were used and
arguments they were called with. You can also specify return values and
set specific attributes in the normal way.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.voidspace.org.uk/python/mock/"&gt;http://www.voidspace.org.uk/python/mock/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://pypi.python.org/pypi/mock/"&gt;http://pypi.python.org/pypi/mock/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The mock module also provides a patch() decorator that handles safely
patching out the things you are mocking during your test.&lt;/p&gt;
&lt;p&gt;We'll cover standard mocking patterns, and how mock makes them easy.
We'll also be looking at some of the newer features in the latest
release, including the magic method support that can be used (for
example) for mocking out objects used as context managers.&lt;/p&gt;
&lt;p&gt;mock is designed for &amp;quot;unit test style&amp;quot; testing, but is used with Python
testing libraries like nose and py.test.&lt;/p&gt;
&lt;p&gt;There will be some emphasis on how &lt;em&gt;not&lt;/em&gt; to use mocking in testing, and
why 'over mocking' is bad (and makes for brittle tests).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michael Foord</dc:creator><pubDate>Fri, 11 Mar 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--testing-with-mock.html</guid><category>mock</category><category>pycon</category><category>pycon2011</category><category>testing</category></item></channel></rss>