<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>http://pyvideo.org/</link><description></description><lastBuildDate>Mon, 18 Jul 2011 00:00:00 +0000</lastBuildDate><item><title>Best Practices for Python in the Cloud</title><link>http://pyvideo.org/europython-2011/best-practices-for-python-in-the-cloud.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Gisle Aas - 21 June 2011 in &amp;quot;Track Lasagne&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Abstract: Whether you’re an independent developer or development manager
in a large company, “the cloud” is on everyone’s mind. But just because
it’s in the cloud, doesn’t mean development and deployment is
effortless. The cloud presents infrastructure and development challenges
in a new way.&lt;/p&gt;
&lt;p&gt;In this presentation, ActiveState's Gisle Aas will share best practices
in building and deploying a Python-centric LAMP stack(s) on the cloud
for a range of web-based applications from simple Django site to HPC GPU
Clusters.&lt;/p&gt;
&lt;p&gt;Based on ActiveState’s experiences, Gisle will discuss the challenges
faced and lessons learned in building an infrastructure to deploy web
applications to the cloud with Python.&lt;/p&gt;
&lt;p&gt;You will learn about:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Which packages are critical for a secure, Python-centric LAMP stack
(and what it takes to build them)!&lt;/li&gt;
&lt;li&gt;Tips for developing, deploying, and scaling Python applicaitons in
the cloud&lt;/li&gt;
&lt;li&gt;How to use Python to connect and build infrastructure to support and
manage your deployment&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Gisle Aas</dc:creator><pubDate>Mon, 18 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-18:europython-2011/best-practices-for-python-in-the-cloud.html</guid><category>cloud</category><category>deploy</category><category>deployment</category><category>django</category><category>gpu</category><category>hpc</category><category>infrastructure</category><category>lamp</category><category>packages</category><category>scaling</category><category>web</category></item><item><title>OpenStack Compute's automated testing</title><link>http://pyvideo.org/europython-2011/openstack-computes-automated-testing.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Soren Hansen - 24 June 2011 in &amp;quot;Track Tagliatelle &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When a patch is propoed against OpenStack compute (a.k.a. Nova) and it
makes it through our peer review process, our automated test system
takes over:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;It finds the approved patch on Launchpad;&lt;/li&gt;
&lt;li&gt;An attempt to merge the patch is performed;&lt;/li&gt;
&lt;li&gt;The unit tests are run;&lt;/li&gt;
&lt;li&gt;A PEP-8 check is run;&lt;/li&gt;
&lt;li&gt;The merge is completed, applying the patch to our trunk;&lt;/li&gt;
&lt;li&gt;A tarball is built and published;&lt;/li&gt;
&lt;li&gt;An Ubuntu source package is built for several editions of Ubuntu;&lt;/li&gt;
&lt;li&gt;The source packages get uploaded to a PPA;&lt;/li&gt;
&lt;li&gt;Once built, the packages are installed on a test setup;&lt;/li&gt;
&lt;li&gt;A test battery is run against the installed &amp;quot;cloud&amp;quot;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I'll explain the various steps, showing how it works and attempt to
demonstrate it (Murphy's law permitting), and then I'll speak about the
benefits we've gotten from PPA's and working closely with Ubuntu.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Soren Hansen</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-13:europython-2011/openstack-computes-automated-testing.html</guid><category>openstack</category><category>packages</category><category>testing</category></item><item><title>Advanced Pickling with Stackless Python and sPickle</title><link>http://pyvideo.org/europython-2011/advanced-pickling-with-stackless-python-and-spick.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Anselm Kruis - 24 June 2011 in &amp;quot;Track Tagliatelle &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Stackless Python supports pickling of a wider range of types than
conventional C-Python, including stack frames and code objects. On this
basis it is possible to extend further the pickle.Pickler class in order
to serialise classes, modules, packages up to certain limits. The
&lt;a class="reference external" href="http://pypi.python.org/pypi/sPickle"&gt;sPickle package&lt;/a&gt; provides such
an extended Pickler. The code was developed as part of a commercial
project and recently released as free software by science + computing
ag. Currently it requires Stackless Python 2.7.&lt;/p&gt;
&lt;p&gt;In my presentation, I'll first demonstrate some applications of the
sPickle package including serialisation of modules and executing parts
of a program on a remote computer using RPyC and Paramiko.&lt;/p&gt;
&lt;p&gt;In the second part of my speech, I'll give some insight in the internal
operations of sPickle and the lessons learned during its development.
Extending the Pickler showed to be like opening a can of worms. You have
take care of many odds and ends to get it right. I'll point out some
weak points in the implementation of the conventional pickling code and
I'll also show the limits of the current sPickle implementation.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Anselm Kruis</dc:creator><pubDate>Thu, 07 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-07:europython-2011/advanced-pickling-with-stackless-python-and-spick.html</guid><category>packages</category><category>pickling</category><category>science</category><category>stackless</category></item><item><title>Django Packages: A Case Study</title><link>http://pyvideo.org/pycon-us-2011/pycon-2011--django-packages--a-case-study.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Django Packages: A Case Study&lt;/p&gt;
&lt;p&gt;Daniel Greenfeld&lt;/p&gt;
&lt;p&gt;Django Packages is the place to review Django apps, frameworks, and
projects. This talk is for everyone, including non-Django users, and
covers everything from architecture, API development, to interacting
with PyPI, Github, Bitbucket, etc. It will include tools, lessons
learned, and projects that fork the code to save the world and will
finish with an overview of the forthcoming pypackages.com.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Since launch Django Packages has become the place to find and compare
apps, frameworks and projects produced by the Django Community. Through
the use of public APIs, Django Packages constantly fetches hard data
from PyPI, Github, and Bitbucket, aproviding a powerful mash-up of
real-world data on the volume of usage of a particular package. At a
glance you can see which package is the most downloaded, which is the
most used, and which has seen ongoing development.&lt;/p&gt;
&lt;p&gt;The project is open sourced on Github, with all non-user data accessible
available via the API. Django Packages was conceived and and launched in
the 2010 Django Dash. Since launch it has seen features added
incrementally and was a frequently mentioned project at the 2010
DjangoCon and was #1 on Hacker News on Sunday, December 5, 2010. It's
purpose is to provide a place for Django Developers to submit, research,
and review apps, projects, and frameworks.&lt;/p&gt;
&lt;p&gt;The talk will cover:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Launching the project&lt;ul&gt;
&lt;li&gt;The pre-Django Packages state of finding Django apps&lt;/li&gt;
&lt;li&gt;Grids, not tags&lt;/li&gt;
&lt;li&gt;Only hard metrics allowed, no opinions or rating systems!&lt;/li&gt;
&lt;li&gt;Slurping content from PyPI, Github, Bitbucket, Launchpad,
SourceForge, and Google Project Hosting&lt;/li&gt;
&lt;li&gt;Lessons Learned AKA The Zen of Python and PEP-8&lt;/li&gt;
&lt;li&gt;Deployment and backups&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The Month after launch&lt;ul&gt;
&lt;li&gt;New feature considerations&lt;/li&gt;
&lt;li&gt;Handing over the keys to reduce bus factor&lt;/li&gt;
&lt;li&gt;Excitement when seeing it being used as a reference&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DjangoCon&lt;ul&gt;
&lt;li&gt;Sprint tactics for your pet project&lt;/li&gt;
&lt;li&gt;Development of an API&lt;/li&gt;
&lt;li&gt;Github, Google Project Hosting, and PyPI&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Going forward&lt;ul&gt;
&lt;li&gt;Planned new features for Django Packages&lt;/li&gt;
&lt;li&gt;Forking Django Packages to save the world&lt;/li&gt;
&lt;li&gt;pypackages.com - a forthcoming place to review Python
applications, frameworks, and packages&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Unknown</dc:creator><pubDate>Fri, 11 Mar 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--django-packages--a-case-study.html</guid><category>packages</category><category>pycon</category><category>pycon2011</category></item></channel></rss>