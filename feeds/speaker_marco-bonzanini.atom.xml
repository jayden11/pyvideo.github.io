<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="http://pyvideo.org/" rel="alternate"></link><link href="http://pyvideo.org/feeds/speaker_marco-bonzanini.atom.xml" rel="self"></link><id>http://pyvideo.org/</id><updated>2017-05-06T00:00:00+00:00</updated><entry><title>Static Type Analysis for Robust Data Products</title><link href="http://pyvideo.org/pydata-london-2017/static-type-analysis-for-robust-data-products.html" rel="alternate"></link><published>2017-05-06T00:00:00+00:00</published><updated>2017-05-06T00:00:00+00:00</updated><author><name>Marco Bonzanini</name></author><id>tag:pyvideo.org,2017-05-06:pydata-london-2017/static-type-analysis-for-robust-data-products.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Filmed at PyData London 2017&lt;/p&gt;
&lt;p&gt;Description
This talk discusses static type analysis applied to Python data products, its pros and cons, and overall how to adopt type checking tools (i.e. mypy) in your workflow.&lt;/p&gt;
&lt;p&gt;Abstract
As a dynamically typed language, Python is an extremely flexible tool that allows to write code quickly and concisely. This flexibility makes Python a popular tool for R&amp;amp;D and prototyping, but what about bringing Data Science in production? When comparing Python to statically typed languages, one of the downsides is that many type-related errors are not captured until runtime.&lt;/p&gt;
&lt;p&gt;This talk discusses the steps taken by the Python community to promote static type analysis, in particular the semantic definition of type hints and the adoption of mypy as type checking tool.&lt;/p&gt;
&lt;p&gt;The audience will learn about static typing for Python, its pros and cons, and how to adopt static type analysis in your workflow. Since the focus is on building and deploying data products, static type analysis is discussed as a mean to improve the robustness of your data products.&lt;/p&gt;
</summary></entry><entry><title>Building data pipelines in python</title><link href="http://pyvideo.org/pycon-italia-2016/building-data-pipelines-in-python.html" rel="alternate"></link><published>2016-07-05T00:00:00+00:00</published><updated>2016-07-05T00:00:00+00:00</updated><author><name>Marco Bonzanini</name></author><id>tag:pyvideo.org,2016-07-05:pycon-italia-2016/building-data-pipelines-in-python.html</id><summary type="html"></summary></entry><entry><title>Building Data Pipelines in Python</title><link href="http://pyvideo.org/pydata-london-2016/marco-bonzanini-building-data-pipelines-in-python-1.html" rel="alternate"></link><published>2016-05-11T00:00:00+00:00</published><updated>2016-05-11T00:00:00+00:00</updated><author><name>Marco Bonzanini</name></author><id>tag:pyvideo.org,2016-05-11:pydata-london-2016/marco-bonzanini-building-data-pipelines-in-python-1.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData London 2016&lt;/p&gt;
&lt;p&gt;This talk discusses the process of building data pipelines, e.g. extraction, cleaning, integration, pre-processing of data, in general all the steps that are necessary to prepare your data for your data-driven product. In particular, the focus is on data plumbing and on the practice of going from prototype to production.&lt;/p&gt;
&lt;p&gt;This talk discusses the process of building data pipelines, e.g. extraction, cleaning, integration, pre-processing of data, in general all the steps that are necessary to prepare your data for your data-driven product. In particular, the focus is on data plumbing and on the practice of going from prototype to production.&lt;/p&gt;
&lt;p&gt;Starting from some common anti-patterns, we'll highlight the need for a workflow manager for any non-trivial project.&lt;/p&gt;
&lt;p&gt;We'll discuss the case for Luigi as an interesting option to consider, and we'll consider where it fits in the bigger picture of deploying a data product.&lt;/p&gt;
&lt;p&gt;Slides available here: &lt;a class="reference external" href="https://speakerdeck.com/marcobonzanini/building-data-pipelines-in-python-pydata-london-2016"&gt;https://speakerdeck.com/marcobonzanini/building-data-pipelines-in-python-pydata-london-2016&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Building Data Pipelines in Python</title><link href="http://pyvideo.org/pydata-london-2016/marco-bonzanini-building-data-pipelines-in-python.html" rel="alternate"></link><published>2016-05-08T00:00:00+00:00</published><updated>2016-05-08T00:00:00+00:00</updated><author><name>Marco Bonzanini</name></author><id>tag:pyvideo.org,2016-05-08:pydata-london-2016/marco-bonzanini-building-data-pipelines-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData London 2016&lt;/p&gt;
&lt;p&gt;This talk discusses the process of building data pipelines, e.g. extraction, cleaning, integration, pre-processing of data, in general all the steps that are necessary to prepare your data for your data-driven product. In particular, the focus is on data plumbing and on the practice of going from prototype to production.&lt;/p&gt;
&lt;p&gt;Starting from some common anti-patterns, we'll highlight the need for a workflow manager for any non-trivial project.&lt;/p&gt;
&lt;p&gt;We'll discuss the case for Luigi as an interesting option to consider, and we'll consider where it fits in the bigger picture of deploying a data product.&lt;/p&gt;
&lt;p&gt;Slides available here: &lt;a class="reference external" href="https://speakerdeck.com/marcobonzanini/building-data-pipelines-in-python-pydata-london-2016"&gt;https://speakerdeck.com/marcobonzanini/building-data-pipelines-in-python-pydata-london-2016&lt;/a&gt;&lt;/p&gt;
</summary></entry></feed>