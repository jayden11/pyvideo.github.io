<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="http://pyvideo.org/" rel="alternate"></link><link href="http://pyvideo.org/feeds/speaker_sebastian-neubauer.atom.xml" rel="self"></link><id>http://pyvideo.org/</id><updated>2016-08-01T00:00:00+00:00</updated><entry><title>A Pythonic Approach to Continuous Delivery</title><link href="http://pyvideo.org/europython-2015/a-pythonic-approach-to-continuous-delivery.html" rel="alternate"></link><published>2015-08-02T00:00:00+00:00</published><updated>2015-08-02T00:00:00+00:00</updated><author><name>Sebastian Neubauer</name></author><id>tag:pyvideo.org,2015-08-02:europython-2015/a-pythonic-approach-to-continuous-delivery.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Sebastian Neubauer - A Pythonic Approach to Continuous Delivery
[EuroPython 2015]
[22 July 2015]
[Bilbao, Euskadi, Spain]&lt;/p&gt;
&lt;p&gt;Software development is all about writing code that delivers
additional value to a customer. Following the agile and lean approach
this value created by code changes should be continuously delivered as
fast, as early and as often as possible without any compromise on the
quality.&lt;/p&gt;
&lt;p&gt;Remarkably, there is a huge gap between the development of the
application code and the reliable and scalable operation of the
application. As an example, most of the tutorials about web
development with Flask or Django end by starting a local “dummy”
server, missing out all the steps needed for production ready
operation of the web service. Furthermore, as there is no “rocket
science” in-between, many proposals to bridge that gap from both
sides, operations and developers start with sentences like: “you just
have to...”, a clear indication that it will cause problems later on
and also a symptom of a cultural gap between developers and operations
staff.&lt;/p&gt;
&lt;p&gt;In this talk I will go through the complete delivery pipeline from
application development to the industrial grade operation, clearly
biased towards the “DevOps” mindset. Instead of presenting a
sophisticated enterprise solution, I will outline the necessary
building blocks for continuous delivery and fill them up with simple
but working poor man's solutions, so that it is equally useful for
professional and non-professional developers and operations engineers.
After the talk you will know how to build such a continuous delivery
pipeline with open-source tools like “Ansible”, “Devpi” and “Jenkins”
and I will share some of my day-to-day experiences with automation in
general. Although many of the concepts are language agnostic I will
focus on the ins and outs in a python universe and outline the
pythonic way of “get this thing running”.&lt;/p&gt;
</summary></entry><entry><title>Infrastructure as Code: "pip install" your environment</title><link href="http://pyvideo.org/europython-2016/infrastructure-as-code-pip-install-your-environment.html" rel="alternate"></link><published>2016-08-01T00:00:00+00:00</published><updated>2016-08-01T00:00:00+00:00</updated><author><name>Sebastian Neubauer</name></author><id>tag:pyvideo.org,2016-08-01:europython-2016/infrastructure-as-code-pip-install-your-environment.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Sebastian Neubauer - Infrastructure as Code: &amp;quot;pip install&amp;quot; your environment
[EuroPython 2016]
[20 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/infrastructure-as-code-pip-install-your-environment"&gt;https://ep2016.europython.eu//conference/talks/infrastructure-as-code-pip-install-your-environment&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;In this talk I will show how to build your own infrastructure-
as-a-service on the example of &amp;quot;Postgraas&amp;quot;, an open source postgres-
as-a-service I wrote in python just for fun. With a simple curl
request you can get your very own database, just like RDS on AWS. You
will learn how easy it is to create such a remarkably useful service
with hardly three hundred lines of flask, docker and some glue-code, a
project for a rainy Sunday.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Continuous Delivery, DevOps, Lean - all those movements have one thing
in common: extending the process of software development along the
whole value stream, ultimately to the customer. This simple
requirement causes surprising serious difficulties on traditional
operations workflows. All of a sudden, a single manual ticket to the
operations team is a critical blocker in the delivery process.
Therefore all parts of the infrastructure, storage, databases,
identities, compute resources must be provided as a self service for
the developers in order to be able to achieve this goal. What one may
call &amp;quot;the cloud&amp;quot; (including self hosted ones like open stack) is such
a successful model not least because they offer exactly this &amp;quot;ticket-
less&amp;quot; self-service. But why should we wait for &amp;quot;the cloud&amp;quot; to offer
what we really need? We are python developers, we are hackers!&lt;/p&gt;
&lt;p&gt;In this talk I will show how to build your own infrastructure-
as-a-service on the example of &amp;quot;Postgraas&amp;quot;, an open source postgres-
as-a-service I wrote in python just for fun. With a simple curl
request you can get your very own database, just like RDS on AWS. You
will learn how easy it is to create such a remarkably useful service
with hardly three hundred lines of flask, docker and some glue-code, a
project for a rainy Sunday. After the talk you will know how to amaze
your colleagues by eliminating an annoying ticket or manual workflow
with a simple flask app and some creativity.&lt;/p&gt;
</summary></entry></feed>