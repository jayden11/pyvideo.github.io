<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="http://pyvideo.org/" rel="alternate"></link><link href="http://pyvideo.org/feeds/speaker_dmitry-chaplinsky.atom.xml" rel="self"></link><id>http://pyvideo.org/</id><updated>2016-10-15T00:00:00+00:00</updated><entry><title>Building a solid foundation for Ukrainian NLP with Python</title><link href="http://pyvideo.org/pycon-pl-2016/building-a-solid-foundation-for-ukrainian-nlp-with-python.html" rel="alternate"></link><published>2016-10-15T00:00:00+00:00</published><updated>2016-10-15T00:00:00+00:00</updated><author><name>Dmitry Chaplinsky</name></author><id>tag:pyvideo.org,2016-10-15:pycon-pl-2016/building-a-solid-foundation-for-ukrainian-nlp-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Propozycja tego, jak można tworzyć mikroserwisy w Pythonie zakładając
pisanie testów najpierw, a dopiero potem właściwego kodu. Na każdym
etapie pracy. Żadne pseudo-TDD.Skupię się na testach funkcjonalnych
badających całych proces aplikacji z zewnątrz (pomogą w tym Docker i
Pytest) oraz testach kontraktowych pilnujących, że nikt w trakcie
developmentu nie zmienił zewnętrznych interfejsów naszej aplikacji. W
drugim przypadku wykorzystany będzie Swagger.Przykłady nie będą polegać
na silnej integracji z żadnym webowym frameworkiem. Poruszę też kwestię
mierzenia pokrycia testowego w nieco bardziej skomplikowanych
przypadkach (jak testy funkcjonalne).&lt;/p&gt;
</summary></entry><entry><title>How we are recognizing shredded documents of Yanukovich and Kurchenko</title><link href="http://pyvideo.org/pycon-ukraine-2014/how-we-are-recognizing-shredded-documents-of-yanu.html" rel="alternate"></link><published>2014-11-01T00:00:00+00:00</published><updated>2014-11-01T00:00:00+00:00</updated><author><name>Dmitry Chaplinsky</name></author><id>tag:pyvideo.org,2014-11-01:pycon-ukraine-2014/how-we-are-recognizing-shredded-documents-of-yanu.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Рассказ о том, как мы группой волонтеров при помощи Python,
crowdsourcing, open source и OpenCV пытаемся решить задачу по сбору
самого большого паззла в мире: 50 мешков документов олигарха Курченко,
пропущенных через шредеры. Срывы покровов, развенчания популярных
заблуждений, секреты победителей Darpa Shredder Challenge. Наш подход:
общая идея, методика решения, технические средства, идеи дальнейшего
развития. А также пять минут безудержного хайра в open source проект.&lt;/p&gt;
</summary></entry></feed>