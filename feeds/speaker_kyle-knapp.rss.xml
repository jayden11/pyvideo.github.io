<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>http://pyvideo.org/</link><description></description><lastBuildDate>Thu, 28 Jul 2016 00:00:00 +0000</lastBuildDate><item><title>It Works on My Machine: Writing Python Code for Any Environment</title><link>http://pyvideo.org/europython-2015/it-works-on-my-machine-writing-python-code-for-any-environment.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Kyle Knapp - It Works on My Machine: Writing Python Code for Any Environment
[EuroPython 2015]
[20 July 2015]
[Bilbao, Euskadi, Spain]&lt;/p&gt;
&lt;p&gt;Have you ever developed a nice, well-working python program on one
environment, only to have it blow up with exceptions and tracebacks
when you run it on a different environment? Have no fear! This talk
will show you how to write and maintain python code that is compatible
across environments that may differ by python versions and/or
operating systems.&lt;/p&gt;
&lt;p&gt;Techniques and tips will be drawn from lessons and experiences gained
from making the AWS CLI, a python-based command line tool to manage
AWS resources, compatible across a wide range of environments. In a
case-study-like format, real-life compatibility issues encountered
while developing the AWS CLI will be presented along with how we
resolved each of them. These real-life examples will encompass, but
will not be limited to, the following topics:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;How to use functions and classes that may differ across python versions and/or operating systems&lt;/li&gt;
&lt;li&gt;How to handle version-specific bugs&lt;/li&gt;
&lt;li&gt;How to handle strings, bytes, and Unicode across python versions&lt;/li&gt;
&lt;li&gt;How to handle differing locale settings&lt;/li&gt;
&lt;li&gt;How to handle file operations across operating systems&lt;/li&gt;
&lt;li&gt;How and when to vendor dependencies&lt;/li&gt;
&lt;li&gt;How to write tests that are compatible across python versions and operating systems&lt;/li&gt;
&lt;li&gt;How to create a testing environment that monitors compatibility of code across various environments&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ultimately, the goal of these examples is introduce to you some
effective, real-world programming practices to overcome your current
or next compatibility issue.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kyle Knapp</dc:creator><pubDate>Thu, 06 Aug 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-08-06:europython-2015/it-works-on-my-machine-writing-python-code-for-any-environment.html</guid></item><item><title>Dynamic Class Generation in Python</title><link>http://pyvideo.org/europython-2016/dynamic-class-generation-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Kyle Knapp - Dynamic Class Generation in Python
[EuroPython 2016]
[18 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/dynamic-class-generation-in-python"&gt;https://ep2016.europython.eu//conference/talks/dynamic-class-generation-in-python&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;This talk is about dynamic class generation in python: the practice of
writing code that generates classes and their functionality at
runtime. It will use boto3, the AWS SDK for Python, as a basis to dive
into the basics, the benefits, and the drawbacks to dynamically
generating classes.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;This talk is about the concept of dynamic class generation in python.
The whole idea is writing code that generates classes and their
functionality at runtime. You now may be asking yourself, “That sounds
like a neat trick. Why would I ever generate my classes at runtime?”
Here are a few reasons why:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;It can decrease the physical size of your code.&lt;/li&gt;
&lt;li&gt;It can improve the workflow in adding new functionality.&lt;/li&gt;
&lt;li&gt;It can improve reliability of your code.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One example where the power of this concept has really been leveraged
is in boto3, the AWS SDK for Python. Dynamic class generation has
allowed boto3 to become heavily data driven such that most of its
classes and methods are generated based off JSON models representing
aspects of an AWS service’s API. For example, to add support for a new
AWS service API in boto3, just plop in a JSON file into the library
with no additional Python code required.&lt;/p&gt;
&lt;p&gt;Using lessons and techniques drawn from developing boto3, this talk
will dive into the following topics related to dynamic class
generation:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The basics of dynamic class generation such as how to effectively dynamically generate classes.&lt;/li&gt;
&lt;li&gt;How to overcome some of the challenges of dynamic class generation.&lt;/li&gt;
&lt;li&gt;The tradeoffs in dynamically generating classes and discussion on when it is appropriate.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By the end of this talk, the hope is that you will have a better
understanding of dynamic class generation and come away with helpful
ideas for your next big project.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kyle Knapp</dc:creator><pubDate>Thu, 28 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-07-28:europython-2016/dynamic-class-generation-in-python.html</guid></item></channel></rss>