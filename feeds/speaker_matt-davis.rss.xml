<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>http://pyvideo.org/</link><description></description><lastBuildDate>Wed, 24 Aug 2016 00:00:00 +0000</lastBuildDate><item><title>A Practical Introduction to Airflow</title><link>http://pyvideo.org/pybay-2016/a-practical-introduction-to-airflow.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Moving data through transformations and from one place to another is a big part of data science/eng. We’ve been using Airflow for several months at Clover Health and have learned a lot about its strengths and weaknesses. We will use this talk to give a practical introduction to Airflow that gives people the information they need to decide whether Airflow is right for them and how to get started.
​
Abstract
Airflow is a popular pipeline orchestration tool for Python that allows users to configure complex (or simple!) multi-system workflows that are executed in parallel across any number of workers. A single pipeline might contain bash, Python, and SQL operations. With dependencies specified between tasks, Airflow knows which ones it can run in parallel and which ones must run after others. Airflow is written in Python and users can add their own operators with custom functionality, doing anything Python can do.&lt;/p&gt;
&lt;p&gt;At Clover Health, we’ve been pushing Airflow’s limits, digging into the source code, and contributing patches upstream. In this talk, we’ll cover the basics of Airflow so you can use what we’ve learned to start your Airflow journey on the right foot. This talk aims to answer questions such as: What is Airflow useful for? How do I get started? What do I need to know that’s not in the docs?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bio:&lt;/strong&gt;
I have been a scientific Python developer since 2008. I’ve worked in atmospheric science, astronomy, urban planning, web applications, and healthcare. I maintain several open source Python libraries and am currently a data engineer at Clover Health.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/pybay2016/matt-davis-a-practical-introduction-to-airflow"&gt;https://speakerdeck.com/pybay2016/matt-davis-a-practical-introduction-to-airflow&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Matt Davis</dc:creator><pubDate>Sat, 20 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-20:pybay-2016/a-practical-introduction-to-airflow.html</guid></item><item><title>A Pratctical Introduction to Airflow</title><link>http://pyvideo.org/pydata-san-francisco-2016/a-pratctical-introduction-to-airflow.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData SF 2016&lt;/p&gt;
&lt;p&gt;Airflow is a pipeline orchestration tool for Python that allows users to configure multi-system workflows that are executed in parallel across workers. I’ll cover the basics of Airflow so you can start your Airflow journey on the right foot. This talk aims to answer questions such as: What is Airflow useful for? How do I get started? What do I need to know that’s not in the docs?&lt;/p&gt;
&lt;p&gt;Airflow is a popular pipeline orchestration tool for Python that allows users to configure complex (or simple!) multi-system workflows that are executed in parallel across any number of workers. A single pipeline might contain bash, Python, and SQL operations. With dependencies specified between tasks, Airflow knows which ones it can run in parallel and which ones must run after others. Airflow is written in Python and users can add their own operators with custom functionality, doing anything Python can do.&lt;/p&gt;
&lt;p&gt;Moving data through transformations and from one place to another is a big part of data science/engineering, but there are only two widely-used orchestration systems for doing so that are written in Python: Luigi and Airflow. We’ve been using Airflow (&lt;a class="reference external" href="http://pythonhosted.org/airflow/"&gt;http://pythonhosted.org/airflow/&lt;/a&gt;) for several months at Clover Health and have learned a lot about its strengths and weaknesses. We use it to run several pipelines multiple times per day. One includes over 450 heavily linked tasks!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Matt Davis</dc:creator><pubDate>Wed, 24 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-24:pydata-san-francisco-2016/a-pratctical-introduction-to-airflow.html</guid><category>airflow</category></item><item><title>Teaching with the IPython Notebook</title><link>http://pyvideo.org/pycon-us-2013/teaching-with-the-ipython-notebook.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;The IPython Notebook offers a number of advantages when teaching
programming. It eliminates the need to switch between the command line
and an editor, provides a consistent interface for students, and
provides an easy to share and reuse file format. I’ll discuss how I and
others are using the IPython Notebook to reduce the mental load on
students to make learning and teaching easier for everyone.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Matt Davis</dc:creator><pubDate>Sat, 16 Mar 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-03-16:pycon-us-2013/teaching-with-the-ipython-notebook.html</guid><category>talk</category></item></channel></rss>