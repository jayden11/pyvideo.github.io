<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>http://pyvideo.org/</link><description></description><lastBuildDate>Fri, 09 Mar 2012 00:00:00 +0000</lastBuildDate><item><title>"Dude, Where's My RAM?" - A deep dive into how Python uses memory</title><link>http://pyvideo.org/pycon-us-2011/pycon-2011---quot-dude--where--39-s-my-ram--quot-.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&amp;quot;Dude, Where's My RAM?&amp;quot; - A deep dive into how Python uses memory&lt;/p&gt;
&lt;p&gt;Presented by Dave Malcolm&lt;/p&gt;
&lt;p&gt;This talk will give a deep dive into how CPython uses memory. I'll be
demonstrating a new tool I've written that analyses CPython's memory
usage, and offer hints and tips on how you can reduce the memory
footprint of your Python programs.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Is your Python program using too much memory? This talk will give a deep
dive into how CPython uses memory - starting from objects in your Python
code, down through the various implementations layers, eventually
reaching actual hardware.&lt;/p&gt;
&lt;p&gt;In particular, I'll be demonstrating a new tool I've written that can
track CPython's memory usage down to the level of individual bytes, and
offer hints and tips on how you can reduce the memory footprint of your
Python programs.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dave Malcolm</dc:creator><pubDate>Fri, 11 Mar 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011---quot-dude--where--39-s-my-ram--quot-.html</guid><category>cpython</category><category>memory</category><category>pycon</category><category>pycon2011</category></item><item><title>Static analysis of Python extension modules using GCC</title><link>http://pyvideo.org/pycon-us-2012/static-analysis-of-python-extension-modules-using.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Want to analyse C/C++ code using Python? I've written a plugin for GCC
that embeds Python inside the compiler, allowing you to write new C/C++
compilation passes in Python. I've used this to build a static analysis
tool that understands the CPython extension API, and can automatically
detect reference- counting bugs, and other errors.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dave Malcolm</dc:creator><pubDate>Fri, 09 Mar 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-03-09:pycon-us-2012/static-analysis-of-python-extension-modules-using.html</guid></item></channel></rss>