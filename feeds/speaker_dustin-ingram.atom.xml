<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="http://pyvideo.org/" rel="alternate"></link><link href="http://pyvideo.org/feeds/speaker_dustin-ingram.atom.xml" rel="self"></link><id>http://pyvideo.org/</id><updated>2017-05-20T00:00:00+00:00</updated><entry><title>The Fastest FizzBuzz in the West: Make Your Own Language with RPLY and RPython</title><link href="http://pyvideo.org/pycon-us-2017/the-fastest-fizzbuzz-in-the-west-make-your-own-language-with-rply-and-rpython.html" rel="alternate"></link><published>2017-05-20T00:00:00+00:00</published><updated>2017-05-20T00:00:00+00:00</updated><author><name>Dustin Ingram</name></author><id>tag:pyvideo.org,2017-05-20:pycon-us-2017/the-fastest-fizzbuzz-in-the-west-make-your-own-language-with-rply-and-rpython.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, you'll learn how I built DIVSPL (Dustin Ingram's Very
Special Programming Language), a tongue-in-cheek domain-specific
language, which is particularly good for implementing FizzBuzz -- as
quickly as possible.&lt;/p&gt;
&lt;p&gt;We'll build DIVSPL with RPLY, an implementation of David Beazley's PLY
(but with a &amp;quot;cooler&amp;quot; API) and make it compatible with RPython, a
restricted subset of the Python programming language. Along the way,
you'll learn about lexers, parsers, and grammars, and in the end, you'll
know how to build your own language.&lt;/p&gt;
</summary></entry><entry><title>watâ€½ Mind-bending Edge Cases in Python</title><link href="http://pyvideo.org/pygotham-2016/wat-mind-bending-edge-cases-in-python.html" rel="alternate"></link><published>2016-07-16T00:00:00+00:00</published><updated>2016-07-16T00:00:00+00:00</updated><author><name>Dustin Ingram</name></author><id>tag:pyvideo.org,2016-07-16:pygotham-2016/wat-mind-bending-edge-cases-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, we'll explore ten of the most paradoxical and mind-numbing &amp;quot;Python wats&amp;quot; -- unique edge cases in the language. We'll even go so far as to re-implement the stdlib functions which cause them to understand just why they actually make sense.&lt;/p&gt;
&lt;p&gt;This is a fun and entertaining talk. In the end, attendees will gain insight into functions they use every day, including &lt;cite&gt;zip&lt;/cite&gt;, &lt;cite&gt;max&lt;/cite&gt;, &lt;cite&gt;min&lt;/cite&gt;, &lt;cite&gt;any&lt;/cite&gt;,  &lt;cite&gt;all&lt;/cite&gt;,  and more. Even the simplest of tools, when combined, can produce really weird results!&lt;/p&gt;
</summary></entry><entry><title>What Is and What Can Be: An Exploration from `type` to Metaclasses</title><link href="http://pyvideo.org/pycon-us-2016/dustin-ingram-what-is-and-what-can-be-an-exploration-from-type-to-metaclasses-pycon-2016.html" rel="alternate"></link><published>2016-05-31T00:00:00+00:00</published><updated>2016-05-31T00:00:00+00:00</updated><author><name>Dustin Ingram</name></author><id>tag:pyvideo.org,2016-05-31:pycon-us-2016/dustin-ingram-what-is-and-what-can-be-an-exploration-from-type-to-metaclasses-pycon-2016.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker: Dustin Ingram&lt;/p&gt;
&lt;p&gt;Most of us use &lt;cite&gt;type&lt;/cite&gt; every day, but few can say they know it well. This talk explores &lt;cite&gt;type&lt;/cite&gt; and along the way, reveals how it relates to &lt;cite&gt;object&lt;/cite&gt;, &lt;cite&gt;class&lt;/cite&gt; and more, eventually arriving at deeper understanding of metaclasses in Python.&lt;/p&gt;
&lt;p&gt;Slides can be found at: &lt;a class="reference external" href="https://speakerdeck.com/pycon2016"&gt;https://speakerdeck.com/pycon2016&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/PyCon/2016-slides"&gt;https://github.com/PyCon/2016-slides&lt;/a&gt;&lt;/p&gt;
</summary><category term="metaclasses"></category><category term="metaprogramming"></category><category term="types"></category></entry></feed>