<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>http://pyvideo.org/</link><description></description><lastBuildDate>Fri, 19 May 2017 00:00:00 +0000</lastBuildDate><item><title>Implementing Concurrency and Parallelism From The Ground Up</title><link>http://pyvideo.org/pycon-us-2017/implementing-concurrency-and-parallelism-from-the-ground-up.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When writing an application, it is common to want to do many things at
once. For web servers, this is serve multiple web requests, for GUI
applications it's doing a background task whilst keeping the UI
responsive. But how do we actually do that? This talk will go into how
concurrency and parallelism work from the CPU, OS, and threads up, how
state (data) is shared between them, and how this interacts with the
functions that you, the programmer, write, and how you can write
properly behaving concurrent or parallel software.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Amber Brown</dc:creator><pubDate>Fri, 19 May 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-05-19:pycon-us-2017/implementing-concurrency-and-parallelism-from-the-ground-up.html</guid></item><item><title>Releasing Calendar-Versioned Software</title><link>http://pyvideo.org/pycon-au-2016/releasing-calendar-versioned-software.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Amber Brown
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/144/view_talk"&gt;https://2016.pycon-au.org/schedule/144/view_talk&lt;/a&gt;
Calendar-versioned software (or “calver”), in contrast to semantically versioned software (or “semver”), is released on regular intervals, rather than on the occurrence of features, bug fixes, or backwards compatibility breaking changes. This method of releasing software, notably used by Twisted and various related projects, eschews the “major.minor.patchlevel” format and the guarantees of a semver regime and instead focuses on providing robust backwards compatibility, clear deprecation cycles, and frequent but smaller releases. This talk discusses some of the trials and tribulations of the release process of such a project, Twisted, and the ways that it makes it work, as well as what tools are available to make the process easier if you wish to implement it yourself.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Amber Brown</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/releasing-calendar-versioned-software.html</guid></item><item><title>The Report Of Twisted’s Death</title><link>http://pyvideo.org/europython-2016/the-report-of-twisteds-death.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Amber Brown - The Report Of Twisted’s Death
[EuroPython 2016]
[18 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/the-report-of-twisteds-death"&gt;https://ep2016.europython.eu//conference/talks/the-report-of-twisteds-death&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;This talk will teach you how Twisted or Tornado supplement asyncio,
how asyncio can/is integrated with these frameworks, and makes a case
for the continued development of new and existing selector-loop based
frameworks. It will also paint a picture of the future direction of
Twisted, why the original plan of asyncio as a standard API has not
come to complete fruition, and what can be done about it.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Historically, there has been no “standard way” of doing asynchronous
I/O in Python. A variety of solutions, from using threads (WSGI),
processes (multiprocessing), green threads (gevent), or selector loops
(Tornado, Twisted) have all been used to similar degrees, but apart
from the (now deprecated) standard library asyncore/asynchat, Python
itself did not have a blessed option.&lt;/p&gt;
&lt;p&gt;PEP 3156, or “the asyncio PEP”, introduced in Python 3.4, provides
this blessed option, choosing a standard selector loop approach (or
“reactor”, in Twisted parlance). The role of asyncio may seem muddled
in the eyes of developers new to asynchronous programming, or those
that may not understand the technical details of asyncio nor the
political environment in which it was created. This talk will teach
you how Twisted or Tornado supplement asyncio, how asyncio can/is
integrated with these frameworks, and makes a case for the continued
development of new and existing selector-loop based frameworks. It
will also paint a picture of the future direction of Twisted, why the
original plan of asyncio as a standard API has not come to complete
fruition, and what can be done about it.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Amber Brown</dc:creator><pubDate>Fri, 05 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-05:europython-2016/the-report-of-twisteds-death.html</guid></item><item><title>The Report Of Twisted’s Death or: Why Twisted and Tornado Are Relevant In The Asyncio Age</title><link>http://pyvideo.org/pycon-us-2016/the-report-of-twisteds-death-or-why-twisted-and-tornado-are-relevant-in-the-asyncio-age.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker: Amber Brown&lt;/p&gt;
&lt;p&gt;With asyncio on the scene, the question has been asked: is there any point in having Twisted or Tornado around?&lt;/p&gt;
&lt;p&gt;Slides can be found at: &lt;a class="reference external" href="https://speakerdeck.com/pycon2016"&gt;https://speakerdeck.com/pycon2016&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/PyCon/2016-slides"&gt;https://github.com/PyCon/2016-slides&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Amber Brown</dc:creator><pubDate>Tue, 31 May 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-05-31:pycon-us-2016/the-report-of-twisteds-death-or-why-twisted-and-tornado-are-relevant-in-the-asyncio-age.html</guid></item></channel></rss>