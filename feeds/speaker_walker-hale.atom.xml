<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="http://pyvideo.org/" rel="alternate"></link><link href="http://pyvideo.org/feeds/speaker_walker-hale.atom.xml" rel="self"></link><id>http://pyvideo.org/</id><updated>2013-08-16T00:00:00+00:00</updated><entry><title>Filtering and Deduplicating Data in IPython Notebook</title><link href="http://pyvideo.org/pytexas-2013/filtering-and-deduplicating-data-in-ipython-notebook.html" rel="alternate"></link><published>2013-08-16T00:00:00+00:00</published><updated>2013-08-16T00:00:00+00:00</updated><author><name>Walker Hale</name></author><id>tag:pyvideo.org,2013-08-16:pytexas-2013/filtering-and-deduplicating-data-in-ipython-notebook.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk provides a practical demonstration of how I used IPython Notebook to filter and then de-duplicate a set of 2877 records from a tab separated value (text) file. Using a file of 117 cases and a fairy complex set of business criteria that combined separate concepts of &amp;quot;most recent&amp;quot; and &amp;quot;most modern&amp;quot;, I reduced the set of records down from 20 columns x 2877 records to 13 columns x 615 records. The end result was the output of this computation and a script that could be used for other data sets. (There were 9 more data sets.)&lt;/p&gt;
</summary></entry><entry><title>PyYAML, ElementTree, and Liquibase</title><link href="http://pyvideo.org/pytexas-2013/pyyaml-elementtree-and-liquibase.html" rel="alternate"></link><published>2013-08-16T00:00:00+00:00</published><updated>2013-08-16T00:00:00+00:00</updated><author><name>Walker Hale</name></author><id>tag:pyvideo.org,2013-08-16:pytexas-2013/pyyaml-elementtree-and-liquibase.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will cover two libraries:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;xml.etree.ElementTree - part of the standard library for parsing, manipulating, or generating XML&lt;/li&gt;
&lt;li&gt;PyYAML - for parsing or generating YAML (and JSON)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We will demonstrate the benefits of both libraries, and then demonstrate how the combination of the two allows writing YAML for situations where hand-generated XML is required but tedious. The practical example is Liquibase, a product that uses user-generated XML to make gradual changes to database schema.&lt;/p&gt;
</summary></entry><entry><title>Daemon Slaying! Or, Unix Daemons in Python for fun and profit!</title><link href="http://pyvideo.org/pytexas-2011/daemon-slaying--or--unix-daemons-in-python-for-fu.html" rel="alternate"></link><published>1990-01-01T00:00:00+00:00</published><updated>1990-01-01T00:00:00+00:00</updated><author><name>Walker Hale</name></author><id>tag:pyvideo.org,1990-01-01:pytexas-2011/daemon-slaying--or--unix-daemons-in-python-for-fu.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Learn the in's and out's of creating Unix Daemons in Python. Walker Hale
will walk you through several examples, gotchas, and tips and tricks.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Daemons are those pieces of software in Unix (including Linux and Mac OS
X) that run in the background and typically start automatically during
system boot. Times when you might want a daemon include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Monitoring an &amp;quot;inbox&amp;quot; directory in situations where a cron job is not
appropriate&lt;/li&gt;
&lt;li&gt;Managing (possibly multiple) instances of software according to
business rules&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Although most daemons are written in C, Python is a great alternative.&lt;/p&gt;
</summary><category term="gotchas"></category></entry><entry><title>Logging De-Mystified! Basics to Advanced!</title><link href="http://pyvideo.org/pytexas-2011/logging-de-mystified--basics-to-advanced.html" rel="alternate"></link><published>1990-01-01T00:00:00+00:00</published><updated>1990-01-01T00:00:00+00:00</updated><author><name>Walker Hale</name></author><id>tag:pyvideo.org,1990-01-01:pytexas-2011/logging-de-mystified--basics-to-advanced.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;This talk covers the Python Logging Module!&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Walker Hale will explore the standard Python Logging Module and provide
a tour from the basics through intermediate examples, and touch on
advanced logging strategies.&lt;/p&gt;
&lt;p&gt;Do you write programs that run longer than 5 minutes? Would you like to
leverage Python's excellent logging system more fully? Even if you don't
use Python for your long-running processes, you will learn valuable and
widely- applicable logging techniques.&lt;/p&gt;
</summary></entry><entry><title>Python Metaprogramming for Mad Scientists and Evil Geniuses</title><link href="http://pyvideo.org/pycon-us-2012/python-metaprogramming-for-mad-scientists-and-evi.html" rel="alternate"></link><published>2012-03-09T00:00:00+00:00</published><updated>2012-03-09T00:00:00+00:00</updated><author><name>Walker Hale</name></author><id>tag:pyvideo.org,2012-03-09:pycon-us-2012/python-metaprogramming-for-mad-scientists-and-evi.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;This talk covers the power and metaprogramming features of Python that
cater to mad scientists and evil geniuses. This will also be of interest
to others who just want to use of Python in a more power (hungry) way.
The core concept is that you can synthesize functions, classes and
modules without a direct correspondence to source code. You can also
mutate third-party objects and apps.&lt;/p&gt;
</summary></entry></feed>