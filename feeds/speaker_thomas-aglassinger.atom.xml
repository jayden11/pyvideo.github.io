<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="http://pyvideo.org/" rel="alternate"></link><link href="http://pyvideo.org/feeds/speaker_thomas-aglassinger.atom.xml" rel="self"></link><id>http://pyvideo.org/</id><updated>2014-07-22T00:00:00+00:00</updated><entry><title>Solution oriented error handling</title><link href="http://pyvideo.org/europython-2014/solution-oriented-error-handling.html" rel="alternate"></link><published>2014-07-22T00:00:00+00:00</published><updated>2014-07-22T00:00:00+00:00</updated><author><name>Thomas Aglassinger</name></author><id>tag:pyvideo.org,2014-07-22:europython-2014/solution-oriented-error-handling.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;This talk shows how to use Python's built in error handling mechanisms
to keep the productive code clean, derive error messages helpful for the
user directly from the code and release ressources properly.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Traditionally error handling is regarded an annoyance by developers
because it removes the focus from the already difficult enough
productive parts of the code to parts that ideally will never be called.
And even if, end users seem to be ignore the error messages and just
click &amp;quot;Ok&amp;quot; or call the help desk.&lt;/p&gt;
&lt;p&gt;Solution oriented error handling uses Python's existing
try/catch/finally idiom, with statement, assert statement and exception
hierarchy in a way that keeps the code clean and easy to maintain. It
gives a clear distinction between errors that can be solved by the end
user, the system administrator and the developer. Naming conventions and
a simple set of coding guidelines ensure that helpful error messages can
be easily derived from the code.&lt;/p&gt;
&lt;p&gt;Most code examples work with Python 2.6+ and Python 3.x, on a few
occasions minor differences are pointed out.&lt;/p&gt;
&lt;p&gt;Topics covered are:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Introduction to error handling in Python&lt;ul&gt;
&lt;li&gt;What are errors?&lt;/li&gt;
&lt;li&gt;How to represent errors in Python&lt;/li&gt;
&lt;li&gt;Detecting errors&lt;/li&gt;
&lt;li&gt;Delegating errors to the caller&lt;/li&gt;
&lt;li&gt;clean resource management&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Principles of solution oriented error handling&lt;ul&gt;
&lt;li&gt;responsibilities between user, admin and developer&lt;/li&gt;
&lt;li&gt;when to use raise or assert&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Error messages&lt;ul&gt;
&lt;li&gt;What are &amp;quot;good&amp;quot; error messages&lt;/li&gt;
&lt;li&gt;How to derive error messages from the source code&lt;/li&gt;
&lt;li&gt;Adding context to the error&lt;/li&gt;
&lt;li&gt;How to report errors to the user&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Solution oriented usage of Python's exception hierarchy&lt;ul&gt;
&lt;li&gt;admins fix &lt;tt class="docutils literal"&gt;EnvironmentError&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;users fix &lt;tt class="docutils literal"&gt;DataError&lt;/tt&gt;&lt;ul&gt;
&lt;li&gt;representing &lt;tt class="docutils literal"&gt;DataError&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;converting exceptions to &lt;tt class="docutils literal"&gt;DataError&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;developers fix everything else&lt;/li&gt;
&lt;li&gt;special Python exceptions not representing errors&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Template for a solution oriented command line application&lt;/li&gt;
&lt;li&gt;Best practices for &lt;tt class="docutils literal"&gt;raise&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;except&lt;/tt&gt;&lt;ul&gt;
&lt;li&gt;When to use &lt;tt class="docutils literal"&gt;raise&lt;/tt&gt;?&lt;/li&gt;
&lt;li&gt;When to use &lt;tt class="docutils literal"&gt;except&lt;/tt&gt;?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This talk is a translation of a German
&lt;a class="reference external" href="https://github.com/roskakori/talks/tree/master/pygraz/errorhandling"&gt;talk&lt;/a&gt;
given at the PyGRAZ user group and in a (slightly depythonized variant)
the Grazer Linux Tag 2013 (&lt;a class="reference external" href="http://glt13-programm.linuxtage.at/events/198.de.html"&gt;slides and
video&lt;/a&gt;).&lt;/p&gt;
</summary></entry></feed>