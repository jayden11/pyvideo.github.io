<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="http://pyvideo.org/" rel="alternate"></link><link href="http://pyvideo.org/feeds/speaker_michal-wysokinski.atom.xml" rel="self"></link><id>http://pyvideo.org/</id><updated>2016-10-14T00:00:00+00:00</updated><entry><title>Parallel Python</title><link href="http://pyvideo.org/pycon-pl-2016/parallel-python.html" rel="alternate"></link><published>2016-10-14T00:00:00+00:00</published><updated>2016-10-14T00:00:00+00:00</updated><author><name>Michał Wysokiński</name></author><id>tag:pyvideo.org,2016-10-14:pycon-pl-2016/parallel-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Many people believe that GIL completely rules out executing Python code
in parallel. It's true that GIL limits it to some extent, however the
rich ecosystem of Python modules not only allows that, but even offers
several ways of how it can be achieved. During the talk I will describe
these approaches together with their corresponding modules. I will also
briefly discuss when using parallelism in Python might be beneficial,
when to avoid it and what possible traps might be encountered during
parallel execution of Python code.&lt;/p&gt;
</summary></entry></feed>