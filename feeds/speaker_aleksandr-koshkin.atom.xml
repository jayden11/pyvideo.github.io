<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="http://pyvideo.org/" rel="alternate"></link><link href="http://pyvideo.org/feeds/speaker_aleksandr-koshkin.atom.xml" rel="self"></link><id>http://pyvideo.org/</id><updated>2016-07-04T00:00:00+00:00</updated><entry><title>Знай и люби свой CPython во имя луны и великой справедливости</title><link href="http://pyvideo.org/pycon-russia-2016/znai-i-liubi-svoi-cpython-vo-imia-luny-i-velikoi-spravedlivosti.html" rel="alternate"></link><published>2016-07-04T00:00:00+00:00</published><updated>2016-07-04T00:00:00+00:00</updated><author><name>Aleksandr Koshkin</name></author><id>tag:pyvideo.org,2016-07-04:pycon-russia-2016/znai-i-liubi-svoi-cpython-vo-imia-luny-i-velikoi-spravedlivosti.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Один из основополагающих способов узнавать новое — выводить старое за границы применимости. Достигая противоречия или получая абсурдные результаты, можно получить представление о более общих концепциях, что позволяет детализировать уже понятое и прикоснуться к неизвестному. В этот раз нечто подобное я постараюсь сделать с основной реализацией ЯП Python — CPython. Мы рассмотрим блоки, из которых сделан интерпретатор, поймем, как они взаимодействуют, вмешаемся в их работу на низком уровне и поймем, какой профит и проблемы из этого можно получить.&lt;/p&gt;
</summary></entry></feed>