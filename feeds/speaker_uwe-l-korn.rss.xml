<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>http://pyvideo.org/</link><description></description><lastBuildDate>Sun, 07 May 2017 00:00:00 +0000</lastBuildDate><item><title>Efficient and portable DataFrame storage with Apache Parquet</title><link>http://pyvideo.org/pydata-london-2017/efficient-and-portable-dataframe-storage-with-apache-parquet.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Filmed at PyData London 2017
www.pydata.org&lt;/p&gt;
&lt;p&gt;Description
Apache Parquet is the most used columnar data format in the big data processing space and recently gained Pandas support. It leverages various techniques to store data in a CPU and I/O efficient way and provides capabilities to push-down queries to the I/O layer. In this talk, it is shown how to use it in Python, detail its structure and present the portable usage with other tools.&lt;/p&gt;
&lt;p&gt;Abstract
Since its creation in 2013, Apache Parquet has risen to be the most widely used binary columnar storage format in the big data processing space. While supporting basic attributes of a columnar format like reading a subset of columns, it also leverages techniques to store the data efficiently while providing fast access. In addition the format is structured in such a fashion that when supplied to a query engine, Parquet provides indexing hints and statistics to quickly skip over chunks of irrelevant data.&lt;/p&gt;
&lt;p&gt;In recent months, efficient implementations to load and store Parquet files in Python became available, bringing the efficiency of the format to Pandas DataFrames. While this provides a new option to store DataFrames, it especially allows us to share data between Pandas and a lot of other popular systems like Apache Spark or Apache Impala. In this talk we will show the improvements that Parquet bring performance-wise but also will highlight important aspects of the format that make it portable and efficient for queries on large amount of data. As not all features are yet available in Python, an overview of the upcoming Python-specific improvements and how the Parquet format will be extended in general is given at the end of the talk&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Uwe L. Korn</dc:creator><pubDate>Sun, 07 May 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-05-07:pydata-london-2017/efficient-and-portable-dataframe-storage-with-apache-parquet.html</guid></item><item><title>How Apache Arrow and Parquet boost cross-language interop</title><link>http://pyvideo.org/pydata-paris-2016/how-apache-arrow-and-parquet-boost-cross-language-interop.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How Apache Arrow and Parquet boost cross-language interop
by Uwe L. Korn (Blue Yonder)&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Uwe L. Korn</dc:creator><pubDate>Tue, 14 Jun 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-06-14:pydata-paris-2016/how-apache-arrow-and-parquet-boost-cross-language-interop.html</guid></item></channel></rss>