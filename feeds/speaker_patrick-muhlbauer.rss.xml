<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>http://pyvideo.org/</link><description></description><lastBuildDate>Fri, 05 Aug 2016 00:00:00 +0000</lastBuildDate><item><title>Building nice command line interfaces - a look beyond the stdlib</title><link>http://pyvideo.org/europython-2015/building-nice-command-line-interfaces-a-look-beyond-the-stdlib.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Patrick M端hlbauer - Building nice command line interfaces - a look beyond the stdlib
[EuroPython 2015]
[22 July 2015]
[Bilbao, Euskadi, Spain]&lt;/p&gt;
&lt;p&gt;One of the problems programmers are most often faced with is the
parsing and validation of command-line arguments. If you're new to
Python or programming in general, you might start by parsing sys.argv.
Or perhaps you might've already come across standard library solutions
such as getopt, optparse or argparse in the official documentation.
While these modules are probably preferable to parsing sys.argv
yourself, you might wonder if there are more satisfactory solutions
outside of the standard library. Well, yes there are!&lt;/p&gt;
&lt;p&gt;This talk will give you an overview of some popular alternatives to
the standard library solutions (e.g. click, docopt and cliff), explain
their basic concepts and differences and show how you can test your
CLIs.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Patrick M端hlbauer</dc:creator><pubDate>Mon, 03 Aug 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-08-03:europython-2015/building-nice-command-line-interfaces-a-look-beyond-the-stdlib.html</guid></item><item><title>Split Up! Fighting the Monolith</title><link>http://pyvideo.org/europython-2016/split-up-fighting-the-monolith.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Patrick M端hlbauer - Split Up! Fighting the Monolith
[EuroPython 2016]
[22 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/split-up-fighting-the-monolith"&gt;https://ep2016.europython.eu//conference/talks/split-up-fighting-the-monolith&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Having to deal with a monolith, an application which became far to big
over the time, can be quite bothersome. On the other hand if you split
it up and have to deal with lots of smaller components, you might end
up in dependency hell. But not only the splitting of the monolith and
the management of the dependencies afterwards can be a problem, but
also the packaging of you python components itself.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Do you know this situation, where you and your team are facing this
big monolith? An application which has grown far too
big over the years. Every time when you make a change, you have to
fear the code might break at a totally different place, because lots
of things
are closely intertwined. But what to do if you are at such a point?
Maybe you start thinking about microservices but then questions like
&amp;quot;Are they really the right thing for us?&amp;quot; and &amp;quot;How do we get there?&amp;quot; arise.&lt;/p&gt;
&lt;p&gt;In my talk I will show you how we are dealing with our monolith. A
collection of multiple python packages without clear boundaries,
forming the
actual application - all living in a single monorepo.&lt;/p&gt;
&lt;p&gt;I will talk about how we split up the whole thing, making it more
flexible for us and also easier to use individual components by other
teams.
All this, of course, comes with a price: You have to think more about
the dependencies between you components. You have to think about how
you can efficiently test everything, making sure your final
application is still working correctly.
Don't loosing yourself in dependency hell and packaging all components
correctly becomes quite a challenge.&lt;/p&gt;
&lt;p&gt;This talk will:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;show you bad patterns to avoid, so that you don't end up in the above situation in the first place&lt;/li&gt;
&lt;li&gt;give you ideas what to consider when tackling your monolith&lt;/li&gt;
&lt;li&gt;explain how to package your python components and how to mange your dependencies&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Patrick M端hlbauer</dc:creator><pubDate>Fri, 05 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-05:europython-2016/split-up-fighting-the-monolith.html</guid></item></channel></rss>