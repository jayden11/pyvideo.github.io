<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>http://pyvideo.org/</link><description></description><lastBuildDate>Sat, 04 Feb 2017 00:00:00 +0000</lastBuildDate><item><title>Контроль за стилем кода</title><link>http://pyvideo.org/pycon-belarus-2015/kontrol-za-stilem-koda.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Стремление каждого разработчика ПО — писать код. Всё, что от этого кода
требуется — работать без ошибок и соответствовать задумке. Не секрет,
что для более-менее сложного продукта требуется объединить несколько
программистов в одну команду и заставить их работать вместе... И вот тут
начинаются проблемы: каждый пишет по-своему и затрудняется понять код
коллеги. Что в итоге? Падает эффективность, снижается качество продукта,
увеличивается время вхождения для новых разработчиков. Решить эти
проблемы помогает контроль за стилем кода. В этом докладе я расскажу про
то, какие практики вам могут пригодиться на выбранном пути и какие
средства для этого есть в экосистеме Python.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Кирилл Борисов</dc:creator><pubDate>Sat, 31 Jan 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-01-31:pycon-belarus-2015/kontrol-za-stilem-koda.html</guid></item><item><title>Python + Raspberry Pi GPIO</title><link>http://pyvideo.org/pycon-belarus-2017/python-raspberry-pi-gpio.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Несколько лет тому назад Интернет лихорадила тяга к Raspberry Pi,
одноплатному компьютеру от одноименного фонда. Многие покупали себе
&amp;quot;малинку&amp;quot; или её многочисленные клоны, вертели в руках и в лучшем случае
делали из неё домашний сервер. Но мало кто догадывался, что загадочный
разъем на этой плате хранит в себе потенциал для чего-то большего: от
моргания светодиодами до управления сервомоторами, подключения внешних
дисплеев и многого другого. Имя ему - GPIO, и в своем докладе я расскажу
про существующие библиотеки на Python, покажу примеры работы и
постараюсь ответить на ваши вопросы.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kirill Borisov</dc:creator><pubDate>Sat, 04 Feb 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-02-04:pycon-belarus-2017/python-raspberry-pi-gpio.html</guid></item><item><title>Behavior Driven Development in Python</title><link>http://pyvideo.org/pycon-russia-2014/behavior-driven-development-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;В докладе будет раскрыта суть behavior-driven подхода к разработке ПО: история возникновения, основы методологии, примеры сценариев, отличия от существующих подходов, имеющиеся инструменты для применения в Python-проектах. А так же опыт его внедрения, возникавшие проблемы и решения.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Кирилл Борисов</dc:creator><pubDate>Tue, 03 Jun 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-06-03:pycon-russia-2014/behavior-driven-development-in-python.html</guid></item><item><title>Автоматизированные рефакторинги: AST, FST и все-все-все</title><link>http://pyvideo.org/pycon-russia-2015/avtomatizirovannye-refaktoringi-ast-fst-i-vse-vse-vse.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Одна из самых неприятных вещей в работе программиста — рутина. К сожалению, её не избежать — работы по поддержке существующего кода заставляют нас вносить одинаковые изменения в несколько файлов разом. По мере роста проекта эта задача вырастает до десятков правок в сотнях файлов, заставляя даже самого терпеливого программиста задуматься о смысли бытия. Но что делать? Автоматизируйте это! В этом докладе мы расскажем о разных способах работать с исходным кодом из Python, и почему это весело.
В докладе:
- Всякую рутинную работу можно превратить в интересную задачу по автоматизации рутины;
- В «батарейках» Python можно найти достаточно средств для самостоятельного анализа исходного кода;
- Топорный подход с «find/replace» часто не подходит из-за необходимости учитывать контекст каждой конкретной правки, равно как и сохранять по возможности оформление исходного файла;
- Регулярные выражения _не_ подходят для разбора исходного кода на сложных языках программирования;
- Любая достаточно продвинутая программа неотличима от магии.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kirill Borisov</dc:creator><pubDate>Sat, 19 Sep 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-09-19:pycon-russia-2015/avtomatizirovannye-refaktoringi-ast-fst-i-vse-vse-vse.html</guid></item><item><title>Flame graph: новый взгляд на привычное профилирование</title><link>http://pyvideo.org/pycon-russia-2016/flame-graph-novyi-vzgliad-na-privychnoe-profilirovanie.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Все хотят знать, как выполняется их код. Многие догадываются, чем это можно измерить. И лишь немногие находят в себе силы продраться через результаты измерений. Проблема ещё более усложняется, если приложение исполняется в нескольких процессах, потоках или на разных серверах. Вал измерений захлестывает разработчика, и уже не видно конца...&lt;/p&gt;
&lt;p&gt;В этом докладе мы попытаемся упростить все это с помощью визуализации, а именно — flame graph'ов, красивых и наглядных . Также вместе рассмотрим процесс сбора данных, их подготовку и на примерах поучимся читать получившиеся графики.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kirill Borisov</dc:creator><pubDate>Mon, 04 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-07-04:pycon-russia-2016/flame-graph-novyi-vzgliad-na-privychnoe-profilirovanie.html</guid></item></channel></rss>