<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>http://pyvideo.org/</link><description></description><lastBuildDate>Sun, 21 May 2017 00:00:00 +0000</lastBuildDate><item><title>Asynchronous Python for the Complete Beginner</title><link>http://pyvideo.org/pycon-us-2017/asynchronous-python-for-the-complete-beginner.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;With the introduction of the asyncio package in Python 3.4, you can hear
lots of people talking about asynchronous programming, most in a
favorable way, some not so much. In this talk, I will tell you what this
async fever is about and what can it do for you that regular Python
can't, not only with asyncio, but also with other frameworks that
existed long before it.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Miguel Grinberg</dc:creator><pubDate>Sun, 21 May 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-05-21:pycon-us-2017/asynchronous-python-for-the-complete-beginner.html</guid></item><item><title>Microservices with Python and Flask</title><link>http://pyvideo.org/pycon-us-2017/microservices-with-python-and-flask.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Microservices are receiving the buzzword treatment these days, and as
such, they have a cloud of hype surrounding them that makes it hard to
separate substance from fluff. In this tutorial, Miguel Grinberg starts
with an introduction to this architecture, including what's great and
not so great about it, and then teaches you how a traditional monolithic
application written in Flask can be refactored into a modern distributed
system based on microservices.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Miguel Grinberg</dc:creator><pubDate>Wed, 17 May 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-05-17:pycon-us-2017/microservices-with-python-and-flask.html</guid></item><item><title>PyDX 2015: Creating a REST API with Python and Flask</title><link>http://pyvideo.org/pydx-2015/pydx-2015-creating-a-rest-api-with-python-and-flask.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyDX 2015 talk by Miguel Grinberg&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Miguel Grinberg</dc:creator><pubDate>Sat, 10 Oct 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-10-10:pydx-2015/pydx-2015-creating-a-rest-api-with-python-and-flask.html</guid></item><item><title>Flask at Scale</title><link>http://pyvideo.org/pycon-us-2016/miguel-grinberg-flask-at-scale-pycon-2016.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker: Miguel Grinberg&lt;/p&gt;
&lt;p&gt;Do you think that because Flask is a micro-framework, it must only be good for small, toy-like web applications? Well, not at all! In this tutorial I am going to show you a few patterns and best practices that can take your Flask application to the next level.&lt;/p&gt;
&lt;p&gt;Slides can be found at: &lt;a class="reference external" href="https://speakerdeck.com/pycon2016"&gt;https://speakerdeck.com/pycon2016&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/PyCon/2016-slides"&gt;https://github.com/PyCon/2016-slides&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Miguel Grinberg</dc:creator><pubDate>Sun, 29 May 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-05-29:pycon-us-2016/miguel-grinberg-flask-at-scale-pycon-2016.html</guid></item><item><title>Writing RESTful web services with Flask</title><link>http://pyvideo.org/pycon-us-2014/writing-restful-web-services-with-flask.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Flask is a web framework for Python based on Werkzeug, Jinja 2 and good
intentions. It is considered a micro-framework, but don't get the
&amp;quot;micro&amp;quot; part fool you; Flask can do everything the &amp;quot;others&amp;quot; can do, many
times in a simpler, leaner way. This session will introduce you to Flask
as an engine to build RESTful web services.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Miguel Grinberg</dc:creator><pubDate>Sun, 13 Apr 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-04-13:pycon-us-2014/writing-restful-web-services-with-flask.html</guid></item><item><title>Flask by Example</title><link>http://pyvideo.org/pycon-us-2014/flask-by-example.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Flask is a web framework for Python based on Werkzeug, Jinja 2 and good
intentions. It is considered a micro-framework, but don't get the
&amp;quot;micro&amp;quot; part fool you; Flask can do everything others can do, many times
in a simpler, leaner way. In this tutorial session you will follow me as
I write a complete web application in front of your eyes using the core
framework and a handful of extensions.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Miguel Grinberg</dc:creator><pubDate>Sat, 12 Apr 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-04-12:pycon-us-2014/flask-by-example.html</guid></item><item><title>Flask Workshop</title><link>http://pyvideo.org/pycon-us-2015/flask-workshop.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Flask is a web framework for Python based on Werkzeug, Jinja 2 and good
intentions. It is considered a micro-framework, but don't get the
&amp;quot;&amp;quot;micro&amp;quot;&amp;quot; part fool you; Flask can do everything others can do, many
times in a simpler, leaner way. In this tutorial session we will build a
web application together. Bring your laptop and your questions!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Miguel Grinberg</dc:creator><pubDate>Sat, 11 Apr 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-04-11:pycon-us-2015/flask-workshop.html</guid></item><item><title>Is Your REST API RESTful?</title><link>http://pyvideo.org/pycon-us-2015/is-your-rest-api-restful.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Writing a fully complaint REST API is hard, so hard it is too common for
APIs to violate one or more of the REST architectural principles. In
this talk I will describe the six REST principles, and I will tell you
what happens if you don't follow them.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Miguel Grinberg</dc:creator><pubDate>Sat, 11 Apr 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-04-11:pycon-us-2015/is-your-rest-api-restful.html</guid></item></channel></rss>