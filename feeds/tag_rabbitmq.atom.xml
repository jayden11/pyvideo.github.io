<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="http://pyvideo.org/" rel="alternate"></link><link href="http://pyvideo.org/feeds/tag_rabbitmq.atom.xml" rel="self"></link><id>http://pyvideo.org/</id><updated>2012-10-30T00:00:00+00:00</updated><entry><title>Massaging the Pony: Message Queues and You</title><link href="http://pyvideo.org/djangocon-2010/djangocon-2010--massaging-the-pony--message-queue.html" rel="alternate"></link><published>2010-09-09T00:00:00+00:00</published><updated>2010-09-09T00:00:00+00:00</updated><author><name>Shawn Rider</name></author><id>tag:pyvideo.org,2010-09-09:djangocon-2010/djangocon-2010--massaging-the-pony--message-queue.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Message queues are a potential solution for any site that needs to
facilitate robust asynchronous operations on your website including
carrying out intensive or long-running actions or synchronizing off-site
services. We will look at how PBS has used Celery and RabbitMQ to
provide more reliable service and how to set up a robust message queue
solution in a cloud hosting environment.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;In maintaining several different site projects written in Django over
the past four years, the PBS Education team repeatedly found the need
for the ability to create asynchronous processes that could handle
long-running actions and mission-critical synchronization. We needed a
way to handle tasks such as generating reports on large data sets and
executing remote processes on fussy third-party services. The clear
solution to the problems we encountered was to implement a robust
message queue solution.&lt;/p&gt;
&lt;p&gt;Message queues allow sites to execute processes outside the normal HTTP
request cycle and then deliver the results of those processes in a
variety of ways. After a survey of all available message queue solutions
we settled on a combination of Celery and RabbitMQ to create a reliable,
always-available system that can handle mission-critical tasks. We can
easily develop against a message queue in our development builds, and we
have an infrastucture based in a cloud hosting service that allows us to
rely on the message queue without reservation.&lt;/p&gt;
&lt;p&gt;In this talk will will look at what a message queue does for your site,
how to implement a message queue in your Django code, and how to set up
a reliable message queue infrastructure on your servers. We will show
examples from some of our sites at PBS so it is clear how message queues
work and to present some common use cases that warrant a message queue
solution. We will also discuss some of the design patterns that made it
easy to switch to message queue based processing for discreet tasks, as
well as some of the things we learned that have made the solution even
easier to implement for new tasks.&lt;/p&gt;
</summary><category term="celery"></category><category term="djangocon"></category><category term="djangocon2010"></category><category term="messagequeues"></category><category term="queues"></category><category term="rabbitmq"></category></entry><entry><title>Playing tasks with Django-Celery</title><link href="http://pyvideo.org/europython-2011/playing-tasks-with-django-celery.html" rel="alternate"></link><published>2011-07-21T00:00:00+00:00</published><updated>2011-07-21T00:00:00+00:00</updated><author><name>Mauro Rocco</name></author><id>tag:pyvideo.org,2011-07-21:europython-2011/playing-tasks-with-django-celery.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Mauro Rocco - 22 June 2011 in &amp;quot;Track Tagliatelle &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Celery is an open source task queueing system based on distributed
message passing.&lt;/p&gt;
&lt;p&gt;I will talk about the tools that Celery offers for task distribution and
how to monitor and manage the system using a Django web interface. This
talk will also focus on how we use Celery at Jamendo and our real
solutions to some common issues you may encounter when developing a
back-office based on Celery.&lt;/p&gt;
&lt;p&gt;The talk will cover the following topics:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A brief overview of Celery and the AMPQ protocol AMPQ protocol
overview, Celery introduction: Celery, RabbitMQ code examples&lt;/li&gt;
&lt;li&gt;The impact of Celery on the Jamendo work-flow; examples with real
tasks. Here I will talk about the Jamendo back-office infrastructure
and some of our common tasks. I will discuss the improvements made by
introducing a new back-office system based on Celery. I will show
some code snippets and go over some real scenarios.&lt;/li&gt;
&lt;li&gt;Overview of the Django Celery admin interface and some Jamendo
extensions. Let's talk about the Django-Celery interface that allows
one to monitor or schedule tasks directly from the Django admin. I
will explain which common additional features are necessary and how
to add them.&lt;/li&gt;
&lt;li&gt;Common &amp;quot;gotchas&amp;quot; we encountered while working with Celery and how we
solved them.&lt;/li&gt;
&lt;li&gt;Global task locks&lt;/li&gt;
&lt;li&gt;Centralized logging: be able to read all the logs of all celery
workers on different servers and filter them for real-time debugging&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="celery"></category><category term="distributed"></category><category term="django"></category><category term="infrastructure"></category><category term="queueing"></category><category term="rabbitmq"></category><category term="real-time"></category><category term="web"></category></entry><entry><title>Echtzeit Browsergames</title><link href="http://pyvideo.org/pycon-de-2012/echtzeit-browsergames.html" rel="alternate"></link><published>2012-10-30T00:00:00+00:00</published><updated>2012-10-30T00:00:00+00:00</updated><author><name>Michael P. Jung</name></author><id>tag:pyvideo.org,2012-10-30:pycon-de-2012/echtzeit-browsergames.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Mit gevent und browserseitigem JavaScript können Mehrspieler
Browsergames entwickelt werden, die Spielerinteraktionen in Echtzeit
zulassen. Dieser Vortrag versucht Lust auf das Echtzeit Web zu machen
und zeigt anhand eines konkreten Spieles (KODEX, &lt;a class="reference external" href="http://kodexgame.com/"&gt;http://kodexgame.com/&lt;/a&gt;)
Lösungen für Entwicklung, Hosting und Vertrieb auf.&lt;/p&gt;
&lt;p&gt;Der Vortrag beleuchtet neben den Implikationen des Realtime Web wie
Caching, Scaling, Same-Origin-Policy und Cross-Origin-Resource-Sharing
auch Strategien zur horizontalen Skalierbarkeit, oder: Wie löst man das
&lt;a class="reference external" href="http://www.kegel.com/c10k.html"&gt;C10K&lt;/a&gt; Problem?&lt;/p&gt;
&lt;p&gt;Während NodeJS oft als &lt;em&gt;die&lt;/em&gt; Lösung für Echtzeitanwendungen angepriesen
wird, kommt hier auf der Serverseite gezielt Python mit gevent zum
Einsatz.&lt;/p&gt;
</summary><category term="django"></category><category term="echtzeit"></category><category term="game"></category><category term="gevent"></category><category term="javascript"></category><category term="python"></category><category term="rabbitmq"></category><category term="realtime"></category><category term="socketio"></category><category term="spiel"></category></entry></feed>