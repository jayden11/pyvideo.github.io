<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="http://pyvideo.org/" rel="alternate"></link><link href="http://pyvideo.org/feeds/speaker_andrey-syschikov.atom.xml" rel="self"></link><id>http://pyvideo.org/</id><updated>2015-08-06T00:00:00+00:00</updated><entry><title>Practical usage of advanced Python constructs</title><link href="http://pyvideo.org/europython-2015/practical-usage-of-advanced-python-constructs.html" rel="alternate"></link><published>2015-08-06T00:00:00+00:00</published><updated>2015-08-06T00:00:00+00:00</updated><author><name>Andrey Syschikov</name></author><id>tag:pyvideo.org,2015-08-06:europython-2015/practical-usage-of-advanced-python-constructs.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Andrey Syschikov - Practical usage of advanced Python constructs
[EuroPython 2015]
[24 July 2015]
[Bilbao, Euskadi, Spain]&lt;/p&gt;
&lt;p&gt;Python is a language of choice for developers with wide range of
experience, for some it is a first programming language, others switch
to Python after years of experience. Python provides friendly syntax
and smooth learning curve. This sometimes leads to developers lacking
comprehension of some more advanced constructs.&lt;/p&gt;
&lt;p&gt;It happens that experienced developers jump into using Python and
sometimes miss less known Python language constructs. On the other
hands people who purposefully learned Python sometimes lack practical
ideas for how to apply those constructs.&lt;/p&gt;
&lt;p&gt;This talk will be specifically focused on the practical usages of
advanced Python constructs like iterators, generators, decorators and
context managers. Goal of the talk is to share ideas about how those
constructs can be used for practical purposes in real projects. Prior
knowledge is not required, there will be a brief introduction to every
construct being presented.&lt;/p&gt;
</summary></entry></feed>