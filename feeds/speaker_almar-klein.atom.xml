<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="http://pyvideo.org/" rel="alternate"></link><link href="http://pyvideo.org/feeds/speaker_almar-klein.atom.xml" rel="self"></link><id>http://pyvideo.org/</id><updated>2016-07-14T00:00:00+00:00</updated><entry><title>Running (snippets of) Python in the browser</title><link href="http://pyvideo.org/pydata-amsterdam-2016/running-snippets-of-python-in-the-browser.html" rel="alternate"></link><published>2016-03-26T00:00:00+00:00</published><updated>2016-03-26T00:00:00+00:00</updated><author><name>Almar Klein</name></author><id>tag:pyvideo.org,2016-03-26:pydata-amsterdam-2016/running-snippets-of-python-in-the-browser.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData Amsterdam 2016&lt;/p&gt;
&lt;p&gt;In this talk, we’ll start with an overview of solutions to run Python in the browser. Then we’ll explain how our solution (PyScript) works and what its advantages/disadvantages are. Next, we’ll demonstrate its use in a few real-world projects.&lt;/p&gt;
&lt;p&gt;It is evident that “the web” is becoming an increasingly important place to publish research findings. Apart from the obvious advantage of being able to reach a wide audience at negligible cost, browser technology allows for increasingly sophisticated means to present your data and findings in various interactive ways.&lt;/p&gt;
&lt;p&gt;Unfortunately, the language of the web (JavaScript) is a language that is notorious for its many flaws. It seems that Pythonistas are especially repelled by the language, since the number of projects that try to “run Python in the browser” is steadily growing.&lt;/p&gt;
&lt;p&gt;In our approach (PyScript), we do not aim to run the full Python language in the browser. It’s rather a way to write JavaScript using a Python syntax, making it as Pythonic as we can. There are a few pitfalls, but these have been reduced over time, which makes writing PyScript feel almost like writing Python.&lt;/p&gt;
&lt;p&gt;One advantage of our approach is that one can generate snippets of JavaScript code that can interact as-is with other JavaScript libraries. Combined with the fact that PyScript is valid Python, it allows for a natural way to define client-side reactivity inside common Python modules. Also, it makes PyScript faster than most other Python-in-the-browser solutions.&lt;/p&gt;
&lt;p&gt;One of its use-cases is Bokeh’s new capability to define client-side callbacks in Python. There are plans to use a similar approach to allow users to define custom Bokeh models. The Flexx project is a pure Python widget toolkit, that renders in the browser. All widgets are implemented with PyScript (wrapping PhosphorJS for some layouts). In a project with Clinical Graphics, PyScript is used in a system that allows visualization and user-annotations of medical images, with plans for 3D visualizations.&lt;/p&gt;
&lt;p&gt;Slides available here: &lt;a class="reference external" href="https://docs.google.com/presentation/d/1X069udByOTw3d4-NVU14XwhTANCdECvjY0R7fDuXTpA/pub?start=false&amp;amp;loop=false&amp;amp;delayms=3000"&gt;https://docs.google.com/presentation/d/1X069udByOTw3d4-NVU14XwhTANCdECvjY0R7fDuXTpA/pub?start=false&amp;amp;loop=false&amp;amp;delayms=3000&lt;/a&gt;&lt;/p&gt;
</summary><category term="pyscript"></category></entry><entry><title>A Pure Python GUI Tookit Based on Web Technology</title><link href="http://pyvideo.org/euroscipy-2015/a-pure-python-gui-tookit-based-on-web-technology.html" rel="alternate"></link><published>2015-10-05T00:00:00+00:00</published><updated>2015-10-05T00:00:00+00:00</updated><author><name>Almar Klein</name></author><id>tag:pyvideo.org,2015-10-05:euroscipy-2015/a-pure-python-gui-tookit-based-on-web-technology.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk describes a cross-platform, pure Python toolkit for creating graphical user interfaces (GUI's), that uses web technology for its rendering. You can use it to create desktop applications, web apps, and add widgets to the IPython/Jupyter notebook.&lt;/p&gt;
</summary></entry><entry><title>Running Python Apps in the Browser</title><link href="http://pyvideo.org/scipy-2016/running-python-apps-in-the-browser-almar-klein-scipy-2016.html" rel="alternate"></link><published>2016-07-14T00:00:00+00:00</published><updated>2016-07-14T00:00:00+00:00</updated><author><name>Almar Klein</name></author><id>tag:pyvideo.org,2016-07-14:scipy-2016/running-python-apps-in-the-browser-almar-klein-scipy-2016.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The web is becoming an increasingly important place to publish research findings, but JavaScript is a language that is broken by design, and Pythonistas seem particularly repelled by the language.&lt;/p&gt;
&lt;p&gt;Flexx is a tool to create web apps, for which the client-side is completely implemented in Python and transpiled to JavaScript. It’s easy to extend Flexx’ functionality by writing Python classes, which will be demonstrated in this talk.&lt;/p&gt;
</summary><category term="flexx"></category></entry><entry><title>Introducing Vispy's high level modules: easy, powerful visualization</title><link href="http://pyvideo.org/euroscipy-2014/introducing-vispys-high-level-modules-easy-pow.html" rel="alternate"></link><published>2014-10-22T00:00:00+00:00</published><updated>2014-10-22T00:00:00+00:00</updated><author><name>Almar Klein</name></author><id>tag:pyvideo.org,2014-10-22:euroscipy-2014/introducing-vispys-high-level-modules-easy-pow.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Vispy is an OpenGL-based interactive visualization library in Python.
Its goal is to make it easy to create beautiful and fast dynamic
visualizations. For example, scientific plotting of tens of millions of
points, interacting with complex polygonial models, and (dynamic) volume
rendering.&lt;/p&gt;
&lt;p&gt;Vispy is a young library and very actively developed. Until recently, a
user would have to know OpenGL in order to work with Vispy. Now that the
higher levels of the package take shape, this is no longer the case.
When these layers are finalized, the number of people that can benefit
from vispy will significantly increase.&lt;/p&gt;
&lt;p&gt;We will give a brief overview of the Vispy package, and focus on the
higher level modules that will make it easy to visualize images, lines,
etc., and organize these object in a scene graph. Of course we will
demonstrate this with several examples.&lt;/p&gt;
&lt;p&gt;We will also talk about our progress in other areas, such as a browser
backend and integration with the IPython notebook.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://vispy.org/"&gt;http://vispy.org/&lt;/a&gt;&lt;/p&gt;
</summary></entry></feed>