<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="http://pyvideo.org/" rel="alternate"></link><link href="http://pyvideo.org/feeds/speaker_ned-batchelder.atom.xml" rel="self"></link><id>http://pyvideo.org/</id><updated>2016-06-09T00:00:00+00:00</updated><entry><title>Machete-mode debugging: Hacking your way out of a tight spot</title><link href="http://pyvideo.org/pycon-us-2016/ned-batchelder-machete-mode-debugging-hacking-your-way-out-of-a-tight-spot-pycon-2016.html" rel="alternate"></link><published>2016-06-09T00:00:00+00:00</published><updated>2016-06-09T00:00:00+00:00</updated><author><name>Ned Batchelder</name></author><id>tag:pyvideo.org,2016-06-09:pycon-us-2016/ned-batchelder-machete-mode-debugging-hacking-your-way-out-of-a-tight-spot-pycon-2016.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker: Ned Batchelder&lt;/p&gt;
&lt;p&gt;When chasing mysterious bugs, it's helpful to use all the tools at your disposal.  We'll explore ways to use Python's dynamic tools to help track down the cause of head-scratching problems in large systems.  Tools include the inspect module, monkey-patching, trace functions, and the Python mechanisms at work behind them all.&lt;/p&gt;
&lt;p&gt;Slides can be found at: &lt;a class="reference external" href="https://speakerdeck.com/pycon2016"&gt;https://speakerdeck.com/pycon2016&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/PyCon/2016-slides"&gt;https://github.com/PyCon/2016-slides&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>PyCon 2009: A Whirlwind Excursion through Writing a C Extension (#68)</title><link href="http://pyvideo.org/pycon-us-2009/pycon-2009--a-whirlwind-excursion-through-writing.html" rel="alternate"></link><published>1990-01-01T00:00:00+00:00</published><updated>1990-01-01T00:00:00+00:00</updated><author><name>Ned Batchelder</name></author><id>tag:pyvideo.org,1990-01-01:pycon-us-2009/pycon-2009--a-whirlwind-excursion-through-writing.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;[VIDEO HAS ISSUES: Ambient mic used, some echoing] Everyone's heard of C
extensions to Python, but few have ventured into those murky depths.
This is a quick overview of how to write a C extension, complete with
highlights of the C API, memory management, error handling, and type
creation. Whether you want to speed up your Python, integrate with
legacy code, contribute to Python's core, or just learn a little about
how it all works under the covers, you will enjoy this trip through
unfamiliar territory. I guarantee you will return safely.&lt;/p&gt;
</summary><category term="extensions"></category><category term="pycon"></category><category term="pycon2009"></category><category term="python-advanced"></category></entry><entry><title>Tests and Testability (#188)</title><link href="http://pyvideo.org/pycon-us-2010/pycon-2010--tests-and-testability---188.html" rel="alternate"></link><published>2010-02-19T00:00:00+00:00</published><updated>2010-02-19T00:00:00+00:00</updated><author><name>Ned Batchelder</name></author><id>tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--tests-and-testability---188.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Tests and Testability&lt;/p&gt;
&lt;p&gt;Presented by Ned Batchelder&lt;/p&gt;
&lt;p&gt;Testing software is difficult. Large complex systems don't lend
themselves naturally to automated testing. This isn't just because they
are large, it's because developers often don't consider how testable
their code is. Testability is as important as all the other -ilities in
your code (portability, maintainability, efficiency, etc).&lt;/p&gt;
&lt;p&gt;Testability is a characteristic of your code that makes it easier to
test. Increased testability can give you better tests, but it also gives
you just plain better code. Improving testability generally means
considering the interfaces to your internal modules and improving them
to provide better modularity. This improvement often has benefits in
your product code.&lt;/p&gt;
&lt;p&gt;I'll discuss specific examples to demonstrate how code can be made more
testable. Mocks, dependency injection, and crisp API design are just a
few of the techniques that can improve your code's testability and make
you a happier person.&lt;/p&gt;
</summary><category term="pycon"></category><category term="pycon2010"></category><category term="testing"></category></entry><entry><title>Python-Aware Python</title><link href="http://pyvideo.org/pycon-us-2011/pycon-2011--python-aware-python.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Ned Batchelder</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--python-aware-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python-Aware Python&lt;/p&gt;
&lt;p&gt;Presented by Ned Batchelder&lt;/p&gt;
&lt;p&gt;Python provides many features for introspecting, analyzing, parsing,
compiling, and otherwise grokking Python code. This talk will cover a
number of the techniques for writing Python-Aware Python, and will
hopefully inspire you to build the next great Python tool.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Python provides many features for introspecting, analyzing, parsing,
compiling, and otherwise grokking Python code. These modules and
techniques provide the foundation for developer's tools such as
autocompletion IDE's, code analysis tools, test runners, profilers, and
so on.&lt;/p&gt;
&lt;p&gt;I'll delve into a number of the common techniques used to write
Python-Aware Python. Each has its area of applicability and its
strengths and weaknesses. I'll demonstrate small samples that show how
those techniques underlie the tools we all know and love.&lt;/p&gt;
&lt;p&gt;The world of Python tools is ready for new exploration. This talk will
give you the foundation you need to write the next great Python-aware
application.&lt;/p&gt;
</summary><category term="analysis"></category><category term="compiling"></category><category term="introspection"></category><category term="parsing"></category><category term="pycon"></category><category term="pycon2011"></category></entry><entry><title>Pragmatic Unicode, or, How do I stop the pain?</title><link href="http://pyvideo.org/pycon-us-2012/pragmatic-unicode-or-how-do-i-stop-the-pain.html" rel="alternate"></link><published>2012-03-10T00:00:00+00:00</published><updated>2012-03-10T00:00:00+00:00</updated><author><name>Ned Batchelder</name></author><id>tag:pyvideo.org,2012-03-10:pycon-us-2012/pragmatic-unicode-or-how-do-i-stop-the-pain.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Python has great Unicode support, but it's still your responsibility to
handle it properly. I'll do a quick overview of what Unicode is, but
only enough to get your program working properly. I'll describe
strategies to make your code work, and keep it working, without getting
too far afield in Unicode la-la- land.&lt;/p&gt;
</summary></entry><entry><title>XBlock: Courseware Components from edX</title><link href="http://pyvideo.org/pycon-us-2013/xblock-courseware-components-from-edx.html" rel="alternate"></link><published>2013-03-17T00:00:00+00:00</published><updated>2013-03-17T00:00:00+00:00</updated><author><name>Ned Batchelder</name></author><id>tag:pyvideo.org,2013-03-17:pycon-us-2013/xblock-courseware-components-from-edx.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;edX.org is building XBlock, an open-source component architecture for
courseware. It provides API's for creating course components of all
kinds. Possible uses include: simple controls, new types of problems,
new quiz structures, interactive simulations, and new navigation
techniques. We're hoping to expand awareness of XBlock, and also to hear
from potential users about their needs.&lt;/p&gt;
</summary><category term="poster"></category></entry><entry><title>Loop like a native: while, for, iterators, generators</title><link href="http://pyvideo.org/pycon-us-2013/loop-like-a-native-while-for-iterators-genera.html" rel="alternate"></link><published>2013-03-15T00:00:00+00:00</published><updated>2013-03-15T00:00:00+00:00</updated><author><name>Ned Batchelder</name></author><id>tag:pyvideo.org,2013-03-15:pycon-us-2013/loop-like-a-native-while-for-iterators-genera.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Python provides powerful primitives for iterating over your data in ways
that let you express yourself clearly and directly. But even programmers
familiar with the tools don't use them as fully as they could. This talk
will cover Python's iteration tools, from basic loops to generators and
how to add iteration to your own classes. Come learn how looping was
meant to be!&lt;/p&gt;
</summary><category term="talk"></category></entry><entry><title>Getting Started Testing</title><link href="http://pyvideo.org/pycon-us-2014/getting-started-testing.html" rel="alternate"></link><published>2014-04-13T00:00:00+00:00</published><updated>2014-04-13T00:00:00+00:00</updated><author><name>Ned Batchelder</name></author><id>tag:pyvideo.org,2014-04-13:pycon-us-2014/getting-started-testing.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;If you've never written tests before, you probably know you &lt;em&gt;should&lt;/em&gt;,
but view the whole process as a bureaucratic paperwork nightmare to
check off on your ready-to-ship checklist. This is the wrong way to
approach testing. Tests are a solution to a problem that is important to
you: does my code work? I'll show how Python tests are written, and why.&lt;/p&gt;
</summary></entry><entry><title>Facts and Myths about Python names and values</title><link href="http://pyvideo.org/pycon-us-2015/facts-and-myths-about-python-names-and-values.html" rel="alternate"></link><published>2015-04-11T00:00:00+00:00</published><updated>2015-04-11T00:00:00+00:00</updated><author><name>Ned Batchelder</name></author><id>tag:pyvideo.org,2015-04-11:pycon-us-2015/facts-and-myths-about-python-names-and-values.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The behavior of names and values in Python can be confusing. Like many
parts of Python, it has an underlying simplicity that can be hard to
discern, especially if you are used to other programming languages. Here
I'll explain how it all works, and present some facts and myths along
the way. Call-by-reference? Call-by-value? The answer will be clear!&lt;/p&gt;
</summary></entry></feed>