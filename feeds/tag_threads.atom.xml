<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="http://pyvideo.org/" rel="alternate"></link><link href="http://pyvideo.org/feeds/tag_threads.atom.xml" rel="self"></link><id>http://pyvideo.org/</id><updated>2010-02-19T00:00:00+00:00</updated><entry><title>Asynchronous vs. Threaded Python</title><link href="http://pyvideo.org/chipy/asynchronous-vs--threaded-python.html" rel="alternate"></link><published>2009-06-11T00:00:00+00:00</published><updated>2009-06-11T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,2009-06-11:chipy/asynchronous-vs--threaded-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Asynchronous vs. Threaded Python&lt;/p&gt;
&lt;p&gt;Presented at ChiPy by David Beazley on June 12th, 2009&lt;/p&gt;
&lt;p&gt;This is the opening act to Mindblowing GIL. Covers threading vs.
asynchronous programming in Python.&lt;/p&gt;
</summary><category term="asynchronous"></category><category term="chipy"></category><category term="gil"></category><category term="threads"></category></entry><entry><title>Sunday Afternoon Lightning Talks</title><link href="http://pyvideo.org/pycon-us-2010/pycon-2010--sunday-afternoon-lightning-talks.html" rel="alternate"></link><published>2010-02-19T00:00:00+00:00</published><updated>2010-02-19T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--sunday-afternoon-lightning-talks.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Plenary: Afternoon Lightning Talks&lt;/p&gt;
&lt;p&gt;(02:20) Steve Holden - Lightning talk about lightning talks&lt;/p&gt;
&lt;p&gt;(02:55) Michael Foord - Little Bit of Python podcast, upcoming unittest
stuff, mock&lt;/p&gt;
&lt;p&gt;(08:00) Harald Armin Massa - The real harm of functional programming&lt;/p&gt;
&lt;p&gt;(11:41) Karl ? - FreeBSD certiciation&lt;/p&gt;
&lt;p&gt;(13:50) Peter Fein - Please Pirate&lt;/p&gt;
&lt;p&gt;(19;15) Chris McDonough - writing books with Sphinx
(&lt;a class="reference external" href="http://bfg.repoze.org/book"&gt;repoze.bfg&lt;/a&gt;);
&lt;a class="reference external" href="https://www.createspace.com/"&gt;createspace&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;(22:05) Chris Petrilli - celery, distributed task queue&lt;/p&gt;
&lt;p&gt;(26:30) Godefroid Chapelle - vim and pdb&lt;/p&gt;
&lt;p&gt;(29:20) ? - fork() vs. threads&lt;/p&gt;
&lt;p&gt;(33:40) - doing pyweek game with a large number of contributors&lt;/p&gt;
&lt;p&gt;(38:05) Jason Huggins - Orbison&lt;/p&gt;
&lt;p&gt;(43:20) Noufal Brahim - State of Python community in India&lt;/p&gt;
&lt;p&gt;(47:40) Mike MÃ¼ller - EuroSciPy 2010&lt;/p&gt;
&lt;p&gt;(49:50) David gives away stuff, sprint intros, ...&lt;/p&gt;
</summary><category term="celery"></category><category term="euroscipy"></category><category term="euroscipy2010"></category><category term="fork"></category><category term="freebsd"></category><category term="functionalprogramming"></category><category term="india"></category><category term="orbison"></category><category term="pdb"></category><category term="pycon"></category><category term="pycon2010"></category><category term="pyweek"></category><category term="sphinx"></category><category term="threads"></category><category term="unittest"></category><category term="vim"></category></entry><entry><title>Understanding the Python GIL (#82)</title><link href="http://pyvideo.org/pycon-us-2010/pycon-2010--understanding-the-python-gil---82.html" rel="alternate"></link><published>2010-02-19T00:00:00+00:00</published><updated>2010-02-19T00:00:00+00:00</updated><author><name>David Beazley</name></author><id>tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--understanding-the-python-gil---82.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Understanding the Python GIL&lt;/p&gt;
&lt;p&gt;Presented by David Beazley&lt;/p&gt;
&lt;p&gt;The Python Global Interpreter Lock (GIL) is a frequent source of debate
and concern for programmers working with threads and concurrency.
Although most Python programmers generally know that the GIL restricts
Python's ability to utilize multiple CPUs, few know the inner details of
how it actually works and how it impacts applications. This talk will
dive into the inner workings of the GIL like you've never seen before.
Topics include details about the execution of the Python interpreter,
thread implementation, the GILs surprising behavior on multicore CPUs,
and more.&lt;/p&gt;
</summary><category term="concurrency"></category><category term="gil"></category><category term="pycon"></category><category term="pycon2010"></category><category term="threads"></category></entry></feed>