<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="http://pyvideo.org/" rel="alternate"></link><link href="http://pyvideo.org/feeds/tag_gpu.atom.xml" rel="self"></link><id>http://pyvideo.org/</id><updated>2011-07-21T00:00:00+00:00</updated><entry><title>Exploit your GPU power with PyCUDA (and friends)</title><link href="http://pyvideo.org/europython-2011/exploit-your-gpu-power-with-pycuda-and-friends.html" rel="alternate"></link><published>2011-07-21T00:00:00+00:00</published><updated>2011-07-21T00:00:00+00:00</updated><author><name>Stefano Brilli</name></author><id>tag:pyvideo.org,2011-07-21:europython-2011/exploit-your-gpu-power-with-pycuda-and-friends.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Stefano Brilli - 22 June 2011 in &amp;quot;Track Spaghetti&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;CUDA technology permits to exploit the power of modern NVIDIA GPUs. In
this talk, after a brief introduction to GPU architecture, we will focus
on how CUDA got inside Python through libraries like PyCUDA and others…&lt;/p&gt;
&lt;p&gt;By some examples we will show the main concepts and techniques for good
GPU programming.&lt;/p&gt;
&lt;p&gt;This talk targets anyone who wants to know how to exploit this
technology from Python, the suitable use cases, the using techniques and
the do-not-using techniques to get the best from his own GPU&lt;/p&gt;
</summary><category term="gpu"></category><category term="nvidia"></category><category term="pycuda"></category><category term="python,"></category><category term="technology"></category></entry><entry><title>Best Practices for Python in the Cloud</title><link href="http://pyvideo.org/europython-2011/best-practices-for-python-in-the-cloud.html" rel="alternate"></link><published>2011-07-18T00:00:00+00:00</published><updated>2011-07-18T00:00:00+00:00</updated><author><name>Gisle Aas</name></author><id>tag:pyvideo.org,2011-07-18:europython-2011/best-practices-for-python-in-the-cloud.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Gisle Aas - 21 June 2011 in &amp;quot;Track Lasagne&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Abstract: Whether you’re an independent developer or development manager
in a large company, “the cloud” is on everyone’s mind. But just because
it’s in the cloud, doesn’t mean development and deployment is
effortless. The cloud presents infrastructure and development challenges
in a new way.&lt;/p&gt;
&lt;p&gt;In this presentation, ActiveState's Gisle Aas will share best practices
in building and deploying a Python-centric LAMP stack(s) on the cloud
for a range of web-based applications from simple Django site to HPC GPU
Clusters.&lt;/p&gt;
&lt;p&gt;Based on ActiveState’s experiences, Gisle will discuss the challenges
faced and lessons learned in building an infrastructure to deploy web
applications to the cloud with Python.&lt;/p&gt;
&lt;p&gt;You will learn about:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Which packages are critical for a secure, Python-centric LAMP stack
(and what it takes to build them)!&lt;/li&gt;
&lt;li&gt;Tips for developing, deploying, and scaling Python applicaitons in
the cloud&lt;/li&gt;
&lt;li&gt;How to use Python to connect and build infrastructure to support and
manage your deployment&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="cloud"></category><category term="deploy"></category><category term="deployment"></category><category term="django"></category><category term="gpu"></category><category term="hpc"></category><category term="infrastructure"></category><category term="lamp"></category><category term="packages"></category><category term="scaling"></category><category term="web"></category></entry><entry><title>Python for High Performance and Scientific Computing</title><link href="http://pyvideo.org/europython-2011/python-for-high-performance-and-scientific-comput.html" rel="alternate"></link><published>2011-07-13T00:00:00+00:00</published><updated>2011-07-13T00:00:00+00:00</updated><author><name>Andreas Schreiber</name></author><id>tag:pyvideo.org,2011-07-13:europython-2011/python-for-high-performance-and-scientific-comput.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Andreas Schreiber - 23 June 2011 in &amp;quot;Track Lasagne&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python is an accepted high-level scripting language with a growing
community in academia and industry. It is used in a lot of scientific
applications in many different scientific fields and in more and more
industries, for example, in engineering or life science). In all fields,
the use of Python for high- performance and parallel computing is
increasing. Several organizations and companies are providing tools or
support for Python development. This includes libraries for scientific
computing, parallel computing, and MPI. Python is also used on many core
architectures and GPUs, for which specific Python interpreters are being
developed. A related topic is the performance of the various interpreter
and compiler implementations for Python. The talk gives an overview of
Python’s use in HPC and Scientific Computing and gives information on
many topics, such as Python on massively parallel systems, GPU
programming with Python, scientific libraries in Python, and Python
interpreter performance issues. The talk will include examples for
scientific codes and applications from many domains.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://bit.ly/k94rC4"&gt;Slides&lt;/a&gt;&lt;/p&gt;
</summary><category term="community"></category><category term="engineering"></category><category term="gpu"></category><category term="hpc"></category><category term="interpreters"></category><category term="parallel"></category><category term="performance"></category><category term="python,"></category><category term="scientific"></category></entry><entry><title>Sfrutta la potenza della GPU con PyCUDA (e compagni)</title><link href="http://pyvideo.org/europython-2011/sfrutta-la-potenza-della-gpu-con-pycuda-e-compag.html" rel="alternate"></link><published>2011-07-13T00:00:00+00:00</published><updated>2011-07-13T00:00:00+00:00</updated><author><name>Stefano Brilli</name></author><id>tag:pyvideo.org,2011-07-13:europython-2011/sfrutta-la-potenza-della-gpu-con-pycuda-e-compag.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Stefano Brilli - 22 June 2011 in &amp;quot;Track Italiana Big
Mac &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;CUDA è una tecnologia che permette di sfruttare la potenza di calcolo
delle moderne schede video prodotte da NVIDIA. In questo talk, dopo una
breve introduzione all'architettura della GPU, si vedrà come CUDA entra
all'interno di Python attraverso librerie come PyCUDA e non solo…&lt;/p&gt;
&lt;p&gt;Mediante alcuni esempi si metteranno in luce i concetti e le pratiche
fondamentali per una buona programmazione della GPU.&lt;/p&gt;
&lt;p&gt;Il talk è rivolto a chiunque voglia conoscere come sfruttare questa
tecnologia all'interno di Python, i casi in cui è conveniente
utilizzarla, le pratiche da adottare e le pratiche da non adottare per
trarre il massimo dalla propria GPU.&lt;/p&gt;
</summary><category term="gpu"></category><category term="pycuda"></category><category term="python,"></category></entry><entry><title>Python for High Performance Computing</title><link href="http://pyvideo.org/pycon-us-2011/pycon-2011--python-for-high-performance-computing.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>William Scullin</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--python-for-high-performance-computing.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python for High Performance Computing&lt;/p&gt;
&lt;p&gt;Presented by William Scullin&lt;/p&gt;
&lt;p&gt;Python is becoming increasingly popular within the high performance
computing community. While it initially gained traction as a scripting
language, Python's role has continued to expand with Python applications
for science scaling to hundreds of thousands of cores and bindings to
high performance libraries becoming commonplace. This talk is meant as
an overview of Python's role in the HPC space.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;This talk is focused on raising awareness of Python in the high
performance computing space. Specific topics include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;building the Python interpreter for speed&lt;/li&gt;
&lt;li&gt;an overview of bindings to numerical libraries&lt;/li&gt;
&lt;li&gt;using GPUs and accelerators with Python&lt;/li&gt;
&lt;li&gt;scaling codes with MPI&lt;/li&gt;
&lt;li&gt;issues when scaling on very large systems&lt;/li&gt;
&lt;li&gt;an overview of successful science codes&lt;/li&gt;
&lt;li&gt;a live demonstration of Python running on 163,840 cores&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="gpu"></category><category term="highperformancecomputing"></category><category term="hpc"></category><category term="mpi"></category><category term="pycon"></category><category term="pycon2011"></category></entry></feed>