<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="http://pyvideo.org/" rel="alternate"></link><link href="http://pyvideo.org/feeds/speaker_larry-hastings.atom.xml" rel="self"></link><id>http://pyvideo.org/</id><updated>2017-05-19T00:00:00+00:00</updated><entry><title>The Gilectomy: How's It Going?</title><link href="http://pyvideo.org/pycon-us-2017/the-gilectomy-hows-it-going.html" rel="alternate"></link><published>2017-05-19T00:00:00+00:00</published><updated>2017-05-19T00:00:00+00:00</updated><author><name>Larry Hastings</name></author><id>tag:pyvideo.org,2017-05-19:pycon-us-2017/the-gilectomy-hows-it-going.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;One of the most interesting projects in Python today is Larry Hastings'
&amp;quot;Gilectomy&amp;quot; project: the removal of Python's Global Interpreter Lock, or
&amp;quot;GIL&amp;quot;. Come for an up-to-the-minute status report: what's been tried,
what has and hasn't worked, and what performance is like now.&lt;/p&gt;
</summary></entry><entry><title>Python's Infamous GIL</title><link href="http://pyvideo.org/pycon-ireland-2015/pythons-infamous-gil.html" rel="alternate"></link><published>2015-10-24T00:00:00+00:00</published><updated>2015-10-24T00:00:00+00:00</updated><author><name>Larry Hastings</name></author><id>tag:pyvideo.org,2015-10-24:pycon-ireland-2015/pythons-infamous-gil.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;You’ve heard about Python’s GIL. But what is it really? What does it do, both good and bad?&lt;/p&gt;
&lt;p&gt;Come learn all about the Python GIL. You’ll learn about its history, all the problems it solves, all the problems it causes (that we know about!), and what it would take to remove the GIL.&lt;/p&gt;
&lt;p&gt;Attendees should be familiar with the terrors inherent in multithreaded programming, and be comfortable with a little C code in the slides.&lt;/p&gt;
</summary></entry><entry><title>Try A Little Randomness</title><link href="http://pyvideo.org/pycon-uk-2014/try-a-little-randomness.html" rel="alternate"></link><published>2014-10-13T00:00:00+00:00</published><updated>2014-10-13T00:00:00+00:00</updated><author><name>Larry Hastings</name></author><id>tag:pyvideo.org,2014-10-13:pycon-uk-2014/try-a-little-randomness.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Presented by: Larry Hastings&lt;/p&gt;
&lt;p&gt;This talk is all about random numbers--what are they? What different kinds are there? What are they useful for? And why are computers really bad at them? Come learn all about random numbers, both the good and the bad.&lt;/p&gt;
</summary></entry><entry><title>The PyCon UK Panel</title><link href="http://pyvideo.org/pycon-uk-2015/the-pycon-uk-panel.html" rel="alternate"></link><published>2015-09-20T00:00:00+00:00</published><updated>2015-09-20T00:00:00+00:00</updated><author><name>Michael Foord</name></author><id>tag:pyvideo.org,2015-09-20:pycon-uk-2015/the-pycon-uk-panel.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In the style of Question Time (or Gardeners' Question Time, but without the plants), PyCon UK's acting Chair Zeth chairs a panel of Python experts who each give an short overview of how they found the conference and then try to answer your questions about the future of Python, Software development and the meaning of life, the universe and everything.&lt;/p&gt;
</summary></entry><entry><title>Python's Infamous GIL</title><link href="http://pyvideo.org/pycon-uk-2015/pythons-infamous-gil.html" rel="alternate"></link><published>2015-09-18T00:00:00+00:00</published><updated>2015-09-18T00:00:00+00:00</updated><author><name>Larry Hastings</name></author><id>tag:pyvideo.org,2015-09-18:pycon-uk-2015/pythons-infamous-gil.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;You’ve heard about Python’s GIL. But what is it really? What does it do,
both good and bad?&lt;/p&gt;
&lt;p&gt;Come learn all about the Python GIL. You’ll learn about its history, all
the problems it solves, all the problems it causes (that we know
about!), and what it would take to remove the GIL.&lt;/p&gt;
&lt;p&gt;Attendees should be familiar with the terrors inherent in multithreaded
programming, and be comfortable with a little C code in the slides.&lt;/p&gt;
</summary></entry><entry><title>Python's Infamous GIL</title><link href="http://pyvideo.org/europython-2015/pythons-infamous-gil.html" rel="alternate"></link><published>2015-08-04T00:00:00+00:00</published><updated>2015-08-04T00:00:00+00:00</updated><author><name>Larry Hastings</name></author><id>tag:pyvideo.org,2015-08-04:europython-2015/pythons-infamous-gil.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Larry Hastings - Python's Infamous GIL
[EuroPython 2015]
[23 July 2015]
[Bilbao, Euskadi, Spain]&lt;/p&gt;
&lt;p&gt;You've heard about Python's GIL.  But what is it really?  What does it
do, both good and bad?&lt;/p&gt;
&lt;p&gt;Come learn all about the Python GIL.  You'll learn about its history,
all the problems it solves, all the problems it causes (that we know
about!), and what it would take to remove the GIL.&lt;/p&gt;
&lt;p&gt;Attendees should be familiar with the terrors inherent in
multithreaded programming, and be comfortable with a little C code in
the slides.&lt;/p&gt;
</summary></entry><entry><title>Core Developers' Panel</title><link href="http://pyvideo.org/europython-2016/core-developers-panel.html" rel="alternate"></link><published>2016-08-01T00:00:00+00:00</published><updated>2016-08-01T00:00:00+00:00</updated><author><name>Victor Stinner</name></author><id>tag:pyvideo.org,2016-08-01:europython-2016/core-developers-panel.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Victor Stinner/Larry Hastings/Christian Heimes/Yury Selivanov - Core Developers' Panel
[EuroPython 2016]
[20 July 2016]
[Bilbao, Euskadi, Spain]&lt;/p&gt;
&lt;p&gt;Q&amp;amp;A session with Python core developers&lt;/p&gt;
</summary></entry><entry><title>The Gilectomy</title><link href="http://pyvideo.org/europython-2016/the-gilectomy.html" rel="alternate"></link><published>2016-08-01T00:00:00+00:00</published><updated>2016-08-01T00:00:00+00:00</updated><author><name>Larry Hastings</name></author><id>tag:pyvideo.org,2016-08-01:europython-2016/the-gilectomy.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Larry Hastings - The Gilectomy
[EuroPython 2016]
[20 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/the-gilectomy"&gt;https://ep2016.europython.eu//conference/talks/the-gilectomy&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;CPython's GIL means your Python code can only run on one CPU core at a
time. Can we remove it? Yes, we can... in fact we already have! But is
it worth the cost?&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;CPython's &amp;quot;Global Interpreter Lock&amp;quot;, or &amp;quot;GIL&amp;quot;, was added in 1992. It
was an excellent design decision. But 24 years is a long time--today
it prevents Python from capitalizing on multiple CPUs. Many people
want us to remove the GIL.&lt;/p&gt;
&lt;p&gt;It turns out, removing the GIL isn't actually that hard. In fact, I
already removed it, in my experimental &amp;quot;gilectomy&amp;quot; branch. But the GIL
is one reason CPython is so fast! The &amp;quot;gilectomy&amp;quot; makes CPython
shockingly slow.&lt;/p&gt;
&lt;p&gt;This talk will discuss the history of the GIL, how the GIL helps make
CPython fast, how the &amp;quot;gilectomy&amp;quot; removed the GIL, and some ways we
might be able to make the &amp;quot;gilectomy&amp;quot; version fast enough to be
useful.&lt;/p&gt;
</summary></entry><entry><title>Lightning Talks 2016-07-18</title><link href="http://pyvideo.org/europython-2016/lightning-talks-2016-07-18.html" rel="alternate"></link><published>2016-07-28T00:00:00+00:00</published><updated>2016-07-28T00:00:00+00:00</updated><author><name>Harald Massa</name></author><id>tag:pyvideo.org,2016-07-28:europython-2016/lightning-talks-2016-07-18.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Various speakers - Lightning Talks
[EuroPython 2016]
[18 July 2016]
[Bilbao, Euskadi, Spain]&lt;/p&gt;
&lt;p&gt;Lightning talks, presented by Harald Massa&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Larry Hastings  - My life as a MEME&lt;/li&gt;
&lt;li&gt;Javier Domingo - Python exp!&lt;/li&gt;
&lt;li&gt;Danielle Procida - Python Adventures in Namibia&lt;/li&gt;
&lt;li&gt;Radomes Dopiralski - Win Fabulous Prizes&lt;/li&gt;
&lt;li&gt;Thomas Waldmann - Borg Backup&lt;/li&gt;
&lt;li&gt;Lasse Schuirmann - Cola - Lint and Fix All Code&lt;/li&gt;
&lt;li&gt;Tuna Vargi - argüman.org&lt;/li&gt;
&lt;li&gt;Harry Percival &amp;amp; Fabian Kreutz - Sponsored Massage Training, in Aid of The Python Software Foundation&lt;/li&gt;
&lt;li&gt;Michele Simionato - Thanks for the Python3 Statement&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="lightning talks"></category></entry><entry><title>Removing Python's GIL: The Gilectomy</title><link href="http://pyvideo.org/pycon-us-2016/larry-hastings-removing-pythons-gil-the-gilectomy-pycon-2016.html" rel="alternate"></link><published>2016-06-01T00:00:00+00:00</published><updated>2016-06-01T00:00:00+00:00</updated><author><name>Larry Hastings</name></author><id>tag:pyvideo.org,2016-06-01:pycon-us-2016/larry-hastings-removing-pythons-gil-the-gilectomy-pycon-2016.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker: Larry Hastings&lt;/p&gt;
&lt;p&gt;You've heard of Python's &amp;quot;&amp;quot;GIL&amp;quot;&amp;quot;... but what is it?  What problems does it solve?  How does it work?  What are the ramifications of its design?   Attendees should have a basic knowledge of multithreaded programming.  Understanding C is helpful but not required.&lt;/p&gt;
&lt;p&gt;Slides can be found at: &lt;a class="reference external" href="https://speakerdeck.com/pycon2016"&gt;https://speakerdeck.com/pycon2016&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/PyCon/2016-slides"&gt;https://github.com/PyCon/2016-slides&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Try A Little Randomness by Larry Hastings</title><link href="http://pyvideo.org/pycon-au-2014/try-a-little-randomness-by-larry-hastings.html" rel="alternate"></link><published>2014-08-09T00:00:00+00:00</published><updated>2014-08-09T00:00:00+00:00</updated><author><name>Larry Hastings</name></author><id>tag:pyvideo.org,2014-08-09:pycon-au-2014/try-a-little-randomness-by-larry-hastings.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk is all about random numbers--What are they? What different
kinds are there? What are they useful for? And why are computers really
bad at them? Come learn all about random numbers, both the good and the
bad.&lt;/p&gt;
</summary></entry><entry><title>Optimizations And Micro-Optimizations In CPython (#38)</title><link href="http://pyvideo.org/pycon-us-2010/pycon-2010--optimizations-and-micro-optimizations.html" rel="alternate"></link><published>2010-02-19T00:00:00+00:00</published><updated>2010-02-19T00:00:00+00:00</updated><author><name>Larry Hastings</name></author><id>tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--optimizations-and-micro-optimizations.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Optimizations and Micro-Optimizations in CPython&lt;/p&gt;
&lt;p&gt;Presented by Mr. Larry Hastings&lt;/p&gt;
&lt;p&gt;CPython mostly gets faster from one version to the next. And when
CPython gets faster, your programs get faster. This talk is a survey of
optimizations made to CPython, recent and historical, large and small.
Audience doesn't need to be familiar with CPython internals, but should
be familiar with Python and conversant in C.&lt;/p&gt;
&lt;p&gt;[VIDEO HAS ISSUES: Audio interference]&lt;/p&gt;
</summary><category term="cpython"></category><category term="optimization"></category><category term="pycon"></category><category term="pycon2010"></category></entry><entry><title>The Python That Wasn't</title><link href="http://pyvideo.org/pycon-us-2011/pycon-2011--the-python-that-wasn--39-t.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Larry Hastings</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--the-python-that-wasn--39-t.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Python That Wasn't&lt;/p&gt;
&lt;p&gt;Presented by Larry Hastings&lt;/p&gt;
&lt;p&gt;One reason for Python's success is its restraint in adding new language
features. Only the most essential changes make it--and for every change
that gets accepted, many more are rejected. Come learn about proposed
changes to the Python language that failed--what, how, and why.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Quick overview of the process&lt;ul&gt;
&lt;li&gt;First ten years: send GvR a patch&lt;/li&gt;
&lt;li&gt;The modern approach: python-ideas, write a PEP, produce a
reference implementation&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Discuss the &amp;quot;prickly&amp;quot; Python community&lt;ul&gt;
&lt;li&gt;This is a good thing! Only the best ideas survive the python-dev
gauntlet!&lt;/li&gt;
&lt;li&gt;They do this not because they're mean, but because they care so
much.&lt;/li&gt;
&lt;li&gt;We must have eternal vigilance to prevent unnecessary changes!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A survey of some changes that didn't make it&lt;ul&gt;
&lt;li&gt;The switch/case statement (PEP 3103)&lt;/li&gt;
&lt;li&gt;The &amp;quot;freeze protocol&amp;quot; (PEP 351)&lt;/li&gt;
&lt;li&gt;The &amp;quot;dynamic attribute access&amp;quot; proposal from python-dev, 2007/02&lt;/li&gt;
&lt;li&gt;Many more possibilities await in the rejected PEPs!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;My message to the audience&lt;ul&gt;
&lt;li&gt;Start with a post to python-ideas, please!&lt;/li&gt;
&lt;li&gt;Don't be surprised if you get a negative reaction&lt;/li&gt;
&lt;li&gt;Don't let your fear of a negative reaction stop you from trying,
necessarily&lt;/li&gt;
&lt;li&gt;Do your homework, and be your own worst critic&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="coredev"></category><category term="cpython"></category><category term="makingsausage"></category><category term="pycon"></category><category term="pycon2011"></category></entry><entry><title>Stepping Through CPython</title><link href="http://pyvideo.org/pycon-us-2012/stepping-through-cpython.html" rel="alternate"></link><published>2012-03-09T00:00:00+00:00</published><updated>2012-03-09T00:00:00+00:00</updated><author><name>Larry Hastings</name></author><id>tag:pyvideo.org,2012-03-09:pycon-us-2012/stepping-through-cpython.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Ever wondered how CPython actually works internally? This talk will show
you. We start with a simple Python program, then slowly step through
CPython, showing in exhaustive detail what happens when it runs that
program. Along the way we'll examine the design and implementation of
various major CPython subsystems and see how they fit together. The
audience should be conversant in C and Python.&lt;/p&gt;
</summary></entry><entry><title>All-Singing All-Dancing Python Bytecode</title><link href="http://pyvideo.org/pycon-us-2013/all-singing-all-dancing-python-bytecode.html" rel="alternate"></link><published>2013-03-16T00:00:00+00:00</published><updated>2013-03-16T00:00:00+00:00</updated><author><name>Larry Hastings</name></author><id>tag:pyvideo.org,2013-03-16:pycon-us-2013/all-singing-all-dancing-python-bytecode.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;We all know Python is a bytecode interpreter, but what does that mean?
Come find out! You'll learn what Python bytecodes are, what they do, and
even how you can tinker with them. By the end of the talk you'll be an
expert. All code will be 100% Python 3--knowledge of C not required!&lt;/p&gt;
</summary><category term="talk"></category></entry><entry><title>PyConZA 2012: Stepping through CPython</title><link href="http://pyvideo.org/pycon-za-2012/pyconza-2012-stepping-through-cpython.html" rel="alternate"></link><published>2012-10-04T00:00:00+00:00</published><updated>2012-10-04T00:00:00+00:00</updated><author><name>Larry Hastings</name></author><id>tag:pyvideo.org,2012-10-04:pycon-za-2012/pyconza-2012-stepping-through-cpython.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Stepping through CPython: Larry Hastings' talk at PyConZA 2012&lt;/p&gt;
</summary><category term="pyconza"></category><category term="pyconza2012"></category></entry><entry><title>All-Singing All-Dancing Python Bytecode</title><link href="http://pyvideo.org/pycon-za-2013/all-singing-all-dancing-python-bytecode-0.html" rel="alternate"></link><published>2013-10-03T00:00:00+00:00</published><updated>2013-10-03T00:00:00+00:00</updated><author><name>Larry Hastings</name></author><id>tag:pyvideo.org,2013-10-03:pycon-za-2013/all-singing-all-dancing-python-bytecode-0.html</id><summary type="html"></summary><category term="pyconza"></category><category term="pyconza2013"></category></entry></feed>