<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="http://pyvideo.org/" rel="alternate"></link><link href="http://pyvideo.org/feeds/speaker_aaron-meurer.atom.xml" rel="self"></link><id>http://pyvideo.org/</id><updated>2016-07-15T00:00:00+00:00</updated><entry><title>SymPy Code Generation</title><link href="http://pyvideo.org/scipy-2016/sympy-code-generation-scipy-2016-aaron-meurer.html" rel="alternate"></link><published>2016-07-15T00:00:00+00:00</published><updated>2016-07-15T00:00:00+00:00</updated><author><name>Aaron Meurer</name></author><id>tag:pyvideo.org,2016-07-15:scipy-2016/sympy-code-generation-scipy-2016-aaron-meurer.html</id><summary type="html"></summary><category term="SciPy 2016"></category><category term="sympy"></category></entry><entry><title>Symbolic Computation with Python using SymPy (Beginner)</title><link href="http://pyvideo.org/scipy-2016/symbolic-compution-with-python-using-sympy-beginner-scipy-2016-tutorial-ondrej-certik-et-al.html" rel="alternate"></link><published>2016-07-11T00:00:00+00:00</published><updated>2016-07-11T00:00:00+00:00</updated><author><name>Ondřej Čertík</name></author><id>tag:pyvideo.org,2016-07-11:scipy-2016/symbolic-compution-with-python-using-sympy-beginner-scipy-2016-tutorial-ondrej-certik-et-al.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Materials for this tutorial are found here: &lt;a class="reference external" href="https://github.com/sympy/scipy-2016-tutorial"&gt;https://github.com/sympy/scipy-2016-tutorial&lt;/a&gt;&lt;/p&gt;
</summary><category term="SciPy 2016"></category><category term="tutorial"></category><category term="SymPy"></category></entry><entry><title>Symbolic Computing with SymPy, SciPy2013 Tutorial, Part 1 of 6</title><link href="http://pyvideo.org/scipy-2013/symbolic-computing-sympy-scipy2013-tutorial-part-1.html" rel="alternate"></link><published>1990-01-01T00:00:00+00:00</published><updated>1990-01-01T00:00:00+00:00</updated><author><name>Aaron Meurer</name></author><id>tag:pyvideo.org,1990-01-01:scipy-2013/symbolic-computing-sympy-scipy2013-tutorial-part-1.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;SymPy is a pure Python library for symbolic mathematics. It aims to
become a full-featured computer algebra system (CAS) while keeping the
code as simple as possible in order to be comprehensible and easily
extensible. SymPy is written entirely in Python and does not require any
external libraries.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this tutorial we will introduce attendees to SymPy. We will start by
showing how to install and configure this Python module. Then we will
proceed to the basics of constructing and manipulating mathematical
expressions in SymPy. We will also discuss the most common issues and
differences from other computer algebra systems, and how to deal with
them. In the last part of this tutorial we will show how to solve
simple, yet illustrative, mathematical problems with SymPy.&lt;/p&gt;
&lt;p&gt;This knowledge should be enough for attendees to start using SymPy for
solving mathematical problems and hacking SymPy's internals (though
hacking core modules may require additional expertise).&lt;/p&gt;
&lt;p&gt;We expect attendees of this tutorial to have basic knowledge of Python
and mathematics. However, any more advanced topics will be explained
during presentation.&lt;/p&gt;
&lt;p&gt;Outline&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;installing, configuring and running SymPy&lt;/li&gt;
&lt;li&gt;basics of expressions in SymPy&lt;/li&gt;
&lt;li&gt;traversal and manipulation of expressions&lt;/li&gt;
&lt;li&gt;common issues and differences from other CAS&lt;/li&gt;
&lt;li&gt;setting up and using printers&lt;/li&gt;
&lt;li&gt;querying expression properties&lt;/li&gt;
&lt;li&gt;not only symbolics: numerical computing (mpmath)&lt;/li&gt;
&lt;li&gt;Mathematical problem solving with SymPy&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Required Packages&lt;/p&gt;
&lt;p&gt;Python 2.x or 3.x, SymPy (most recent version) Optional packages:
IPython, matplotlib, NetworkX, GMPY, numpy, scipy&lt;/p&gt;
</summary><category term="mathematics"></category><category term="sympy"></category></entry><entry><title>Conda: A Cross Platform Package Manager for any Binary Distribution</title><link href="http://pyvideo.org/scipy-2014/conda-a-cross-platform-package-manager-for-any-b.html" rel="alternate"></link><published>2014-07-09T00:00:00+00:00</published><updated>2014-07-09T00:00:00+00:00</updated><author><name>Aaron Meurer</name></author><id>tag:pyvideo.org,2014-07-09:scipy-2014/conda-a-cross-platform-package-manager-for-any-b.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Conda is an open source package manager, which can be used to manage
binary packages and virtual environments on any platform. It is the
package manager of the Anaconda Python distribution, although it can be
used independently of Anaconda. We will look at how conda solves many of
the problems that have plagued Python packaging in the past, followed by
a demonstration of its features.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We will look at the issues that have plagued packaging in the Python
ecosystem in the past, and discuss how Conda solves these problems. We
will show how to use conda to manage multiple environments. Finally, we
will look at how to build your own conda packages.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;What is the packaging problem? We will briefly look at the history of
the problem and the various solutions to it. There are two sides to
the packaging problem: the problem of installing existing packages
and the problem of building packages to be installed. We look at the
history of distutils, setuptools, distribute, and pip, the some of
the problems they solved, and issues that arose, particularly for the
scientific Python community.&lt;/li&gt;
&lt;li&gt;We will look at the conda package format, the design decisions that
guided the format, and the implications of those decisions. A conda
package is a bz2 compressed tarfile of all the files installed in a
prefix, along with a metadata directory for the package. A conda
package is typically installed by hard linking these files into the
install prefix. Conda packages should be relocatable, so that they
can be installed into any prefix. This allows conda packages to be
installed into many virtual environments at once. A conda package is
not Python specific.&lt;/li&gt;
&lt;li&gt;We will look at how basic commands for installation and environment
management. Conda uses a SAT solver to solve package dependency
constraints, which is a simple, rigorous, and modern way to ensure
that the set of packages that are installed are consistent with one
another.&lt;/li&gt;
&lt;li&gt;Conda has an extensive build framework which allows anybody to build
their own conda packages. We will show how to use these tools and how
to upload them to Binstar, a free packaging hosting service.&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="conda"></category><category term="packaging"></category></entry><entry><title>SymPy Tutorial Part 1</title><link href="http://pyvideo.org/scipy-2014/sympy-tutorial-part-1.html" rel="alternate"></link><published>2014-07-09T00:00:00+00:00</published><updated>2014-07-09T00:00:00+00:00</updated><author><name>Aaron Meurer</name></author><id>tag:pyvideo.org,2014-07-09:scipy-2014/sympy-tutorial-part-1.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;SymPy is a pure Python library for symbolic mathematics. It aims to
become a full-featured computer algebra system (CAS) while keeping the
code as simple as possible in order to be comprehensible and easily
extensible. SymPy is written entirely in Python and does not require any
external libraries.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this tutorial we will introduce attendees to SymPy. We will show
basics of constructing and manipulating mathematical expressions in
SymPy, the most common issues and differences from other computer
algebra systems, and how to deal with them. In the last part of this
tutorial we will show how to solve some practical problems with SymPy.
This will include showing how to interface SymPy with popular numeric
libraries like NumPy.&lt;/p&gt;
&lt;p&gt;This knowledge should be enough for attendees to start using SymPy for
solving mathematical problems and hacking SymPy's internals (though
hacking core modules may require additional expertise).&lt;/p&gt;
</summary><category term="SymPy"></category><category term="tutorial"></category></entry><entry><title>SymPy Tutorial Part 2</title><link href="http://pyvideo.org/scipy-2014/sympy-tutorial-part-2.html" rel="alternate"></link><published>2014-07-09T00:00:00+00:00</published><updated>2014-07-09T00:00:00+00:00</updated><author><name>Aaron Meurer</name></author><id>tag:pyvideo.org,2014-07-09:scipy-2014/sympy-tutorial-part-2.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;SymPy is a pure Python library for symbolic mathematics. It aims to
become a full-featured computer algebra system (CAS) while keeping the
code as simple as possible in order to be comprehensible and easily
extensible. SymPy is written entirely in Python and does not require any
external libraries.&lt;/p&gt;
</summary><category term="SymPy"></category><category term="tutorial"></category></entry><entry><title>SymPy Tutorial Part 3</title><link href="http://pyvideo.org/scipy-2014/sympy-tutorial-part-3.html" rel="alternate"></link><published>2014-07-09T00:00:00+00:00</published><updated>2014-07-09T00:00:00+00:00</updated><author><name>Aaron Meurer</name></author><id>tag:pyvideo.org,2014-07-09:scipy-2014/sympy-tutorial-part-3.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;SymPy is a pure Python library for symbolic mathematics. It aims to
become a full-featured computer algebra system (CAS) while keeping the
code as simple as possible in order to be comprehensible and easily
extensible. SymPy is written entirely in Python and does not require any
external libraries.&lt;/p&gt;
</summary><category term="SymPy"></category><category term="tutorial"></category></entry><entry><title>SymPy Tutorial Part 4</title><link href="http://pyvideo.org/scipy-2014/sympy-tutorial-part-4.html" rel="alternate"></link><published>2014-07-09T00:00:00+00:00</published><updated>2014-07-09T00:00:00+00:00</updated><author><name>Aaron Meurer</name></author><id>tag:pyvideo.org,2014-07-09:scipy-2014/sympy-tutorial-part-4.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;SymPy is a pure Python library for symbolic mathematics. It aims to
become a full-featured computer algebra system (CAS) while keeping the
code as simple as possible in order to be comprehensible and easily
extensible. SymPy is written entirely in Python and does not require any
external libraries.&lt;/p&gt;
</summary><category term="SymPy"></category><category term="tutorial"></category></entry></feed>