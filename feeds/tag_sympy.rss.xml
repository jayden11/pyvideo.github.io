<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>http://pyvideo.org/</link><description></description><lastBuildDate>Thu, 29 Sep 2016 00:00:00 +0000</lastBuildDate><item><title>Symbolic Computation with Python using SymPy</title><link>http://pyvideo.org/pycon-uk-2016/symbolic-computation-with-python-using-sympy.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Sartaj Singh&lt;/p&gt;
&lt;p&gt;This workshop aims to introduce attendees to SymPy, a computer aided algebra system (CAS) written in Python. We will show basics of constructing and manipulating mathematical expressions in SymPy, the most common issues and differences from other computer algebra systems, and how to deal with them.&lt;/p&gt;
&lt;p&gt;Attendees will take home an introductory level understanding of SymPy. This knowledge should be enough for attendees to start using SymPy for solving mathematical problems and hacking SymPy's internals (though hacking core modules may require additional expertise).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sartaj Singh</dc:creator><pubDate>Thu, 29 Sep 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-09-29:pycon-uk-2016/symbolic-computation-with-python-using-sympy.html</guid><category>workshop</category><category>sympy</category></item><item><title>¡Eureka! (Python y ciencia)</title><link>http://pyvideo.org/pyday-galicia-2016/eureka-python-y-ciencia.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;En esta charla se plantea una pregunta de física básica que se resolverá científicamente con ingenio, mátemáticas y python, aprovechando para (de una manera amena) ver librerías habituales en el entorno científico como sympy, numpy, scipy, matplotlib, bokeh, numba, pandas y sklearn.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Miguel Sánchez de León Peque</dc:creator><pubDate>Sat, 17 Sep 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-09-17:pyday-galicia-2016/eureka-python-y-ciencia.html</guid><category>pyday</category><category>sympy</category><category>numpy</category><category>scipy</category><category>matplotlib</category><category>bokeh</category><category>numba</category><category>pandas</category><category>sklearn</category></item><item><title>Optimal Control and Parameter Identification of Dynamcal Systems with Direct Collocation using SymPy</title><link>http://pyvideo.org/scipy-2015/optimal-control-and-parameter-identification-of-dynamcal-systems-with-direct-collocation-using-sympy.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jason Moore</dc:creator><pubDate>Wed, 08 Jul 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-07-08:scipy-2015/optimal-control-and-parameter-identification-of-dynamcal-systems-with-direct-collocation-using-sympy.html</guid><category>sympy</category></item><item><title>SymPy Code Generation</title><link>http://pyvideo.org/scipy-2016/sympy-code-generation-scipy-2016-aaron-meurer.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aaron Meurer</dc:creator><pubDate>Fri, 15 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-07-15:scipy-2016/sympy-code-generation-scipy-2016-aaron-meurer.html</guid><category>SciPy 2016</category><category>sympy</category></item><item><title>Symbolic Computation with Python using SymPy (Beginner)</title><link>http://pyvideo.org/scipy-2016/symbolic-compution-with-python-using-sympy-beginner-scipy-2016-tutorial-ondrej-certik-et-al.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Materials for this tutorial are found here: &lt;a class="reference external" href="https://github.com/sympy/scipy-2016-tutorial"&gt;https://github.com/sympy/scipy-2016-tutorial&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ondřej Čertík</dc:creator><pubDate>Mon, 11 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-07-11:scipy-2016/symbolic-compution-with-python-using-sympy-beginner-scipy-2016-tutorial-ondrej-certik-et-al.html</guid><category>SciPy 2016</category><category>tutorial</category><category>SymPy</category></item><item><title>Symbolic Computing with SymPy, SciPy2013 Tutorial, Part 1 of 6</title><link>http://pyvideo.org/scipy-2013/symbolic-computing-sympy-scipy2013-tutorial-part-1.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;SymPy is a pure Python library for symbolic mathematics. It aims to
become a full-featured computer algebra system (CAS) while keeping the
code as simple as possible in order to be comprehensible and easily
extensible. SymPy is written entirely in Python and does not require any
external libraries.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this tutorial we will introduce attendees to SymPy. We will start by
showing how to install and configure this Python module. Then we will
proceed to the basics of constructing and manipulating mathematical
expressions in SymPy. We will also discuss the most common issues and
differences from other computer algebra systems, and how to deal with
them. In the last part of this tutorial we will show how to solve
simple, yet illustrative, mathematical problems with SymPy.&lt;/p&gt;
&lt;p&gt;This knowledge should be enough for attendees to start using SymPy for
solving mathematical problems and hacking SymPy's internals (though
hacking core modules may require additional expertise).&lt;/p&gt;
&lt;p&gt;We expect attendees of this tutorial to have basic knowledge of Python
and mathematics. However, any more advanced topics will be explained
during presentation.&lt;/p&gt;
&lt;p&gt;Outline&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;installing, configuring and running SymPy&lt;/li&gt;
&lt;li&gt;basics of expressions in SymPy&lt;/li&gt;
&lt;li&gt;traversal and manipulation of expressions&lt;/li&gt;
&lt;li&gt;common issues and differences from other CAS&lt;/li&gt;
&lt;li&gt;setting up and using printers&lt;/li&gt;
&lt;li&gt;querying expression properties&lt;/li&gt;
&lt;li&gt;not only symbolics: numerical computing (mpmath)&lt;/li&gt;
&lt;li&gt;Mathematical problem solving with SymPy&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Required Packages&lt;/p&gt;
&lt;p&gt;Python 2.x or 3.x, SymPy (most recent version) Optional packages:
IPython, matplotlib, NetworkX, GMPY, numpy, scipy&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aaron Meurer</dc:creator><pubDate>Mon, 01 Jan 1990 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,1990-01-01:scipy-2013/symbolic-computing-sympy-scipy2013-tutorial-part-1.html</guid><category>mathematics</category><category>sympy</category></item><item><title>Multibody Dynamics and Control with Python part 1</title><link>http://pyvideo.org/scipy-2014/multibody-dynamics-and-control-with-python-part-1.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;In this tutorial, attendees will learn how to derive, simulate, and
visualize the motion of a multibody dynamic system with Python tools.
These methods and techniques play an important role in the design and
understanding of robots, vehicles, spacecraft, manufacturing machines,
human motion, etc. Attendees will develop code to simulate the motion of
a human or humanoid robot.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this tutorial, attendees will learn how to derive, simulate, and
visualize the motion of a multibody dynamic system with Python tools.
The tutorial will demonstrate an advanced symbolic and numeric pipeline
for a typical multibody simulation problem. These methods and techniques
play an important role in the design and understanding of robots,
vehicles, spacecraft, manufacturing machines, human motion, etc. At the
end, the attendees will have developed code to simulate the uncontrolled
and controlled motion of a human or humanoid robot.&lt;/p&gt;
&lt;p&gt;We will highlight the derivation of realistic models of motion with the
SymPy Mechanics package. We will walk through the derivation of the
equations of motion of a multibody system (i.e. the model or the plant),
simulating and visualizing the free motion of the system, and finally we
will addfeedback controllers to control the plants that we derive.&lt;/p&gt;
&lt;p&gt;It is best if the attendees have some background with calculus-based
college level physics. They should also be familiar with the SciPy
Stack, in particular IPython, SymPy, NumPy, and SciPy. Our goal is that
attendees will come away with the ability to model basic multibody
systems, simulate and visualize the motion, and apply feedback
controllers all in a Python framework.&lt;/p&gt;
&lt;p&gt;The tutorial materials including an outline can be viewed here:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/pydy/pydy-tutorial-pycon-2014"&gt;https://github.com/pydy/pydy-tutorial-pycon-2014&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jason K. Moore</dc:creator><pubDate>Wed, 09 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-09:scipy-2014/multibody-dynamics-and-control-with-python-part-1.html</guid><category>robots</category><category>simulation</category><category>sympy</category></item><item><title>Multibody Dynamics and Control with Python part 2</title><link>http://pyvideo.org/scipy-2014/multibody-dynamics-and-control-with-python-part-2.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;In this tutorial, attendees will learn how to derive, simulate, and
visualize the motion of a multibody dynamic system with Python tools.
These methods and techniques play an important role in the design and
understanding of robots, vehicles, spacecraft, manufacturing machines,
human motion, etc. Attendees will develop code to simulate the motion of
a human or humanoid robot.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this tutorial, attendees will learn how to derive, simulate, and
visualize the motion of a multibody dynamic system with Python tools.
The tutorial will demonstrate an advanced symbolic and numeric pipeline
for a typical multibody simulation problem. These methods and techniques
play an important role in the design and understanding of robots,
vehicles, spacecraft, manufacturing machines, human motion, etc. At the
end, the attendees will have developed code to simulate the uncontrolled
and controlled motion of a human or humanoid robot.&lt;/p&gt;
&lt;p&gt;We will highlight the derivation of realistic models of motion with the
SymPy Mechanics package. We will walk through the derivation of the
equations of motion of a multibody system (i.e. the model or the plant),
simulating and visualizing the free motion of the system, and finally we
will addfeedback controllers to control the plants that we derive.&lt;/p&gt;
&lt;p&gt;It is best if the attendees have some background with calculus-based
college level physics. They should also be familiar with the SciPy
Stack, in particular IPython, SymPy, NumPy, and SciPy. Our goal is that
attendees will come away with the ability to model basic multibody
systems, simulate and visualize the motion, and apply feedback
controllers all in a Python framework.&lt;/p&gt;
&lt;p&gt;The tutorial materials including an outline can be viewed here:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/pydy/pydy-tutorial-pycon-2014"&gt;https://github.com/pydy/pydy-tutorial-pycon-2014&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jason K. Moore</dc:creator><pubDate>Wed, 09 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-09:scipy-2014/multibody-dynamics-and-control-with-python-part-2.html</guid><category>robots</category><category>simulation</category><category>sympy</category></item><item><title>SymPy Tutorial Part 1</title><link>http://pyvideo.org/scipy-2014/sympy-tutorial-part-1.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;SymPy is a pure Python library for symbolic mathematics. It aims to
become a full-featured computer algebra system (CAS) while keeping the
code as simple as possible in order to be comprehensible and easily
extensible. SymPy is written entirely in Python and does not require any
external libraries.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this tutorial we will introduce attendees to SymPy. We will show
basics of constructing and manipulating mathematical expressions in
SymPy, the most common issues and differences from other computer
algebra systems, and how to deal with them. In the last part of this
tutorial we will show how to solve some practical problems with SymPy.
This will include showing how to interface SymPy with popular numeric
libraries like NumPy.&lt;/p&gt;
&lt;p&gt;This knowledge should be enough for attendees to start using SymPy for
solving mathematical problems and hacking SymPy's internals (though
hacking core modules may require additional expertise).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aaron Meurer</dc:creator><pubDate>Wed, 09 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-09:scipy-2014/sympy-tutorial-part-1.html</guid><category>SymPy</category><category>tutorial</category></item><item><title>SymPy Tutorial Part 2</title><link>http://pyvideo.org/scipy-2014/sympy-tutorial-part-2.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;SymPy is a pure Python library for symbolic mathematics. It aims to
become a full-featured computer algebra system (CAS) while keeping the
code as simple as possible in order to be comprehensible and easily
extensible. SymPy is written entirely in Python and does not require any
external libraries.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aaron Meurer</dc:creator><pubDate>Wed, 09 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-09:scipy-2014/sympy-tutorial-part-2.html</guid><category>SymPy</category><category>tutorial</category></item><item><title>SymPy Tutorial Part 3</title><link>http://pyvideo.org/scipy-2014/sympy-tutorial-part-3.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;SymPy is a pure Python library for symbolic mathematics. It aims to
become a full-featured computer algebra system (CAS) while keeping the
code as simple as possible in order to be comprehensible and easily
extensible. SymPy is written entirely in Python and does not require any
external libraries.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aaron Meurer</dc:creator><pubDate>Wed, 09 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-09:scipy-2014/sympy-tutorial-part-3.html</guid><category>SymPy</category><category>tutorial</category></item><item><title>SymPy Tutorial Part 4</title><link>http://pyvideo.org/scipy-2014/sympy-tutorial-part-4.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;SymPy is a pure Python library for symbolic mathematics. It aims to
become a full-featured computer algebra system (CAS) while keeping the
code as simple as possible in order to be comprehensible and easily
extensible. SymPy is written entirely in Python and does not require any
external libraries.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aaron Meurer</dc:creator><pubDate>Wed, 09 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-09:scipy-2014/sympy-tutorial-part-4.html</guid><category>SymPy</category><category>tutorial</category></item><item><title>The Wonderful World of Scientific Computing with Python</title><link>http://pyvideo.org/scipy-2014/the-wonderful-world-of-scientific-computing-with.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;We will give an overview of the basics of the scientific computing
ecosystem with Python: what does each of the fundamental packages
(numpy, matplotlib, scipy, sympy and pandas) do, and how does it work?
We will use the IPython Notebook in our quest to enter this wonderful
world.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Starting out with scientific computing in Python can be daunting: Where
do I start? What are the basic packages, and what is the use case for
each of them? What are the fundamental ideas I need to understand each
package and how it works?&lt;/p&gt;
&lt;p&gt;In this tutorial, we will use examples of scientific questions and
calculations which lead directly to the need for certain computational
tools as a gateway to understand the basic structure of the scientific
computing ecosystem. The specific packages we will touch on are
&lt;tt class="docutils literal"&gt;numpy&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;matplotlib&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;scipy&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;sympy&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;pandas&lt;/tt&gt;, all
viewed through the wonderful lens of the IPython Notebook.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David P. Sanders</dc:creator><pubDate>Wed, 09 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-09:scipy-2014/the-wonderful-world-of-scientific-computing-with.html</guid><category>matplotlib</category><category>numpy</category><category>pandas</category><category>scipy</category><category>sympy</category></item></channel></rss>