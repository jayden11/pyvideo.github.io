<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>http://pyvideo.org/</link><description></description><lastBuildDate>Sun, 21 May 2017 00:00:00 +0000</lastBuildDate><item><title>One Data Pipeline to Rule Them All</title><link>http://pyvideo.org/pycon-us-2017/one-data-pipeline-to-rule-them-all.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;There are myriad data storage systems available for every use case
imaginable, but letting application teams choose storage engines
independently can lead to duplicated efforts and wheel reinvention. This
talk will explore how to build a reusable data pipeline based on Kafka
to support multiple applications, datasets, and use cases including
archival, warehousing and analytics, stream and batch processing, and
low-latency &amp;quot;hot&amp;quot; storage.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sam Kitajima-Kimbrel</dc:creator><pubDate>Sun, 21 May 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-05-21:pycon-us-2017/one-data-pipeline-to-rule-them-all.html</guid></item><item><title>From Flying Circus to Holy Grail: Migrating the Twilio API from PHP to Python</title><link>http://pyvideo.org/pycon-au-2016/from-flying-circus-to-holy-grail-migrating-the-twilio-api-from-php-to-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Sam Kitajima-Kimbrel
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/23/view_talk"&gt;https://2016.pycon-au.org/schedule/23/view_talk&lt;/a&gt;
Almost every software project of meaningful scale eventually runs into architectural problems. One of the larger issues we’ve dealt with at Twilio is an increasingly-brittle and hard-to-manage PHP codebase, originally responsible for running a website and public REST API. Rather than risk a from-scratch rewrite of the entire system, we chose to extract small and well-defined chunks one at a time into simple services using a common internal interface standard.&lt;/p&gt;
&lt;p&gt;Given a new fleet of services and a set of internal REST APIs, how do we get to parity with the existing public API specifications? Rather than force every service to implement authentication, data validation, rate-limiting, and so on, we chose to build a simple federation service to translate and proxy customer requests to internal systems. Python was a natural choice for this application due to its flexibility, extensive library and testing ecosystem, and suitability for rapid prototyping and development.&lt;/p&gt;
&lt;p&gt;But: how did we get from A to B? This talk will cover the details of Twilio’s past and current API architecture, how we adapted the service-oriented architecture pattern to build a consistent public interface, and the testing and deployment strategies we used to migrate 5 billion monthly requests from old to new systems with no downtime.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sam Kitajima-Kimbrel</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/from-flying-circus-to-holy-grail-migrating-the-twilio-api-from-php-to-python.html</guid></item><item><title>From Flying Circus to Holy Grail: migrating the Twilio REST API from PHP to Python</title><link>http://pyvideo.org/pycon-ca-2015/from-flying-circus-to-holy-grail-migrating-the-api.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Almost every software project of meaningful scale eventually runs into architectural problems. One of the larger issues we’ve dealt with at Twilio is an increasingly-brittle and hard-to-manage PHP codebase, originally responsible for running a website and public REST API. Over time, core business logic has been extracted from the legacy codebase into internal services fronted by a public REST API. This talk will explore how Python and Flask were used to build a simple proxying HTTP layer to handle all of Twilio’s API traffic and direct it to the appropriate internal systems. Along the way, we’ll cover why Python is well-suited to this application, ways to test code that’s replacing existing services, deployment strategies, and all of the benefits that came from migrating to more modern systems.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sam Kitajima-Kimbrel</dc:creator><pubDate>Sun, 08 Nov 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-11-08:pycon-ca-2015/from-flying-circus-to-holy-grail-migrating-the-api.html</guid></item><item><title>From Flying Circus to Holy Grail: Migrating the Twilio API from PHP to Python</title><link>http://pyvideo.org/pyohio-2016/from-flying-circus-to-holy-grail-migrating-the-twilio-api-from-php-to-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Legacy code is a hard problem for any growing application. Complete rewrites are expensive and prone to failure, so how &lt;em&gt;does&lt;/em&gt; one go about replacing that large, crufty codebase with something easier to maintain? We’ll discuss the strategies used at Twilio to migrate a large REST API, piece by piece, out of a monolithic PHP system into a fleet of services federated by a Python proxy layer.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sam Kitajima-Kimbrel</dc:creator><pubDate>Sat, 30 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-07-30:pyohio-2016/from-flying-circus-to-holy-grail-migrating-the-twilio-api-from-php-to-python.html</guid></item></channel></rss>