<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="http://pyvideo.org/" rel="alternate"></link><link href="http://pyvideo.org/feeds/tag_climate.atom.xml" rel="self"></link><id>http://pyvideo.org/</id><updated>2014-07-13T00:00:00+00:00</updated><entry><title>Climate &amp; GIS: User Friendly Data Access, Workflows, Manipulation, Analysis and Visualization of Climate Data</title><link href="http://pyvideo.org/scipy-2014/climate-gis-user-friendly-data-access-workflo.html" rel="alternate"></link><published>2014-07-13T00:00:00+00:00</published><updated>2014-07-13T00:00:00+00:00</updated><author><name>Aashish Chaudhary</name></author><id>tag:pyvideo.org,2014-07-13:scipy-2014/climate-gis-user-friendly-data-access-workflo.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Understanding environmental and climate change requires data fusion,
format conversions, processing and visualization to gain insight into
the data. Our open source scientific Python and JavaScript based tools
makes it easy to manipulate geo-spatial and climate data, create and
execute workflows, and produce visualizations over the web for
scientific and decision making tools.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The impact of climate change will resonate through a broad range of
fields including public health, infrastructure, water resources, and
many others. Long-term coordinated planning, funding, and action are
required for climate change adaptation and mitigation. Unfortunately,
widespread use of climate data (simulated and observed) in non-climate
science communities is impeded by factors such as large data size, lack
of adequate metadata, poor documentation, and lack of sufficient
computational and visualization resources. Additionally, working with
climate data in its native format is not ideal for all types of analyses
and use cases often requiring technical skills (and software)
unnecessary to work with other geospatial data formats.&lt;/p&gt;
&lt;p&gt;We present open source tools developed as part of ClimatePipes and
OpenClimateGIS to address many of these challenges by creating an open
source platform that provides state-of-the-art user-friendly data
access, processing, analysis, and visualization for climate and other
relevant geospatial datasets making the climate and other geospatial
data available to non-researchers, decision-makers, and other
stakeholders.&lt;/p&gt;
&lt;p&gt;The overarching goals are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Enable users to explore real-world questions related to environment
and climate change.&lt;/li&gt;
&lt;li&gt;Provide tools for data access, geo-processing, analysis, and
visualization.&lt;/li&gt;
&lt;li&gt;Facilitate collaboration by enabling users to share datasets,
workflows, and visualization.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some of the key technical features include&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Support for multiprocessing for large datasets using Python-celery
distributed task queuing system&lt;/li&gt;
&lt;li&gt;Generic iterators allowing data to be streamed to arbitrary formats
(relatively) easily (e.g. ESRI Shapefile, CSV, keyed ESRI Shapefile,
CSV, NetCDF)&lt;/li&gt;
&lt;li&gt;NumPy based array computations allowing calculations such as monthly
means or heat indices optionally on temporally grouped data slices&lt;/li&gt;
&lt;li&gt;Decorators to expose existing Python API as a RESTful API&lt;/li&gt;
&lt;li&gt;Simple to use, lightweight Web-framework and JavaScript libraries for
analyzing and visualizing geospatial datasets using D3 and WebGL.&lt;/li&gt;
&lt;/ol&gt;
</summary><category term="climate"></category></entry><entry><title>Python Backends for Climate Science Web Apps</title><link href="http://pyvideo.org/scipy-2014/python-backends-for-climate-science-web-apps.html" rel="alternate"></link><published>2014-07-09T00:00:00+00:00</published><updated>2014-07-09T00:00:00+00:00</updated><author><name>Nicolas Fauchereau</name></author><id>tag:pyvideo.org,2014-07-09:scipy-2014/python-backends-for-climate-science-web-apps.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;We present two web applications: (PICT: Past Interpretation of Climate
Tool), a paleo-climates reconstruction tool and CLIDESC, a climate
services layer built on top of the Clide database, a database system
used widely in the National Meteorological services across the Pacific.
Both these tools have been developed at NIWA in New Zealand.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;NIWA has developed two tools dedicated respectively to the
reconstruction of the climates of the past and to the rapid and flexible
development of climate services connected to a widely used
meteorological database.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PICT (Past Interpretation of Climate Tool&lt;/strong&gt; allows the user, given a
climate proxy or set of proxies, to reconstruct likely anomalies
associated with specific proxy epochs. The tool implements the concept
of climate analogs, and reconstruct paleo-climate anomalies in terms of
mean atmospheric circulation and sea-surface-temperatures, as well as in
terms of the possible changes in the probabilities of synoptic weather
regimes (or 'attractors' in the climate system). The whole backend of
this application has been exclusively developed using Python with Numpy,
scipy, pandas and matplotlib scientific libraries. We present a brief
overview of the underlying science before exposing the choices made in
designing the python-based compute and data visualisation layer.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Clidesc&lt;/strong&gt; is an application layer, running in the browser, built on
top of &lt;strong&gt;CLIDE&lt;/strong&gt;, an open-source database specialized in handling
meteorological data in real-time and facilitating its long-term storage.
It has been developed using open standards, and facilitate the rapid
development of climate services (data analysis and visualisations
developed to increase climate intelligence and early warning systems).
Clidesc is currently being deployed in several Pacific Islands National
Meteorological services. Services can be developed using either R or
Python. Development in Python is based on Anaconda and psycopg2, which
provides the interface with the postgresql-based Clide database. We
present the context and rationale for using open-standards, and give
examples of how a user with minimum python knowledge can use templates
to rapidly implement a new service tailored to her needs.&lt;/p&gt;
</summary><category term="climate"></category></entry></feed>