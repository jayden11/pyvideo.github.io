<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="http://pyvideo.org/" rel="alternate"></link><link href="http://pyvideo.org/feeds/tag_tensorflow.atom.xml" rel="self"></link><id>http://pyvideo.org/</id><updated>2016-11-05T00:00:00+00:00</updated><entry><title>Experimenting with TensorFlow</title><link href="http://pyvideo.org/pycon-ireland-2016/experimenting-with-tensorflow.html" rel="alternate"></link><published>2016-11-05T00:00:00+00:00</published><updated>2016-11-05T00:00:00+00:00</updated><author><name>Breandan Considine</name></author><id>tag:pyvideo.org,2016-11-05:pycon-ireland-2016/experimenting-with-tensorflow.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;From implementing new research to validating results, running machine
learning experiments can often be a process of trial and error.
TensorFlow is an open source computing framework that places state of
the art algorithms and tools into developers' hands, allowing you to
rapidly iterate experiments, monitor their results and scale into
production. We'll show you how to train machine learning pipelines from
conception to release with TensorFlow.&lt;/p&gt;
</summary><category term="tensorflow"></category></entry><entry><title>Deep Python learning with Tensorflow - a data-driven approach to Python execution</title><link href="http://pyvideo.org/pycon-se-2016/deep-python-learning-with-tensorflow-a-data-driven-approach-to-python-execution.html" rel="alternate"></link><published>2016-05-09T00:00:00+00:00</published><updated>2016-05-09T00:00:00+00:00</updated><author><name>Erik Rehn</name></author><id>tag:pyvideo.org,2016-05-09:pycon-se-2016/deep-python-learning-with-tensorflow-a-data-driven-approach-to-python-execution.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Is it possible to train a neural network to execute Python scripts?&lt;/p&gt;
&lt;p&gt;Data-driven algorithm learning is a growing field of research. In this talk we will take a look at Google’s new deep learning library Tensorflow, and implement a basic model that can be taught how to execute simple Python scripts.&lt;/p&gt;
</summary><category term="tensorflow"></category></entry><entry><title>H2O Deep Water with Python early sneek</title><link href="http://pyvideo.org/pydata-dc-2016/h2o-deep-water-with-python-early-sneek.html" rel="alternate"></link><published>2016-10-09T00:00:00+00:00</published><updated>2016-10-09T00:00:00+00:00</updated><author><name>Fabrizio Milo</name></author><id>tag:pyvideo.org,2016-10-09:pydata-dc-2016/h2o-deep-water-with-python-early-sneek.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData 2016&lt;/p&gt;
&lt;p&gt;Python as a language for DeepLearning. Python is emerging as the facto language to specify Deep Learning Networks. In this talk we will explore some of the popular libraries like Tensorflow and Keras to see the semantics used to describe such networks and look a bit more under the hood at what is the python layer actually doing for these well known deep learning libraries.&lt;/p&gt;
</summary><category term="deep learning"></category><category term="tensorflow"></category><category term="keras"></category></entry><entry><title>How to Build Your Own Self Driving Toy Car</title><link href="http://pyvideo.org/pydata-dc-2016/how-to-build-your-own-self-driving-toy-car.html" rel="alternate"></link><published>2016-10-07T00:00:00+00:00</published><updated>2016-10-07T00:00:00+00:00</updated><author><name>Ryan Zotti</name></author><id>tag:pyvideo.org,2016-10-07:pydata-dc-2016/how-to-build-your-own-self-driving-toy-car.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData DC 2016&lt;/p&gt;
&lt;p&gt;I’ve spent the past 6 months building a self-driving toy car using a Raspberry Pi, OpenCV, and TensorFlow. If you’ve ever thought about building your own self-driving toy car, this presentation will help you avoid common pitfalls and shed light on important tradeoffs that you’ll have to weigh along the way. I’ll cover things like how to parse images, how to effectively tune machine learning neural&lt;/p&gt;
</summary><category term="opencv"></category><category term="tensorflow"></category></entry><entry><title>Fizz Buzz in Tensorflow</title><link href="http://pyvideo.org/pydata-chicago-2016/fizz-buzz-in-tensorflow.html" rel="alternate"></link><published>2016-08-27T00:00:00+00:00</published><updated>2016-08-27T00:00:00+00:00</updated><author><name>Joel Grus</name></author><id>tag:pyvideo.org,2016-08-27:pydata-chicago-2016/fizz-buzz-in-tensorflow.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData Chicago 2016&lt;/p&gt;
&lt;p&gt;Fizz Buzz is a ubiquitous, nearly trivial problem used to weed out developer job applicants. Recently I wrote a joking-not-joking blog post about a fictional interviewee who solves it using neural networks. After the blog post went viral, I spent a lot of time thinking about Fizz Buzz as a machine learning problem. It turns out it's surprisingly interesting and subtle! I'll talk about how and why.&lt;/p&gt;
</summary><category term="tensorflow"></category></entry><entry><title>Introduction to Neural Networks with Tensorflow</title><link href="http://pyvideo.org/pygotham-2016/introduction-to-neural-networks-with-tensorflow.html" rel="alternate"></link><published>2016-07-16T00:00:00+00:00</published><updated>2016-07-16T00:00:00+00:00</updated><author><name>Mike Craig</name></author><id>tag:pyvideo.org,2016-07-16:pygotham-2016/introduction-to-neural-networks-with-tensorflow.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Neural networks are a powerful machine learning model that are used in many applications, from computer vision and speech recognition to time series modeling and natural language processing. TensorFlow is an open source machine learning library developed by Google that can be used to easily create these types of models. I will give an overview of neural networks, and show how to implement and use these models using TensorFlow's Python API.&lt;/p&gt;
</summary><category term="tensorflow"></category></entry><entry><title>Make sense of Deep Neural Networks using TensorBoard</title><link href="http://pyvideo.org/pybay-2016/make-sense-of-deep-neural-networks-using-tensorboard.html" rel="alternate"></link><published>2016-08-21T00:00:00+00:00</published><updated>2016-08-21T00:00:00+00:00</updated><author><name>Arpan Chakraborty</name></author><id>tag:pyvideo.org,2016-08-21:pybay-2016/make-sense-of-deep-neural-networks-using-tensorboard.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk we look at some ways in which the TensorBoard utility can be used to better understand the structure of Deep Neural Networks and how they function. Best practices on how to use the TensorFlow Python API to make your models and results more interpretable are discussed.
​
Abstract
Deep Neural Networks are fast becoming the face of modern Machine Learning. But understanding how they work can be a real challenge, especially while you are trying to build a model. Google's recently published library, TensorFlow, includes a lesser-used utility called TensorBoard that can be used to visualize the structure of your neural network model and inspect how data flows through it. This talk will demonstrate some techniques which will help you use TensorBoard more effectively, and better understand how TensorFlow computations work. Code walkthroughs will be done in iPython notebooks, which will be made available to attendees.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bio:&lt;/strong&gt;
Arpan likes to find computing solutions to everyday problems. He is interested in human-computer interaction, robotics and cognitive science. He obtained his PhD from North Carolina State University, focusing on biologically-inspired computer vision. ​Working at Udacity, he develops content for artificial intelligence and machine learning courses.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/pybay2016/arpan-chakraborty-make-sense-of-deep-neural-networks-using-tensorboard"&gt;https://speakerdeck.com/pybay2016/arpan-chakraborty-make-sense-of-deep-neural-networks-using-tensorboard&lt;/a&gt;&lt;/p&gt;
</summary><category term="deep learning"></category><category term="tensorflow"></category></entry><entry><title>TensorFlow on the Web</title><link href="http://pyvideo.org/pybay-2016/tensorflow-on-the-web.html" rel="alternate"></link><published>2016-08-21T00:00:00+00:00</published><updated>2016-08-21T00:00:00+00:00</updated><author><name>Kendall Chuang</name></author><id>tag:pyvideo.org,2016-08-21:pybay-2016/tensorflow-on-the-web.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will be about walking through the steps to put a TensorFlow project into production on the web with Flask and Heroku. The goal is to introduce the project and show how TensorFlow can be used online for real data tasks, and discuss other considerations for deployment of a TensorFlow project.
​
Abstract
TensorFlow is a deep learning library with Python and C++ bindings that was released in 2015. The talk start with a brief intro to TensorFlow, and then dive into the specific steps to set up a simple project that can be served online.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bio:&lt;/strong&gt;
Kendall is a lead software engineer at YesGraph, where he uses machine learning and Flask to power better invite flows for mobile and web apps. Previously he worked as an independent software consultant for four years, and before that he was a hardware designer at Qualcomm in San Diego for three years. Kendall was an an organizer of the San Diego Python Users Group, where he helped plan six one-day workshops on various Python topics.
​
Bio2
David Clark has a background in astrophysics, where he used Python extensively to analyze astronomical data. He recently transitioned careers to data science. Currently he is doing consulting for two startups. At Palo Alto Scientific, Inc., he uses the machine learning library TensorFlow to model sensor data from a wearable and infer a runner’s performance. He is also doing work for Quantea, Inc., making a dashboard using the Python libraries Bokeh and Pandas.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/pybay2016/kendall-chuang-david-clark-tensorflow-on-the-web"&gt;https://speakerdeck.com/pybay2016/kendall-chuang-david-clark-tensorflow-on-the-web&lt;/a&gt;&lt;/p&gt;
</summary><category term="tensorflow"></category></entry><entry><title>Deep Learning with Python &amp; TensorFlow</title><link href="http://pyvideo.org/pycon-japan-2016/deep-learning-with-python-tensorflow.html" rel="alternate"></link><published>2016-09-21T00:00:00+00:00</published><updated>2016-09-21T00:00:00+00:00</updated><author><name>Ian Lewis</name></author><id>tag:pyvideo.org,2016-09-21:pycon-japan-2016/deep-learning-with-python-tensorflow.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;TensorFlow is a new Open Source framework created at Google for building Deep Learning applications. I will discuss how it compares to other Python machine learning libraries like Theano or Chainer. Finally, I will discuss how trained TensorFlow models could be deployed into a production system using TensorFlow Serve.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Python has lots of scientific, data analysis, and machine learning libraries. But there are many problems. Which do you use? How do they compare to each other? How can you use a model that has been trained in your production application?&lt;/p&gt;
&lt;p&gt;TensorFlow is a new Open Source framework created at Google for building Deep Learning applications. Tensorflow allows you to construct easy to understand data flow graphs which form a mathematical and logical pipeline. Creating data flow graphs allow easier visualization of complicated algorithms as well as running the training operations over multiple hardware GPUs.&lt;/p&gt;
&lt;p&gt;Tensorflow data flow graphs and operations are written in Python. In this talk I will discuss how you can use TensorFlow to create Deep Learning applications. I will discuss how it compares to other Python machine learning libraries like Theano or Chainer. Finally, I will discuss how trained TensorFlow models could be deployed into a production system using TensorFlow Serve.&lt;/p&gt;
</summary><category term="tensorflow"></category><category term="deep learning"></category></entry><entry><title>지적 대화를 위한 깊고 넓은 딥러닝 (Feat. TensorFlow)</title><link href="http://pyvideo.org/pycon-apac-2016/jijeog-daehwareul-wihan-gipgo-neolbeun-dibreoning-feat-tensorflow.html" rel="alternate"></link><published>2016-08-30T00:00:00+00:00</published><updated>2016-08-30T00:00:00+00:00</updated><author><name>김태훈</name></author><id>tag:pyvideo.org,2016-08-30:pycon-apac-2016/jijeog-daehwareul-wihan-gipgo-neolbeun-dibreoning-feat-tensorflow.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;발표자:  김태훈 / carpedm20
슬라이드:  &lt;a class="reference external" href="https://www.slideshare.net/carpedm20/pycon-korea-2016"&gt;https://www.slideshare.net/carpedm20/pycon-korea-2016&lt;/a&gt;&lt;/p&gt;
</summary><category term="tensorflow"></category></entry><entry><title>Creating AI chat bot with Python 3 and TensorFlow</title><link href="http://pyvideo.org/pycon-apac-2016/creating-ai-chat-bot-with-python-3-and-tensorflow.html" rel="alternate"></link><published>2016-08-29T00:00:00+00:00</published><updated>2016-08-29T00:00:00+00:00</updated><author><name>신정규</name></author><id>tag:pyvideo.org,2016-08-29:pycon-apac-2016/creating-ai-chat-bot-with-python-3-and-tensorflow.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;발표자: 신정규 ( Jeongkyu Shin )
슬라이드: &lt;a class="reference external" href="https://speakerdeck.com/inureyes/building-ai-chat-bot-using-python-3-and-tensorflow"&gt;https://speakerdeck.com/inureyes/building-ai-chat-bot-using-python-3-and-tensorflow&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Recently, chat bot has become the center of public attention as a new mobile user interface since 2015. Chat bots are widely used to reduce human-to-human interaction, from consultation to online shopping and negotiation, and still expanding the application coverage. Also, chat bot is the basic of conversational interface and non-physical input interface with combination of voice recognition.&lt;/p&gt;
&lt;p&gt;Traditional chat bots were developed based on the natural language processing (NLP) and bayesian statistics for user intention recognition and template-based response. However, since 2012, accelerated advance in deep-learning technology and NLPs using deep-learning opened the possibilities to create chat bots with machine learning. Machine learning (ML)-based chat bot development has advantages, for instance, ML-based bots can generate (somewhat non-sense but acceptable) responses to random asks that has no connection with the context once the model is constructed with appropriate learning level.&lt;/p&gt;
&lt;p&gt;In this talk, I will introduce the garage chat bot creation process step-by-step. First, get the data and preprocess it with Python 3 and pandas. Also, data is modified to more trainable form. With preprocessed data, design the deep learning model with TensorFlow which is suitable for sentence-type input / output and train it. After training, serve the model with messenger interface created by using telegram API and Python 3, and demonstrate the result.&lt;/p&gt;
&lt;p&gt;In the process, we have to solve several problems. First is the preprocessing the Korean sentences with natural language processors, and tokenizing the sentences with proper length and types. Also, we have to solve the ‘josa (postpositions in Korean) hell” and conjunction problems to construct TensorFlow model. In addition to preprocessing, model architecture to recognize the conversational context is also needed. To serve bot with Python HTTP server and telegram API, some points demand deliberation. I’ll share my multi-modal bot model idea, implementation and tips to solve these problems.&lt;/p&gt;
&lt;p&gt;(Korean)&lt;/p&gt;
&lt;p&gt;chat bot은 2015년부터 모바일을 중심으로 새로운 사용자 UI로 주목받고 있다. 챗 봇은 상담시 인간-인간 인터랙션을 줄이는 용도부터 온라인 쇼핑 구매에 이르기까지 다양한 분야에 활용되고 있으며 그 범위를 넓혀 나가고 있다. 챗 봇은 대화형 인터페이스의 기초이면서 동시에 (음성 인식과 결합을 통한) 무입력 방식 인터페이스의 기반 기술이기도 하다.&lt;/p&gt;
&lt;p&gt;기존의 챗 봇들은 자연어 분석과 베이지안 통계에 기반한 사용자 의도 패턴 인식과 그에 따른 템플릿 응답을 기본 원리로 하여 개발되었다. 그러나 2012년 이후 급속도로 발전한 딥러닝 및 그에 기초한 자연어 인식 기술은 기계 학습을 이용해 챗 봇을 만들 수 있는 가능성을 열었다. 기계학습을 통해 챗 봇을 개발할 경우, 충분한 학습도의 모델을 구축한 후에는 학습 데이터에 따라 컨텍스트에서 벗어난 임의의 문장 입력에 대해서도 적당한 답을 생성할 수 있다는 장점이 있다.&lt;/p&gt;
&lt;p&gt;이 발표에서는 Python 3 를 이용하여 실제 사용할 수 있는 챗 봇을 만드는 과정을 단계별로 진행한다. 우선 데이터를 구한 후 Python 3 와 Pandas를 사용하여 데이터를 전처리한다. 이렇게 전처리한 데이터를 학습에 적당한 형태로 재가공한다. 그 후 컴퓨터에 TensorFlow의 python 3 패키지를 설치한다. 이후 TensorFlow 를 이용하여 문장형 입출력에 적절한 딥러닝 모델을 설계한 후, 앞에서 전처리한 데이터를 이용하여 학습시킨 모델을 만든다. 이렇게 만든 모델을 telegram API 를 이용해 인터페이스를 만든 후, telegram에 봇을 친구로 등록하여 대화를 시연한다.&lt;/p&gt;
&lt;p&gt;이 과정에서 여러 문제들을 해결해야 한다. 우선 한국어 자연어 처리를 위해 데이터를 적절히 전처리하는 과정과, 모델 학습을 위해 문장의 길이 및 형태를 적절히 토크나이징하는 과정이 필요하다. 그 다음 Tensorflow 로 모델을 설계하고 딥러닝 모델로 학습하는 단계에서 장애가 되는 조사 및 접속사 처리, 오타 처리등의 문제를 해결해야 한다. 또한 연속 대화 구현을 위하여 문장 단위의 입출력이 아니라 컨텍스트를 인식하기 위한 모델 설계 또한 필요하다. 학습한 결과를 파이썬 HTTP 서버 및 telegram API를 이용해 서빙하는 부분에서 몇가지 고려할 부분들도 있다. 이러한 부분들에 대한 아이디어 및 구현과 팁을 공유하고자 한다.&lt;/p&gt;
</summary><category term="tensorflow"></category></entry><entry><title>Deep Learning with Python &amp; TensorFlow</title><link href="http://pyvideo.org/pycon-apac-2016/deep-learning-with-python-tensorflow.html" rel="alternate"></link><published>2016-08-26T00:00:00+00:00</published><updated>2016-08-26T00:00:00+00:00</updated><author><name>Ian Lewis</name></author><id>tag:pyvideo.org,2016-08-26:pycon-apac-2016/deep-learning-with-python-tensorflow.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;발표자: Ian Lewis / ianlewis
슬라이드: &lt;a class="reference external" href="https://github.com/pythonkr/pyconapac-2016-files/raw/master/20160813-103-17-IanLewis.pdf"&gt;https://github.com/pythonkr/pyconapac-2016-files/raw/master/20160813-103-17-IanLewis.pdf&lt;/a&gt;&lt;/p&gt;
</summary><category term="deep learning"></category><category term="tensorflow"></category></entry><entry><title>Learning TensorFlow</title><link href="http://pyvideo.org/pycon-au-2016/learning-tensorflow.html" rel="alternate"></link><published>2016-08-15T00:00:00+00:00</published><updated>2016-08-15T00:00:00+00:00</updated><author><name>Robert Layton</name></author><id>tag:pyvideo.org,2016-08-15:pycon-au-2016/learning-tensorflow.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Robert Layton
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/126/view_talk"&gt;https://2016.pycon-au.org/schedule/126/view_talk&lt;/a&gt;
The recently released TensorFlow library has caused great waves in machine learning circles, with its powerful syntax that allows for distributed computation, improved efficiency, and modularisation. The framework allows you to build graph-based models, such as those used in machine learning and artificial intelligence, and have those models run on a distributed computing systems, including GPUs.&lt;/p&gt;
&lt;p&gt;This talk will cover what TensorFlow is, why/when you should use it, and cover the basics surrounding Variables, Placeholders, and Custom Functions. Importantly, there are several use cases &lt;em&gt;not&lt;/em&gt; focused on data analytics - TensorFlow is more than just a machine learning library!&lt;/p&gt;
</summary><category term="datascience"></category><category term="tensorflow"></category></entry><entry><title>Deep Learning with Python &amp; TensorFlow</title><link href="http://pyvideo.org/europython-2016/deep-learning-with-python-tensorflow.html" rel="alternate"></link><published>2016-08-05T00:00:00+00:00</published><updated>2016-08-05T00:00:00+00:00</updated><author><name>Ian Lewis</name></author><id>tag:pyvideo.org,2016-08-05:europython-2016/deep-learning-with-python-tensorflow.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Ian Lewis - Deep Learning with Python &amp;amp; TensorFlow
[EuroPython 2016]
[22 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/deep-learning-with-python-tensorflow"&gt;https://ep2016.europython.eu//conference/talks/deep-learning-with-python-tensorflow&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Python has lots of scientific, data analysis, and machine learning
libraries. But there are many problems when starting out on a machine
learning project. Which library do you use? How do they compare to
each other? How can you use a model that has been trained in your
production app? In this talk I will discuss how you can use TensorFlow
to create Deep Learning applications. I will discuss how it compares
to other Python machine learning libraries, and how to deploy into
production.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Python has lots of scientific, data analysis, and machine learning
libraries. But there are many problems when starting out on a machine
learning project. Which library do you use? How do they compare to
each other? How can you use a model that has been trained in your
production application?&lt;/p&gt;
&lt;p&gt;TensorFlow is a new Open-Source framework created at Google for
building Deep Learning applications. Tensorflow allows you to
construct easy to understand data flow graphs in Python which form a
mathematical and logical pipeline. Creating data flow graphs allow
easier visualization of complicated algorithms as well as running the
training operations over multiple hardware GPUs in parallel.&lt;/p&gt;
&lt;p&gt;In this talk I will discuss how you can use TensorFlow to create Deep
Learning applications. I will discuss how it compares to other Python
machine learning libraries like Theano or Chainer. Finally, I will
discuss how trained TensorFlow models could be deployed into a
production system using TensorFlow Serve.&lt;/p&gt;
</summary><category term="tensorflow"></category><category term="deep learning"></category></entry><entry><title>Building a Pong playing AI in just 1 hour (plus 4 days training...)</title><link href="http://pyvideo.org/pydata-london-2016/daniel-k-slater-building-a-pong-playing-ai-in-just-1-hour-plus-4-days-training.html" rel="alternate"></link><published>2016-05-09T00:00:00+00:00</published><updated>2016-05-09T00:00:00+00:00</updated><author><name>Daniel K Slater</name></author><id>tag:pyvideo.org,2016-05-09:pydata-london-2016/daniel-k-slater-building-a-pong-playing-ai-in-just-1-hour-plus-4-days-training.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData London 2016&lt;/p&gt;
&lt;p&gt;We will build an AI that can master the game of Pong in just 1 hour. In the course of this we will talk through some of the tools involved. Q-learning , Deep learning and Convolutional nets and how they fit into Pong. Most of the heavy lifting will be done using Google's recently released Tensorflow libraries.&lt;/p&gt;
&lt;p&gt;We will start by setting up a Python an agent in Pong that moves completely randomly. I will then talk over what Q-learning is and how it works and a bit about Convolutional nets. We will then build the actual agent using Tensorflow.&lt;/p&gt;
&lt;p&gt;Full code will be given, including links for downloading the resources required, so hopefully the audience can build this on their laptops. I would hope to give enough information that users will be able to make there own agents independently once finished.&lt;/p&gt;
&lt;p&gt;Slides available here: &lt;a class="reference external" href="https://speakerdeck.com/danielslater/building-a-pong-ai"&gt;https://speakerdeck.com/danielslater/building-a-pong-ai&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;GitHub: &lt;a class="reference external" href="https://github.com/DanielSlater/PyDataLondon2016"&gt;https://github.com/DanielSlater/PyDataLondon2016&lt;/a&gt;&lt;/p&gt;
</summary><category term="tensorflow"></category></entry><entry><title>Diving into Machine Learning through TensorFlow</title><link href="http://pyvideo.org/pycon-us-2016/julia-ferraioli-amy-unruh-eli-bixby-diving-into-machine-learning-through-tensorflow-pycon-2016.html" rel="alternate"></link><published>2016-05-29T00:00:00+00:00</published><updated>2016-05-29T00:00:00+00:00</updated><author><name>Julia Ferraioli</name></author><id>tag:pyvideo.org,2016-05-29:pycon-us-2016/julia-ferraioli-amy-unruh-eli-bixby-diving-into-machine-learning-through-tensorflow-pycon-2016.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speakers: Julia Ferraioli, Amy Unruh, Eli Bixby&lt;/p&gt;
&lt;p&gt;Machine learning can be an intimidating subject. In this session, we’ll get practical, hands-on experience with core concepts in machine learning with TensorFlow, an open source deep learning library. We’ll introduce the basics of TensorFlow, including how to ingest and prepare raw data for use, run a variety of algorithms to gain insight from the data, and have some fun with visualization.&lt;/p&gt;
&lt;p&gt;Slides can be found at: &lt;a class="reference external" href="https://speakerdeck.com/pycon2016"&gt;https://speakerdeck.com/pycon2016&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/PyCon/2016-slides"&gt;https://github.com/PyCon/2016-slides&lt;/a&gt;&lt;/p&gt;
</summary><category term="tensorflow"></category></entry><entry><title>Deep Learning in Python</title><link href="http://pyvideo.org/pycon-za-2016/deep-learning-in-python.html" rel="alternate"></link><published>2016-10-07T00:00:00+00:00</published><updated>2016-10-07T00:00:00+00:00</updated><author><name>Tobias Brandt</name></author><id>tag:pyvideo.org,2016-10-07:pycon-za-2016/deep-learning-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will give an introduction to Neural Networks and Deep Learning
in Python. We will cover some of the history of Neural Networks and
obstacles that were encountered in the 1990s. This will then lead onto
the developments in 2006 and 2012 that lead to the resurgence of
interest in Neural Networks and the rebranding of the field as Deep
Learning. These developments will be illustrated by means of an extended
example of building a classifier of hand written digits on the MNIST
dataset. We will start with a simple Multi-Layer Perceptron and then
build this up into a Stacked Denoising Autoencoder. All code will be
developed using the Keras framework and TensorFlow and can be run on a
simple laptop.&lt;/p&gt;
</summary><category term="deep learning"></category><category term="keras"></category><category term="tensorflow"></category></entry></feed>