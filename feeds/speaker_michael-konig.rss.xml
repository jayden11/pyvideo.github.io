<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>http://pyvideo.org/</link><description></description><lastBuildDate>Wed, 23 Jul 2014 00:00:00 +0000</lastBuildDate><item><title>Embedding Python: Charming the Snake with C++</title><link>http://pyvideo.org/europython-2014/embedding-python-charming-the-snake-with-c.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;At the example of our in-house distributed scheduling system, we discuss
the challenges of embedding the Python interpreter in a C++ program.
Besides the actual integration of the interpreter, efficient data
exchange between both languages is discussed. In addition, this
presentation demonstrates how higher-level abstractions further diminish
the language barrier.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python with its huge standard library and sophisticated packages
developed by its thriving community has become an incredibly useful tool
for data scientists. At Blue Yonder, we value Python for the ease with
which we can access and combine machine learning algorithms to build
accurate prediction models.&lt;/p&gt;
&lt;p&gt;To get the most business value out of the use of Python, we strive to
rid our model developers from all burdens outside their core expertise,
i.e., developing statistical models. To leverage our existing
infrastructure, essentially a distributed scheduling system written in
C++, we decided to embed a Python interpreter in our application. The
goal was to let developers use the language best suited for their
problem, and to let them incorporate code created by others even if it
is not written in the same language.&lt;/p&gt;
&lt;p&gt;In this presentation, I will talk about a few obstacles which we had to
overcome in integrating the (C)Python interpreter in our C++ program,
e.g., clean resource management, error handling, and broken features in
the interpreter's API. I will show how we employed features from the
&lt;a class="reference external" href="http://www.boost.org/doc/libs/1_55_0/libs/python/"&gt;Boost Python C++
library&lt;/a&gt; not only
for simple data exchange, but also for more powerful concepts such as
data sources. Finally, I will demonstrate how C++ objects can be used to
seamlessly interact with Python, for example to use Python's logging
package as usual while the actual logging is handled by our C++
application.&lt;/p&gt;
&lt;p&gt;With this combination of both worlds, we achieved a desirable mix of
virtues: safe, reliable operations; good run-time performance; fast
development; and highly expressive, unit testable core domain logic.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michael KÃ¶nig</dc:creator><pubDate>Wed, 23 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-23:europython-2014/embedding-python-charming-the-snake-with-c.html</guid></item></channel></rss>