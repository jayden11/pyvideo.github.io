<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="http://pyvideo.org/" rel="alternate"></link><link href="http://pyvideo.org/feeds/speaker_clinton-roy.atom.xml" rel="self"></link><id>http://pyvideo.org/</id><updated>2016-09-11T00:00:00+00:00</updated><entry><title>More testing with fewer tests</title><link href="http://pyvideo.org/kiwi-pycon-2016/more-testing-with-fewer-tests.html" rel="alternate"></link><published>2016-09-11T00:00:00+00:00</published><updated>2016-09-11T00:00:00+00:00</updated><author><name>Clinton Roy</name></author><id>tag:pyvideo.org,2016-09-11:kiwi-pycon-2016/more-testing-with-fewer-tests.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Clinton Roy
&lt;a class="reference external" href="https://kiwi.pycon.org/schedule/presentation/113/"&gt;https://kiwi.pycon.org/schedule/presentation/113/&lt;/a&gt;
We all wish we were were testing more, but tests are ugly, a pain to write and are brittle. Property based testing helps to solve all of these problems. Now, with Hypothesis, Python has an outstanding toolkit to write property based tests.&lt;/p&gt;
</summary></entry><entry><title>More testing with fewer tests</title><link href="http://pyvideo.org/pycon-au-2016/more-testing-with-fewer-tests.html" rel="alternate"></link><published>2016-08-15T00:00:00+00:00</published><updated>2016-08-15T00:00:00+00:00</updated><author><name>Clinton Roy</name></author><id>tag:pyvideo.org,2016-08-15:pycon-au-2016/more-testing-with-fewer-tests.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Clinton Roy
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/188/view_talk"&gt;https://2016.pycon-au.org/schedule/188/view_talk&lt;/a&gt;
We all wish we were were testing more, but tests are ugly, a pain to write and are brittle. Property based testing helps to solve all of these problems. Now, with Hypothesis, Python has an outstanding toolkit to write property based tests.&lt;/p&gt;
&lt;p&gt;With Hypothesis, instead of writing individual tests, you describe properties of your code and Hypothesis generates the test cases for you. This frees you from writing repetitive and error prone test cases. Hypothesis will generate many more test cases than you'll ever be able to bare writing, and will find more bugs.&lt;/p&gt;
&lt;p&gt;Hypothesis has plugins for Django and numpy to help you generate test cases for these two frameworks.&lt;/p&gt;
</summary></entry><entry><title>Lrparsing, when regular expressions aren't enough</title><link href="http://pyvideo.org/pycon-au-2015/lrparsing-when-regular-expressions-arent-enough.html" rel="alternate"></link><published>2015-08-04T00:00:00+00:00</published><updated>2015-08-04T00:00:00+00:00</updated><author><name>Clinton Roy</name></author><id>tag:pyvideo.org,2015-08-04:pycon-au-2015/lrparsing-when-regular-expressions-arent-enough.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lrparsing is a fast, well documented and tested parsing infrastructure
for Python. Parsing infrastructures are used when the input to be parsed
is too complex to be done by regular expressions alone. Parsing
infrastructures are ideally suited to parsing programming languages and
configuration files. Lrparsing is roughly equivalent to the combination
of Flex and Bison, except completely implemented in Python, and is thus
very Pythonic.&lt;/p&gt;
&lt;p&gt;The rest of the abstract uses the following Python snippet as an
example:&lt;/p&gt;
&lt;p&gt;1 if option else 2&lt;/p&gt;
&lt;p&gt;lrparsing provides both a lexer (which breaks the input down into
tokens, e.g.:&lt;/p&gt;
&lt;p&gt;['1', 'if' , 'option', 'else', '2']&lt;/p&gt;
&lt;p&gt;and a parser generator, which produces a concrete parse tree:&lt;/p&gt;
&lt;p&gt;(«ternary», («bool», 'option'), («expr», '1')), («expr», '2')))&lt;/p&gt;
&lt;p&gt;Lrparsing provides Pythonic syntax support to easily construct parsers
for programming languages, Domain Specific Languages and configuration
file formats.&lt;/p&gt;
&lt;p&gt;Lrparsing is very well suited to constructing Concrete Parse Trees but
has little support for creating Abstract Syntax Trees (AST), which are
much easier to use: My work has added Abstract Syntax Tree support to
lrparsing, yielding exactly the same AST nodes that the Python AST
module supports:&lt;/p&gt;
&lt;p&gt;IfExp(condition, 1, 2)&lt;/p&gt;
&lt;p&gt;This talk will give an overview of the major features of Lrparsing, then
look at my work to add AST support.&lt;/p&gt;
</summary></entry></feed>