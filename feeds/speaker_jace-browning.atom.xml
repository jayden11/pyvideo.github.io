<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="http://pyvideo.org/" rel="alternate"></link><link href="http://pyvideo.org/feeds/speaker_jace-browning.atom.xml" rel="self"></link><id>http://pyvideo.org/</id><updated>2015-08-02T00:00:00+00:00</updated><entry><title>Synchronizing Objects to YAML using Black Magic</title><link href="http://pyvideo.org/pyohio-2015/synchronizing-objects-to-yaml-using-black-magic.html" rel="alternate"></link><published>2015-08-02T00:00:00+00:00</published><updated>2015-08-02T00:00:00+00:00</updated><author><name>Jace Browning</name></author><id>tag:pyvideo.org,2015-08-02:pyohio-2015/synchronizing-objects-to-yaml-using-black-magic.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lately, I've been running into many situations where I'd like to store
program configuration and/or data in version control. YORM was born to
provide automatic, bidirectional, and human-friendly mappings of Python
object attributes to YAML files. In order to explain the inner-workings
of this library, I'll be diving into some of the less common features of
Python that I learned along the way.&lt;/p&gt;
</summary><category term="talk"></category></entry></feed>