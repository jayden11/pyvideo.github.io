<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="http://pyvideo.org/" rel="alternate"></link><link href="http://pyvideo.org/feeds/speaker_stephen-hoover.atom.xml" rel="self"></link><id>http://pyvideo.org/</id><updated>2016-05-07T00:00:00+00:00</updated><entry><title>Building a Cloud based Data Science Platform with Python</title><link href="http://pyvideo.org/scipy-2015/building-a-cloud-based-data-science-platform-with-python.html" rel="alternate"></link><published>2015-07-09T00:00:00+00:00</published><updated>2015-07-09T00:00:00+00:00</updated><author><name>Stephen Hoover</name></author><id>tag:pyvideo.org,2015-07-09:scipy-2015/building-a-cloud-based-data-science-platform-with-python.html</id><summary type="html"></summary></entry><entry><title>Pystan: Bayesian Inference for Fun and Profit</title><link href="http://pyvideo.org/depy-2016/pystan-bayesian-inference-for-fun-and-profit.html" rel="alternate"></link><published>2016-05-07T00:00:00+00:00</published><updated>2016-05-07T00:00:00+00:00</updated><author><name>Stephen Hoover</name></author><id>tag:pyvideo.org,2016-05-07:depy-2016/pystan-bayesian-inference-for-fun-and-profit.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Probabilistic programming languages offer a flexible and expressive way to model data by treating random variables as first-class objects. Stan is a popular and well-supported library which allows users to write models in the Stan programming language and use MCMC methods to perform Bayesian inference. Stan itself is written in C++, and has a Python interface through the PyStan package. In this talk, I'll show off some of the capabilities of PyStan and go through a simple practical example of Bayesian inference in Python.&lt;/p&gt;
</summary></entry><entry><title>The wonder and the horror of the mock module</title><link href="http://pyvideo.org/chipy/the-wonder-and-the-horror-of-the-mock-module.html" rel="alternate"></link><published>2016-03-10T00:00:00+00:00</published><updated>2016-03-10T00:00:00+00:00</updated><author><name>Stephen Hoover</name></author><id>tag:pyvideo.org,2016-03-10:chipy/the-wonder-and-the-horror-of-the-mock-module.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The &amp;quot;mock&amp;quot; module is a powerful (and fun!) tool for unit testing, and it comes built in to the the Python standard library. I'll give an overview of some of the more useful features of the module, and finish with a warning about the dangers of too much mockery.&lt;/p&gt;
</summary></entry><entry><title>Python-Powered Machine Learning in the Cloud</title><link href="http://pyvideo.org/depy-2015/python-powered-machine-learning-in-the-cloud.html" rel="alternate"></link><published>2015-05-30T00:00:00+00:00</published><updated>2015-05-30T00:00:00+00:00</updated><author><name>Stephen Hoover</name></author><id>tag:pyvideo.org,2015-05-30:depy-2015/python-powered-machine-learning-in-the-cloud.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python is a powerful, easy-to-use language which now has a wide range of
numerical and machine-learning open source libraries. At Civis
Analytics, we've built a cloud-based platform for data science which
empowers analysts to extract insights from their data with less effort.
The platform itself runs on Amazon Web Services, and the machine
learning workflows at the core of the platform are coded in Python.
Open-source Python libraries such as pandas, numpy, statsmodels, and
scikit-learn let our data scientists focus on high-level workflows and
greatly accelerate our development process. In this talk, I'll give an
overview of Civis's new data science platform, focusing on the
machine-learning aspects. I'll talk about how we use Python open-source
libraries to help with data analysis, and some of the challenges we've
overcome along the way.&lt;/p&gt;
</summary></entry></feed>