<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>http://pyvideo.org/</link><description></description><lastBuildDate>Sat, 16 Jul 2016 00:00:00 +0000</lastBuildDate><item><title>Write Less Code with Algebra!</title><link>http://pyvideo.org/pygotham-2016/write-less-code-with-algebra.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will describe an ongoing effort to treat agent interactions as abstract algebraic structures. The primary motivations for this attempt it are to increase code reuse, and ultimately to enable the creation of agent-based models through the filling in of forms, choosing among various module operations and chaining them together to produce customized agent behavior.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Gene Callahan</dc:creator><pubDate>Sat, 16 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-07-16:pygotham-2016/write-less-code-with-algebra.html</guid><category>Mathematics</category></item><item><title>Symbolic Computing with SymPy, SciPy2013 Tutorial, Part 1 of 6</title><link>http://pyvideo.org/scipy-2013/symbolic-computing-sympy-scipy2013-tutorial-part-1.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;SymPy is a pure Python library for symbolic mathematics. It aims to
become a full-featured computer algebra system (CAS) while keeping the
code as simple as possible in order to be comprehensible and easily
extensible. SymPy is written entirely in Python and does not require any
external libraries.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this tutorial we will introduce attendees to SymPy. We will start by
showing how to install and configure this Python module. Then we will
proceed to the basics of constructing and manipulating mathematical
expressions in SymPy. We will also discuss the most common issues and
differences from other computer algebra systems, and how to deal with
them. In the last part of this tutorial we will show how to solve
simple, yet illustrative, mathematical problems with SymPy.&lt;/p&gt;
&lt;p&gt;This knowledge should be enough for attendees to start using SymPy for
solving mathematical problems and hacking SymPy's internals (though
hacking core modules may require additional expertise).&lt;/p&gt;
&lt;p&gt;We expect attendees of this tutorial to have basic knowledge of Python
and mathematics. However, any more advanced topics will be explained
during presentation.&lt;/p&gt;
&lt;p&gt;Outline&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;installing, configuring and running SymPy&lt;/li&gt;
&lt;li&gt;basics of expressions in SymPy&lt;/li&gt;
&lt;li&gt;traversal and manipulation of expressions&lt;/li&gt;
&lt;li&gt;common issues and differences from other CAS&lt;/li&gt;
&lt;li&gt;setting up and using printers&lt;/li&gt;
&lt;li&gt;querying expression properties&lt;/li&gt;
&lt;li&gt;not only symbolics: numerical computing (mpmath)&lt;/li&gt;
&lt;li&gt;Mathematical problem solving with SymPy&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Required Packages&lt;/p&gt;
&lt;p&gt;Python 2.x or 3.x, SymPy (most recent version) Optional packages:
IPython, matplotlib, NetworkX, GMPY, numpy, scipy&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aaron Meurer</dc:creator><pubDate>Mon, 01 Jan 1990 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,1990-01-01:scipy-2013/symbolic-computing-sympy-scipy2013-tutorial-part-1.html</guid><category>mathematics</category><category>sympy</category></item></channel></rss>