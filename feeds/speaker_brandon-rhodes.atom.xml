<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="http://pyvideo.org/" rel="alternate"></link><link href="http://pyvideo.org/feeds/speaker_brandon-rhodes.atom.xml" rel="self"></link><id>http://pyvideo.org/</id><updated>2017-05-21T00:00:00+00:00</updated><entry><title>Final remarks and conference close</title><link href="http://pyvideo.org/pycon-us-2017/final-remarks-and-conference-close.html" rel="alternate"></link><published>2017-05-21T00:00:00+00:00</published><updated>2017-05-21T00:00:00+00:00</updated><author><name>Brandon Rhodes</name></author><id>tag:pyvideo.org,2017-05-21:pycon-us-2017/final-remarks-and-conference-close.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Final remarks and conference close&lt;/p&gt;
</summary></entry><entry><title>The Dictionary Even Mightier</title><link href="http://pyvideo.org/pycon-us-2017/the-dictionary-even-mightier.html" rel="alternate"></link><published>2017-05-20T00:00:00+00:00</published><updated>2017-05-20T00:00:00+00:00</updated><author><name>Brandon Rhodes</name></author><id>tag:pyvideo.org,2017-05-20:pycon-us-2017/the-dictionary-even-mightier.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Since my “Mighty Dictionary” talk at PyCon&amp;nbsp;2010, the Python dictionary
has evolved dramatically. Come learn about all of the the improvements,
up to and including the re-architecture that has just landed with
Python&amp;nbsp;3.6! The talk will discuss iterable views, the dictionary’s
dedicated comprehension syntax, random key ordering, the special
key-sharing dictionary designed to underlie object collections, and,
most famously of all, the new “compact dictionary” that cuts dictionary
storage substantially — and carries a fascinating side-effect.&lt;/p&gt;
&lt;p&gt;Each new feature that the talk discusses will be motivated by
considering the trade-offs inherent in hash table data structure design,
and followed up with hints about how you can now use the dictionary even
more effectively in your own code!&lt;/p&gt;
</summary></entry><entry><title>Welcome to Pycon 2017</title><link href="http://pyvideo.org/pycon-us-2017/welcome-to-pycon-2017.html" rel="alternate"></link><published>2017-05-19T00:00:00+00:00</published><updated>2017-05-19T00:00:00+00:00</updated><author><name>Brandon Rhodes</name></author><id>tag:pyvideo.org,2017-05-19:pycon-us-2017/welcome-to-pycon-2017.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Welcome to Pycon 2017&lt;/p&gt;
</summary></entry><entry><title>Using Python to power Selenium at scale</title><link href="http://pyvideo.org/pycon-ca-2016/using-python-to-power-selenium-at-scale.html" rel="alternate"></link><published>2016-11-13T00:00:00+00:00</published><updated>2016-11-13T00:00:00+00:00</updated><author><name>Brandon Rhodes</name></author><id>tag:pyvideo.org,2016-11-13:pycon-ca-2016/using-python-to-power-selenium-at-scale.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How can Python use Selenium to take command of a web browser and step it
through thousands of tests that have to run hundreds of times per day?
What anti-patterns emerge when an organization has been maintaining a
Selenium test suite for multiple years? At Dropbox, I and my co-workers
use Python to deliver test results to hundreds of other engineers. Come
learn the lessons we have learned so far!&lt;/p&gt;
&lt;div class="section" id="brandon-rhodes-bio"&gt;
&lt;h4&gt;Brandon Rhodes Bio&lt;/h4&gt;
&lt;p&gt;Brandon Rhodes works at Dropbox where he strives to deliver a
world-class Python development environment to his fellow Dropboxers. His
most popular open source projects are astronomy libraries for Python
that he has been maintaining since the late 1990s. He speaks at several
Python conferences a year, and in 2016–2017 is the Chair of the main
worldwide PyCon conference as it is held in Portland.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>Python and the Glories of the UNIX Tradition</title><link href="http://pyvideo.org/pycon-uk-2016/python-and-the-glories-of-the-unix-tradition.html" rel="alternate"></link><published>2016-09-16T00:00:00+00:00</published><updated>2016-09-16T00:00:00+00:00</updated><author><name>Brandon Rhodes</name></author><id>tag:pyvideo.org,2016-09-16:pycon-uk-2016/python-and-the-glories-of-the-unix-tradition.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Keynote presentation by: Brandon Rhodes&lt;/p&gt;
&lt;p&gt;In 1991 the newly-released Python language sallied forth into a profession already riven with rivalry between competing technical traditions. Learn about the stand that Python took on one side of a long-running argument, about the technology ideas it shares with UNIX, and about the important lessons from computing history that Python today delivers to programmers around the world.&lt;/p&gt;
</summary><category term="keynote"></category></entry><entry><title>DjangoCon EU 2013: Brandon Rhodes - Keynote</title><link href="http://pyvideo.org/djangocon-eu-2013/djangocon-eu-2013-brandon-rhodes-keynote.html" rel="alternate"></link><published>2013-05-15T00:00:00+00:00</published><updated>2013-05-15T00:00:00+00:00</updated><author><name>Brandon Rhodes</name></author><id>tag:pyvideo.org,2013-05-15:djangocon-eu-2013/djangocon-eu-2013-brandon-rhodes-keynote.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Videos from DjangoCon Europe 2013 are kindly provided by Heroku, a cloud application platform -- a new way of building and deploying web apps: &lt;a class="reference external" href="http://heroku.com/"&gt;http://heroku.com/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Thank you</title><link href="http://pyvideo.org/pycon-us-2016/thank-you.html" rel="alternate"></link><published>2016-06-01T00:00:00+00:00</published><updated>2016-06-01T00:00:00+00:00</updated><author><name>Brandon Rhodes</name></author><id>tag:pyvideo.org,2016-06-01:pycon-us-2016/thank-you.html</id><summary type="html"></summary></entry><entry><title>How To Shut Down Tolkien</title><link href="http://pyvideo.org/pygotham-2014/how-to-shut-down-tolkien.html" rel="alternate"></link><published>2014-10-20T00:00:00+00:00</published><updated>2014-10-20T00:00:00+00:00</updated><author><name>Brandon Rhodes</name></author><id>tag:pyvideo.org,2014-10-20:pygotham-2014/how-to-shut-down-tolkien.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;While Tolkien had friends who could devise ingenious ways to critique
his work without sounding critical, he had others whose remarks were
merciless and direct — to the point that Tolkien simply stopped sharing
new chapters as he wrote The Lord of the Rings. As programmers we share
many of the struggles of writers and artists, and we often react just as
badly to critique of our code. From Tolkien’s experience we will draw
lessons about how to make critique generous instead of damaging, and
actionable instead of personal.&lt;/p&gt;
</summary></entry><entry><title>PyOhio 2011: Names, Objects, and Plummeting From The Cliff</title><link href="http://pyvideo.org/pyohio-2011/pyohio-2011-names-objects-and-plummeting-from.html" rel="alternate"></link><published>1990-01-01T00:00:00+00:00</published><updated>1990-01-01T00:00:00+00:00</updated><author><name>Brandon Rhodes</name></author><id>tag:pyvideo.org,1990-01-01:pyohio-2011/pyohio-2011-names-objects-and-plummeting-from.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Names, Objects, and Plummeting From The Cliff&lt;/p&gt;
&lt;p&gt;Presented by Brandon Craig Rhodes&lt;/p&gt;
&lt;p&gt;The assignment statement is often the second thing a new Python
programmer learns, right after the &amp;quot;print&amp;quot; statement - but the beginner
can get seriously bogged down in all of the concepts that assignment
involves! Using a simple analogy, this talk will tackle those issues
head-on.&lt;/p&gt;
</summary><category term="assignment"></category><category term="learningpython"></category><category term="pyohio"></category><category term="pyohio2011"></category></entry><entry><title>PyOhio 2011: Procedures, Objects, Reusability: "httplib", "urllib2", and Their Discontents</title><link href="http://pyvideo.org/pyohio-2011/pyohio-2011-procedures-objects-reusability-q.html" rel="alternate"></link><published>1990-01-01T00:00:00+00:00</published><updated>1990-01-01T00:00:00+00:00</updated><author><name>Brandon Rhodes</name></author><id>tag:pyvideo.org,1990-01-01:pyohio-2011/pyohio-2011-procedures-objects-reusability-q.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Procedures, Objects, Reusability: httplib, urllib2 and their discontents&lt;/p&gt;
&lt;p&gt;Presented by Brandon Craig Rhodes&lt;/p&gt;
&lt;p&gt;Python supports two major programming paradigms: procedures, and object
orientation. This talk will claim that, when it comes to code re-use,
these two paradigms are NOT created equal: because object-oriented
programming encourages the programmer to write methods that consider
everything else inside of &amp;quot;self&amp;quot; to be fair game, it encourages highly
coupled code that proves brittle when extended.&lt;/p&gt;
</summary><category term="codereuse"></category><category term="httplib"></category><category term="oop"></category><category term="programming"></category><category term="pyohio"></category><category term="pyohio2011"></category><category term="reuse"></category><category term="self"></category><category term="urllib2"></category></entry><entry><title>PyOhio 2011: Squinting at Python Objects</title><link href="http://pyvideo.org/pyohio-2011/pyohio-2011-squinting-at-python-objects.html" rel="alternate"></link><published>1990-01-01T00:00:00+00:00</published><updated>1990-01-01T00:00:00+00:00</updated><author><name>Brandon Rhodes</name></author><id>tag:pyvideo.org,1990-01-01:pyohio-2011/pyohio-2011-squinting-at-python-objects.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Squinting at Python Objects&lt;/p&gt;
&lt;p&gt;Presented by Brandon Craig Rhodes&lt;/p&gt;
&lt;p&gt;Python classes can gain attributes as if by magic. Thanks to properties,
descriptors, and (if all else fails) &lt;strong&gt;getattr&lt;/strong&gt;() and
&lt;strong&gt;getattribute&lt;/strong&gt;(), the attempt to access obj.something can result in
arbitrary code execution. If you are wondering how your Python program
is using memory, this can result in a problem: each time you look to see
if something is there, it &lt;strong&gt;is&lt;/strong&gt;, because it is pulled in dynamically
the moment you look for it. In this talk, you will learn how to prod
Python objects gently, and hopefully learn their secrets - and their
memory usage - without actually invoking code.&lt;/p&gt;
</summary><category term="descriptors"></category><category term="getattr"></category><category term="getattribute"></category><category term="optimizing"></category><category term="properties"></category><category term="pyohio"></category><category term="pyohio2011"></category></entry><entry><title>Python Design Patterns 1</title><link href="http://pyvideo.org/pyohio-2012/python-design-patterns-1.html" rel="alternate"></link><published>2012-07-29T00:00:00+00:00</published><updated>2012-07-29T00:00:00+00:00</updated><author><name>Brandon Rhodes</name></author><id>tag:pyvideo.org,2012-07-29:pyohio-2012/python-design-patterns-1.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;The Python community has learned a lot about how to use our language
since we started back in the 1990s, and this talk will use simple
one-slide programs to illustrate the crucial refactorings that can help
make a large real-life application far more testable and maintainable
while making its code easier to re-use. This will not be a re-hash of
Gang-of-Four refactorings, but specific to Python.&lt;/p&gt;
</summary></entry><entry><title>PyOhio 2013 Keynote: Sine Qua Nons</title><link href="http://pyvideo.org/pyohio-2013/keynote-4.html" rel="alternate"></link><published>2013-07-27T00:00:00+00:00</published><updated>2013-07-27T00:00:00+00:00</updated><author><name>Brandon Rhodes</name></author><id>tag:pyvideo.org,2013-07-27:pyohio-2013/keynote-4.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;What are the key features of a modern dynamic language like Python that
let a programmer make progress even against difficult problems, even on
days when things are not going well? Starting simple and then ramping up
to complex, Brandon takes us from how beginners can use a Python
dictionary to pair up matching data, to how to use ctypes to work around
limitations in the built-in Python SSL module, as he takes us through
the tools and approaches that for a Python programmer are all part of a
day's work — the features without which we would not be as productive.&lt;/p&gt;
</summary><category term="talk"></category></entry><entry><title>The Clean Architecture in Python</title><link href="http://pyvideo.org/pyohio-2014/the-clean-architecture-in-python.html" rel="alternate"></link><published>2014-07-27T00:00:00+00:00</published><updated>2014-07-27T00:00:00+00:00</updated><author><name>Brandon Rhodes</name></author><id>tag:pyvideo.org,2014-07-27:pyohio-2014/the-clean-architecture-in-python.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Even design-conscious programmers find large applications difficult to
maintain. Come learn about how the recently propounded “Clean
Architecture” applies in Python, and how this high-level design pattern
fits particularly well with the features of the Python language and
answers questions that experienced programmers have been asking. (An
update of my un-recorded talk from PyCon Ireland 2013!)&lt;/p&gt;
</summary><category term="talk"></category></entry><entry><title>Watch your Python script with strace</title><link href="http://pyvideo.org/pyohio-2014/watch-your-python-script-with-strace.html" rel="alternate"></link><published>2014-07-26T00:00:00+00:00</published><updated>2014-07-26T00:00:00+00:00</updated><author><name>Brandon Rhodes</name></author><id>tag:pyvideo.org,2014-07-26:pyohio-2014/watch-your-python-script-with-strace.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Modern operating systems sandbox each process inside of a virtual memory
map from which direct I/O operations are generally impossible. Instead,
a process has to ask the operating system every time it wants to modify
a file or communicate bytes over the network. By using operating system
specific tools to watch the system calls a Python script is making --
using &amp;quot;strace&amp;quot; under Linux or &amp;quot;truss&amp;quot; under Mac OS X -- you can study
how a program is behaving and address several different kinds of bugs.&lt;/p&gt;
</summary><category term="talk"></category></entry><entry><title>Pandas Dataframes At The Cinema</title><link href="http://pyvideo.org/pyohio-2015/pandas-dataframes-at-the-cinema.html" rel="alternate"></link><published>2015-08-01T00:00:00+00:00</published><updated>2015-08-01T00:00:00+00:00</updated><author><name>Brandon Rhodes</name></author><id>tag:pyvideo.org,2015-08-01:pyohio-2015/pandas-dataframes-at-the-cinema.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Using data from the Internet Movie Database, students will use the
Pandas data analysis library to search the data and answer questions
about it. This will be a more focused version of the tutorial I gave at
PyCon this year, with an emphasis on demonstrations that get the
students ready to go home and work on the several hours' worth of fun
exercises that the full tutorial includes.&lt;/p&gt;
</summary><category term="talk"></category></entry><entry><title>Sunday Lightning Talks</title><link href="http://pyvideo.org/pyohio-2016/sunday-lightning-talks.html" rel="alternate"></link><published>2016-07-31T00:00:00+00:00</published><updated>2016-07-31T00:00:00+00:00</updated><author><name>Brandon Rhodes</name></author><id>tag:pyvideo.org,2016-07-31:pyohio-2016/sunday-lightning-talks.html</id><summary type="html"></summary></entry><entry><title>Django: a Data Shovel With a Future</title><link href="http://pyvideo.org/djangocon-2014/django-a-data-shovel-with-a-future.html" rel="alternate"></link><published>2014-09-19T00:00:00+00:00</published><updated>2014-09-19T00:00:00+00:00</updated><author><name>Brandon Rhodes</name></author><id>tag:pyvideo.org,2014-09-19:djangocon-2014/django-a-data-shovel-with-a-future.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Help us caption &amp;amp; translate this video!&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://amara.org/v/FPWf/"&gt;http://amara.org/v/FPWf/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>A Python Æsthetic: Beauty and Why I Python</title><link href="http://pyvideo.org/pycon-ca-2012/a-python-sthetic-beauty-and-why-i-python.html" rel="alternate"></link><published>2012-11-10T00:00:00+00:00</published><updated>2012-11-10T00:00:00+00:00</updated><author><name>Brandon Rhodes</name></author><id>tag:pyvideo.org,2012-11-10:pycon-ca-2012/a-python-sthetic-beauty-and-why-i-python.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Why did I start using Python in the late 1990s? Was it for any of the
reasons that I remain a fan today? In this talk we will explore how
Python, even while training us to avoid and become blind to its rough
edges, works to teach us new ways of making programs beautiful. Even
novices should learn new things to love about Python by listening to
this talk!&lt;/p&gt;
</summary></entry><entry><title>Skyfield and 15 Years of Bad APIs</title><link href="http://pyvideo.org/pycon-ca-2013/skyfield-and-15-years-of-bad-apis.html" rel="alternate"></link><published>2013-08-10T00:00:00+00:00</published><updated>2013-08-10T00:00:00+00:00</updated><author><name>Brandon Rhodes</name></author><id>tag:pyvideo.org,2013-08-10:pycon-ca-2013/skyfield-and-15-years-of-bad-apis.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;I released the first version of PyEphem in 1998. Built with SWIG, it
made astronomical calculations in Python only slightly more convenient
than writing C code to make raw calls to the libastro library. A massive
rewrite five years later improved the interface, but a decade of
fielding questions from users has convinced me to re-think how an API
can better help programmers cope with an unfamiliar and complex domain
like astronomy. This talk will explore how API design, NumPy
integration, and modern high-performance Python computation combine in
Skyfield, the new pure-Python astronomy library that I will release
during the PyCon Canada sprints!&lt;/p&gt;
</summary><category term="talk"></category></entry><entry><title>The Mighty Dictionary (#55)</title><link href="http://pyvideo.org/pycon-us-2010/the-mighty-dictionary-55.html" rel="alternate"></link><published>2010-02-19T00:00:00+00:00</published><updated>2010-02-19T00:00:00+00:00</updated><author><name>Brandon Rhodes</name></author><id>tag:pyvideo.org,2010-02-19:pycon-us-2010/the-mighty-dictionary-55.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Mighty Dictionary&lt;/p&gt;
&lt;p&gt;Presented by Brandon Craig Rhodes&lt;/p&gt;
&lt;p&gt;Both newcomers and experienced developers alike love Python's built-in
data types â€” especially dictionaries! But how do dictionaries work?
What do they do better than other container types, and where, on the
other hand, are their weaknesses? Using simple, vivid diagrams that show
the secrets of how the dictionary is implemented, and a series of
progressively interesting examples of its behavior, we will train the
Python developer's mind to picture what the dictionary is doing in just
enough detail to make good decisions, as your data sets get larger,
about when to use dictionaries and when other data structures might be
more appropriate.&lt;/p&gt;
</summary><category term="dict"></category><category term="pycon"></category><category term="pycon2010"></category></entry><entry><title>Python, Linkers, and Virtual Memory</title><link href="http://pyvideo.org/pycon-us-2012/python-linkers-and-virtual-memory.html" rel="alternate"></link><published>2012-03-11T00:00:00+00:00</published><updated>2012-03-11T00:00:00+00:00</updated><author><name>Brandon Rhodes</name></author><id>tag:pyvideo.org,2012-03-11:pycon-us-2012/python-linkers-and-virtual-memory.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Why does “top” show that your Python process uses 110&amp;nbsp;MB of virtual
memory but has a resident set size of 9&amp;nbsp;MB? Does it consume more memory
to spawn several interpreters, or to run one Python and have it fork()
further workers? What is an “undefined symbol,” anyway? Learn about how
an operating system manages memory, loads shared libraries, and what
this means for Python servers and applications.&lt;/p&gt;
</summary></entry><entry><title>Flexing SQLAlchemy's Relational Power</title><link href="http://pyvideo.org/pycon-us-2012/flexing-sqlalchemys-relational-power.html" rel="alternate"></link><published>2012-03-10T00:00:00+00:00</published><updated>2012-03-10T00:00:00+00:00</updated><author><name>Brandon Rhodes</name></author><id>tag:pyvideo.org,2012-03-10:pycon-us-2012/flexing-sqlalchemys-relational-power.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;How do you take the big step from casual SQLAlchemy user, who treats
your database as a mysterious object store, to advanced power user, who
optimizes critical queries, plans indexing and migrations, and generates
efficient reports? This talk will teach you how databases think; why
humanity invented the Relational Algebra; and how SQLAlchemy grants you
access to relational power.&lt;/p&gt;
</summary></entry><entry><title>Documenting Your Project With Sphinx</title><link href="http://pyvideo.org/pycon-us-2012/documenting-your-project-with-sphinx.html" rel="alternate"></link><published>2012-03-08T00:00:00+00:00</published><updated>2012-03-08T00:00:00+00:00</updated><author><name>Brandon Rhodes</name></author><id>tag:pyvideo.org,2012-03-08:pycon-us-2012/documenting-your-project-with-sphinx.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Python projects can succeed or fail because of their documentation.
Thanks to Sphinx, Python now has a “documentation framework” with
indexing, syntax highlighting, and integration with your code. Students
will be given a small undocumented Python package, and during the
exercises they will give the package a tutorial and reference manual.
Plus: deployment and theming!&lt;/p&gt;
</summary></entry><entry><title>SQL for Python Developers</title><link href="http://pyvideo.org/pycon-us-2012/sql-for-python-developers.html" rel="alternate"></link><published>2012-03-07T00:00:00+00:00</published><updated>2012-03-07T00:00:00+00:00</updated><author><name>Brandon Rhodes</name></author><id>tag:pyvideo.org,2012-03-07:pycon-us-2012/sql-for-python-developers.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Relational databases are often the bread-and-butter of large-scale data
storage, yet they are often poorly understood by Python programmers.
Organizations even split programmers into SQL and front-end teams, each
of which jealously guards its turf. These tutorials will take what you
already know about Python programming, and advance into a new realm: SQL
programming and database design.&lt;/p&gt;
</summary></entry><entry><title>The Naming of Ducks: Where Dynamic Types Meet Smart Conventions</title><link href="http://pyvideo.org/pycon-us-2013/the-naming-of-ducks-where-dynamic-types-meet-sma.html" rel="alternate"></link><published>2013-03-15T00:00:00+00:00</published><updated>2013-03-15T00:00:00+00:00</updated><author><name>Brandon Rhodes</name></author><id>tag:pyvideo.org,2013-03-15:pycon-us-2013/the-naming-of-ducks-where-dynamic-types-meet-sma.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;While Java and C# use static type declarations to eliminate ambiguity,
the Python programmer must survive through sheer clarity and consistency
in naming variables. We will explore the deep unspoken conventions that
the Python community has developed and honed over two decades to make
Python code readable and meaningful within the freedom that a
dynamically-typed language grants us.&lt;/p&gt;
</summary><category term="talk"></category></entry><entry><title>Documenting Your Project in Sphinx</title><link href="http://pyvideo.org/pycon-us-2013/documenting-your-project-in-sphinx.html" rel="alternate"></link><published>2013-03-14T00:00:00+00:00</published><updated>2013-03-14T00:00:00+00:00</updated><author><name>Brandon Rhodes</name></author><id>tag:pyvideo.org,2013-03-14:pycon-us-2013/documenting-your-project-in-sphinx.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Projects can succeed or fail because of their documentation. When you
write, you need to concentrate on your prose—not on how to get text
rendered, indexed, highlighted, and cross-referenced. The Sphinx
documentation framework exists to make these parts easy so you can focus
on writing. This tutorial will use hands-on exercises to teach you to
write, theme, and deploy documentation using Sphinx!&lt;/p&gt;
</summary><category term="tutorial"></category></entry><entry><title>The Day of the EXE Is Upon Us</title><link href="http://pyvideo.org/pycon-us-2014/the-day-of-the-exe-is-upon-us.html" rel="alternate"></link><published>2014-04-13T00:00:00+00:00</published><updated>2014-04-13T00:00:00+00:00</updated><author><name>Brandon Rhodes</name></author><id>tag:pyvideo.org,2014-04-13:pycon-us-2014/the-day-of-the-exe-is-upon-us.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;It was once quite painful to build your Python app as a single .exe
file. Support forums filled with lamentations as users struggled with
primitive tools. But today, two separate tools exist for compiling your
Python to real machine language! Come learn about how one of the biggest
problems in commercial and enterprise software has now been solved and
how you can benefit from this achievement.&lt;/p&gt;
</summary></entry><entry><title>All Your Ducks In A Row: Data Structures in the Standard Library and Beyond</title><link href="http://pyvideo.org/pycon-us-2014/all-your-ducks-in-a-row-data-structures-in-the-s.html" rel="alternate"></link><published>2014-04-12T00:00:00+00:00</published><updated>2014-04-12T00:00:00+00:00</updated><author><name>Brandon Rhodes</name></author><id>tag:pyvideo.org,2014-04-12:pycon-us-2014/all-your-ducks-in-a-row-data-structures-in-the-s.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Why are Python programmers crazy about lists and dictionaries, when
other languages tout bitmaps, linked lists, and B+ trees? Are we missing
out? Come learn how data structures are implemented on bare metal, how
to select the right data structure, how the list and dictionary cover a
wide swath of use cases, and when to dip into the Standard Library or a
third-party package for an alternative.&lt;/p&gt;
</summary></entry><entry><title>Closing Messages</title><link href="http://pyvideo.org/pycon-us-2015/closing-messages.html" rel="alternate"></link><published>2015-04-12T00:00:00+00:00</published><updated>2015-04-12T00:00:00+00:00</updated><author><name>Brandon Rhodes</name></author><id>tag:pyvideo.org,2015-04-12:pycon-us-2015/closing-messages.html</id><summary type="html"></summary></entry><entry><title>Oh, Come On Who Needs Bytearrays</title><link href="http://pyvideo.org/pycon-us-2015/oh-come-on-who-needs-bytearrays.html" rel="alternate"></link><published>2015-04-12T00:00:00+00:00</published><updated>2015-04-12T00:00:00+00:00</updated><author><name>Brandon Rhodes</name></author><id>tag:pyvideo.org,2015-04-12:pycon-us-2015/oh-come-on-who-needs-bytearrays.html</id><summary type="html"></summary></entry><entry><title>Pandas From The Ground Up</title><link href="http://pyvideo.org/pycon-us-2015/pandas-from-the-ground-up.html" rel="alternate"></link><published>2015-04-12T00:00:00+00:00</published><updated>2015-04-12T00:00:00+00:00</updated><author><name>Brandon Rhodes</name></author><id>tag:pyvideo.org,2015-04-12:pycon-us-2015/pandas-from-the-ground-up.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The typical Pandas user learns one dataframe method at a time, slowly
scraping features together through trial and error until they can solve
the task in front of them. In this tutorial you will re-learn how to
think about dataframes from the ground up, and discover how to select
intelligently from their abilities to solve your data processing
problems through direct and deliberately-chosen steps.&lt;/p&gt;
</summary></entry></feed>