<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>http://pyvideo.org/</link><description></description><lastBuildDate>Sun, 18 Sep 2016 00:00:00 +0000</lastBuildDate><item><title>The Ladder to Python 3</title><link>http://pyvideo.org/pycon-uk-2015/the-ladder-to-python-3.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;quot;Python 3.0 final was released on December 3rd, 2008.&amp;quot;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Python 3.0 Release notes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;quot;The End Of Life date (EOL, sunset date) for Python 2.7 has been
moved [...] to 2020.&amp;quot;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;PEP 373: Python 2.7 Release Schedule&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Migrating to Python 3 is not a big bang, it's a sequence of steps, like
the rungs of a ladder that spans from 2008 to 2020.&lt;/p&gt;
&lt;p&gt;In 2015, many people still start new projects in Python 2. Many of us
are shackled to Python 2 for work. Some of us don't even have a
migration plan. Many people at this conference, if asked to run
&amp;quot;Python&amp;quot;, will launch Python 2.&lt;/p&gt;
&lt;p&gt;Daniel will encourage you to grasp the ladder, put your feet firmly on
it, and take the next step in climbing to Python 3.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniel Pope</dc:creator><pubDate>Sun, 20 Sep 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-09-20:pycon-uk-2015/the-ladder-to-python-3.html</guid></item><item><title>Scripting across hosts with Chopsticks</title><link>http://pyvideo.org/pycon-uk-2016/scripting-across-hosts-with-chopsticks.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Daniel Pope&lt;/p&gt;
&lt;p&gt;Chopsticks lets your import and run Python code on remote Unix hosts over SSH. It works with no code deployment and no preinstalled software other than Python and SSH. It has built-in support for running code on many hosts in parallel.&lt;/p&gt;
&lt;p&gt;Unlike Fabric or Ansible, Chopsticks not opinionated about the structure of the code you run, allowing it to be used for orchestration, auditing, diagnostics, monitoring probes, and more.&lt;/p&gt;
&lt;p&gt;Also unlike these, Chopsticks is not wedded to SSH, so it can transparently work on Docker containers over pipes, local subprocesses - and in future, sudo?&lt;/p&gt;
&lt;p&gt;Daniel will demonstrate Chopsticks in action, walk through the API, and explain the three clever tricks that Chopsticks is built on.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniel Pope</dc:creator><pubDate>Sun, 18 Sep 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-09-18:pycon-uk-2016/scripting-across-hosts-with-chopsticks.html</guid><category>Chopsticks</category></item><item><title>Writing Domain Specific Languages with Python</title><link>http://pyvideo.org/europython-2015/writing-domain-specific-languages-with-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Daniel Pope - Writing Domain Specific Languages with Python
[EuroPython 2015]
[24 July 2015]
[Bilbao, Euskadi, Spain]&lt;/p&gt;
&lt;p&gt;Python is an expressive general purpose programming language. Its
syntax provides many ways to represent structure and minimise code
repetition and boilerplate.&lt;/p&gt;
&lt;p&gt;But Python not always expressible enough. Perhaps when you've built a
complicated enough system with hard-to-express inter-relationships,
the code required to construct or operate on it can become
complicated, repetitive and unreadable. Or perhaps you have users
unfamiliar with Python who need to understand or edit a system. In
cases like these, stepping beyond the syntax and semantics of basic
Python can be an advantage.&lt;/p&gt;
&lt;p&gt;Daniel will describe various ways you can  implement your own Domain
Specific Languages, languages perhaps completely unlike Python that
can succinctly describe more complicated Python systems.&lt;/p&gt;
&lt;p&gt;This talk will cover:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;What and why of DSLs&lt;/li&gt;
&lt;li&gt;Metaprogramming tricks&lt;/li&gt;
&lt;li&gt;Writing simple parsers&lt;/li&gt;
&lt;li&gt;The libraries PLY and PyParsing&lt;/li&gt;
&lt;li&gt;Building tooling around your new DSLs&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniel Pope</dc:creator><pubDate>Fri, 07 Aug 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-08-07:europython-2015/writing-domain-specific-languages-with-python.html</guid></item><item><title>Pygame Zero</title><link>http://pyvideo.org/europython-2016/pygame-zero.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Daniel Pope - Pygame Zero
[EuroPython 2016]
[18 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/pygame-zero"&gt;https://ep2016.europython.eu//conference/talks/pygame-zero&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Pygame Zero is a new game engine for education, built on top of
Pygame. It makes writing your first games extremely simple, while
saving beginners from certain potential pitfalls. Daniel will
introduce Pygame Zero, walk through creating a simple game, and
discuss the background for Python in education and the design
philosophy behind Pygame Zero.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Pygame Zero is a new game engine for education, built on top of
Pygame. It makes writing your first games extremely simple, while
saving beginners from certain potential pitfalls. This talk will
introduce Pygame Zero, walk through creating a simple game, and
discuss the background for Python in education and the design
philosophy behind Pygame Zero.&lt;/p&gt;
&lt;p&gt;Pygame is a powerful set of libraries for graphics, sound, input and
more. But it is just a library: each program needs to import and set
up the libraries, implement a game loop and load resources among
numerous other concerns. While seasoned Pythonistas have no trouble
with this, teachers told us that they found it difficult to teach with
Pygame. There is simply too much boilerplate involved, and getting
students to reproduce the boilerplate perfectly before useful lessons
can begin takes too much time out of a 40-minute lesson.&lt;/p&gt;
&lt;p&gt;Pygame Zero is simple enough that a lesson can be broken down into
bitesize steps where meaningful progress can be made with just a
couple of lines of code at a time.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniel Pope</dc:creator><pubDate>Thu, 28 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-07-28:europython-2016/pygame-zero.html</guid></item><item><title>gevent: asynchronous I/O made easy</title><link>http://pyvideo.org/europython-2014/gevent-asynchronous-io-made-easy.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;gevent provides highly scalable asynchronous I/O without becoming a nest
of callbacks, or even needing code changes.&lt;/p&gt;
&lt;p&gt;Daniel will explain how to get started with gevent, discuss patterns for
its use and describe the differences with Twisted, Tornado and
Tulip/asyncio.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;It has been claimed &amp;quot;Callbacks are the new GOTO&amp;quot;. Most asynchronous IO
libraries use callbacks extensively.&lt;/p&gt;
&lt;p&gt;gevent (&lt;a class="reference external" href="http://www.gevent.org"&gt;http://www.gevent.org&lt;/a&gt;) uses coroutines to provide highly
scalable asynchronous I/O with a synchronous programming model that
doesn't need code changes and callbacks. By elegantly monkey patching
the Python standard library, both your code and all pure Python
libraries become asynchronous too, making a separate collection of
protocol implementations (in the style of Twisted) unnecessary.&lt;/p&gt;
&lt;p&gt;Code written like this is easier to understand, particularly for more
junior developers. Crucially, IO errors can be raised at the right
places.&lt;/p&gt;
&lt;p&gt;I will be introducing gevent's programming model, why it's easier, walk
through simple code samples, and discuss experiences and metaphors for
programming with it.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniel Pope</dc:creator><pubDate>Wed, 23 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-23:europython-2014/gevent-asynchronous-io-made-easy.html</guid></item></channel></rss>