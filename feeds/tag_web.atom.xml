<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="http://pyvideo.org/" rel="alternate"></link><link href="http://pyvideo.org/feeds/tag_web.atom.xml" rel="self"></link><id>http://pyvideo.org/</id><updated>2017-04-03T00:00:00+00:00</updated><entry><title>Joyful Python Web App development with Appier</title><link href="http://pyvideo.org/python-porto/Appier-Framework.html" rel="alternate"></link><published>2017-04-03T00:00:00+00:00</published><updated>2017-04-03T00:00:00+00:00</updated><author><name>João Magalhães</name></author><id>tag:pyvideo.org,2017-04-03:python-porto/Appier-Framework.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;João Magalhães, VP of Engineering at Platforme and the author of the web framework Appier shares his insights on joyful development for the web.&lt;/p&gt;
</summary><category term="Appier"></category><category term="framework"></category><category term="web"></category><category term="porto"></category><category term="portugal"></category></entry><entry><title>Open Data Dashboards &amp; Python Web Scraping</title><link href="http://pyvideo.org/pydata-dc-2016/open-data-dashboards-python-web-scraping.html" rel="alternate"></link><published>2016-10-09T00:00:00+00:00</published><updated>2016-10-09T00:00:00+00:00</updated><author><name>Marie Whittaker</name></author><id>tag:pyvideo.org,2016-10-09:pydata-dc-2016/open-data-dashboards-python-web-scraping.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData DC 2016&lt;/p&gt;
&lt;p&gt;Distilling a world of data down to a few key indicators can be an effective way of keeping an audience informed, and this concept is at the heart of a good dashboard. This talk will cover a few methods of scraping and reshaping open data for dashboard visualization, to automate the boring stuff so you have more time and energy to focus on the analysis and content.&lt;/p&gt;
&lt;p&gt;This talk will cover a basic scenario of curating open data into visualizations for an audience. The main goal is to automate data scraping/downloading and reshaping. I use python to automate data gathering, and Tableau and D3 as visualization tools -- but the process can be applied to numerous analytical/visualization suites.&lt;/p&gt;
&lt;p&gt;I'll discuss situations where a dashboard makes sense (and when one doesn't). I will make a case also that automation makes for a more seamless data gathering and updating process, but not always for smarter data analysis.&lt;/p&gt;
&lt;p&gt;Some python packages I'll cover for web scraping and downloading/reshaping open data include: openpyxl, pandas, xlsxwriter, and BeautifulSoup. I'll also touch on APIs.&lt;/p&gt;
</summary><category term="Data"></category><category term="scraping"></category><category term="web"></category></entry><entry><title>PyGotham 2011: Building scalable websites and API's with Brubeck</title><link href="http://pyvideo.org/pygotham-2011/pygotham-2011--building-scalable-websites-and-api.html" rel="alternate"></link><published>1990-01-01T00:00:00+00:00</published><updated>1990-01-01T00:00:00+00:00</updated><author><name>James Dennis</name></author><id>tag:pyvideo.org,1990-01-01:pygotham-2011/pygotham-2011--building-scalable-websites-and-api.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;In this talk I intend to teach people who know nothing about Brubeck how
to build and deploy an entire site, providing all the commonly needed
functionality we expect from other Python web frameworks.&lt;/p&gt;
</summary><category term="brubeck"></category><category term="pygotham"></category><category term="pygotham2011"></category><category term="web"></category></entry><entry><title>PyGotham 2011: Machine Learning for Web Developers</title><link href="http://pyvideo.org/pygotham-2011/pygotham-2011--machine-learning-for-web-developer.html" rel="alternate"></link><published>1990-01-01T00:00:00+00:00</published><updated>1990-01-01T00:00:00+00:00</updated><author><name>Al Barrentine</name></author><id>tag:pyvideo.org,1990-01-01:pygotham-2011/pygotham-2011--machine-learning-for-web-developer.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Machine learning deals with a class of algorithms which improve and
evolve as they process more data. It has wide-ranging applications in
recommendations, search, spam/fraud detection, facial recognition and
other areas. The algorithms themselves will be covered but the real
focus of this class is on how to use said algorithms in the web
applications we work on every day. I&amp;amp;aposll try to keep the math and
notation relatively light. Most of the algorithms you&amp;amp;aposll need to get
started with machine learning are implemented for you in the various
libraries. They comprise the &amp;quot;science&amp;quot; of machine learning and I hope
you will decide to learn it, but mastering that material is a
significant commitment of your time and mental energy (and has some
additional prerequisites including a strong understanding of linear
algebra). This class will focus on the &amp;quot;art&amp;quot; of machine learning, how to
think about machine learning algorithms and integrate them into your web
application.&lt;/p&gt;
</summary><category term="machine learning"></category><category term="pygotham"></category><category term="pygotham2011"></category><category term="web"></category></entry><entry><title>PyGotham 2011: Real-time Web: Gevent and Socket.io</title><link href="http://pyvideo.org/pygotham-2011/pygotham-2011-real-time-web-gevent-and-socketi.html" rel="alternate"></link><published>1990-01-01T00:00:00+00:00</published><updated>1990-01-01T00:00:00+00:00</updated><author><name>Richard D. Copeland, Jr.</name></author><id>tag:pyvideo.org,1990-01-01:pygotham-2011/pygotham-2011-real-time-web-gevent-and-socketi.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;There has been a lot of talk lately about how Node.js enables the
real-time web, but did you know you can do the same thing with Python?
This talk will show you how to use Gevent, ZeroMQ, and Socket.io to
build portable Python- powered real-time web applications.&lt;/p&gt;
</summary><category term="gevent"></category><category term="pygotham"></category><category term="pygotham2011"></category><category term="real-time"></category><category term="socket.io"></category><category term="web"></category><category term="zeromq"></category></entry><entry><title>Django Deployment for the Average Bloke</title><link href="http://pyvideo.org/chipy/django-deployment-for-the-average-bloke.html" rel="alternate"></link><published>2011-01-13T00:00:00+00:00</published><updated>2011-01-13T00:00:00+00:00</updated><author><name>Carl Karsten</name></author><id>tag:pyvideo.org,2011-01-13:chipy/django-deployment-for-the-average-bloke.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Deploying a Django/Pinax site on the following stack: Linux Debian Lenny
Apache mod_wsgi PostgreSQL.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This is the config you want to use if you don't know what you want to
use. You don't need to make any choices, you don't have to do any
research, and you don't even need to read the docs if you don't want to.
And as an added bonus, I show how to wget a vm image to deploy into with
network ports exposed. It is very much like working with a hosting
provider like Slice Host, and it makes a great framework for testing
server installs.&lt;/p&gt;
</summary><category term="apache"></category><category term="chipy"></category><category term="deployment"></category><category term="mod_wsgi"></category><category term="pinax"></category><category term="postgresql"></category><category term="web"></category></entry><entry><title>A Summer in the Wild</title><link href="http://pyvideo.org/djangocon-2011/djangocon-2011--a-summer-in-the-wild.html" rel="alternate"></link><published>1990-01-01T00:00:00+00:00</published><updated>1990-01-01T00:00:00+00:00</updated><author><name>Alex Gaynor</name></author><id>tag:pyvideo.org,1990-01-01:djangocon-2011/djangocon-2011--a-summer-in-the-wild.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A summer in the wild&lt;/p&gt;
&lt;p&gt;Presented by Alex Gaynor&lt;/p&gt;
&lt;p&gt;I've spent this past summer away from Django, working for Quora,
venturing into the depths of a foreign codebase, and making it faster by
running on PyPy. This talk will feature the lessons I've learned about
Django, PyPy, and web development in general.&lt;/p&gt;
</summary><category term="djangocon"></category><category term="djangocon2011"></category><category term="pypy"></category><category term="web"></category></entry><entry><title>Advanced Django Form Usage</title><link href="http://pyvideo.org/djangocon-2011/djangocon-2011--advanced-django-form-usage.html" rel="alternate"></link><published>1990-01-01T00:00:00+00:00</published><updated>1990-01-01T00:00:00+00:00</updated><author><name>Daniel Greenfeld</name></author><id>tag:pyvideo.org,1990-01-01:djangocon-2011/djangocon-2011--advanced-django-form-usage.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Advanced Django Form Usage&lt;/p&gt;
&lt;p&gt;Presented by Daniel Greenfeld, Miguel Araujo&lt;/p&gt;
&lt;p&gt;Django forms are really powerful but there are edge cases that can cause
a bit of anguish. This talk will go over how to handle many common
solutions not currently described in the core documentation. It will
also cover some useful third-party libraries and will end with
clarifications about what the state of form features will be in Django
1.4.&lt;/p&gt;
</summary><category term="djangocon"></category><category term="djangocon2011"></category><category term="forms"></category><category term="web"></category></entry><entry><title>Advanced security topics</title><link href="http://pyvideo.org/djangocon-2011/djangocon-2011--advanced-security-topics.html" rel="alternate"></link><published>1990-01-01T00:00:00+00:00</published><updated>1990-01-01T00:00:00+00:00</updated><author><name>Paul McMillan</name></author><id>tag:pyvideo.org,1990-01-01:djangocon-2011/djangocon-2011--advanced-security-topics.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Advanced security topics&lt;/p&gt;
&lt;p&gt;Presented by Paul McMillan&lt;/p&gt;
&lt;p&gt;An in-depth look (with demonstrations) at the how and why of several
advanced security topics. Discussion of ways to improve security of the
framework moving forward.&lt;/p&gt;
</summary><category term="djangocon"></category><category term="djangocon2011"></category><category term="security"></category><category term="web"></category></entry><entry><title>Best Practices for Front-End Django Developers</title><link href="http://pyvideo.org/djangocon-2011/djangocon-2011--best-practices-for-front-end-djan.html" rel="alternate"></link><published>1990-01-01T00:00:00+00:00</published><updated>1990-01-01T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,1990-01-01:djangocon-2011/djangocon-2011--best-practices-for-front-end-djan.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Best Practices for Front-End Django Developers&lt;/p&gt;
&lt;p&gt;Christine Cheung&lt;/p&gt;
&lt;p&gt;Considerations, best practices, tools, and more for front-end
development in Django.&lt;/p&gt;
</summary><category term="bestpractices"></category><category term="djangocon"></category><category term="djangocon2011"></category><category term="web"></category></entry><entry><title>Cache rules everything around me</title><link href="http://pyvideo.org/djangocon-2011/djangocon-2011--cache-rules-everything-around-me.html" rel="alternate"></link><published>1990-01-01T00:00:00+00:00</published><updated>1990-01-01T00:00:00+00:00</updated><author><name>Jacob Burch</name></author><id>tag:pyvideo.org,1990-01-01:djangocon-2011/djangocon-2011--cache-rules-everything-around-me.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Cache rules everything around me&lt;/p&gt;
&lt;p&gt;Presented by Jacob Burch, Noah Silas&lt;/p&gt;
&lt;p&gt;This talk aims to briefly introduce the core concepts of caching and
covers the best practices of using Django’s cache backend.&lt;/p&gt;
</summary><category term="cache"></category><category term="caching"></category><category term="djangocon"></category><category term="djangocon2011"></category><category term="memcache"></category><category term="web"></category></entry><entry><title>RTFM -- wRite The Friendly Manual</title><link href="http://pyvideo.org/djangocon-2011/djangocon-2011--rtfm----write-the-friendly-manual.html" rel="alternate"></link><published>1990-01-01T00:00:00+00:00</published><updated>1990-01-01T00:00:00+00:00</updated><author><name>James Bennett</name></author><id>tag:pyvideo.org,1990-01-01:djangocon-2011/djangocon-2011--rtfm----write-the-friendly-manual.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;RTFM - wRite The Friendly Manual&lt;/p&gt;
&lt;p&gt;Presented by James Bennett&lt;/p&gt;
&lt;p&gt;An introduction to writing great documentation. Not just in the &amp;quot;here's
some tools and how to use them&amp;quot; sense, but in the &amp;quot;here's why you should
care about documentation&amp;quot; sense and the &amp;quot;how to write things people will
read&amp;quot; sense.&lt;/p&gt;
</summary><category term="djangocon"></category><category term="djangocon2011"></category><category term="docs"></category><category term="web"></category></entry><entry><title>Safely deploying on the cutting edge</title><link href="http://pyvideo.org/djangocon-2011/djangocon-2011--safely-deploying-on-the-cutting-e.html" rel="alternate"></link><published>1990-01-01T00:00:00+00:00</published><updated>1990-01-01T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,1990-01-01:djangocon-2011/djangocon-2011--safely-deploying-on-the-cutting-e.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Safely deploying on the cutting edge&lt;/p&gt;
&lt;p&gt;Eric Holscher&lt;/p&gt;
&lt;p&gt;This talk will go through the deployment system that we have built at
Urban Airship. It will cover the process that allows us to automate our
deployments, making it safe to deploy at any time. It's built on Fabric,
Gunicorn, Virtualenv, Rsync, Supervisord, and Python. We end up with
fully isolated environments for our services that are easy to manage.&lt;/p&gt;
</summary><category term="deploying"></category><category term="djangocon"></category><category term="djangocon2011"></category><category term="fabric"></category><category term="gunicorn"></category><category term="virtualenv"></category><category term="web"></category></entry><entry><title>Testing: The Developer Strikes Back</title><link href="http://pyvideo.org/djangocon-2011/djangocon-2011--testing--the-developer-strikes-ba.html" rel="alternate"></link><published>1990-01-01T00:00:00+00:00</published><updated>1990-01-01T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,1990-01-01:djangocon-2011/djangocon-2011--testing--the-developer-strikes-ba.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Testing: The Developer Strikes Back&lt;/p&gt;
&lt;p&gt;Sandy Strong&lt;/p&gt;
&lt;p&gt;“Code not tested is broken by design” - Jacob Kaplan-Moss&lt;/p&gt;
&lt;p&gt;Every programming project has unique testing needs. It’s not always easy
to understand what those needs are, or how to write tests that satisfy
them. One of our goals as developers is to write tests that minimize
failures in production that can cost our companies time, money,
resources, and in many cases, hours of sleep!&lt;/p&gt;
</summary><category term="coverage.py"></category><category term="djangocon"></category><category term="djangocon2011"></category><category term="jenkins"></category><category term="testing"></category><category term="web"></category></entry><entry><title>Y'all Wanna Scrape with Us? Content Ain't a Thing : Web Scraping With Our Favorite Python Libraries</title><link href="http://pyvideo.org/djangocon-2011/djangocon-2011--y--39-all-wanna-scrape-with-us--c.html" rel="alternate"></link><published>1990-01-01T00:00:00+00:00</published><updated>1990-01-01T00:00:00+00:00</updated><author><name>Katharine Jarmul</name></author><id>tag:pyvideo.org,1990-01-01:djangocon-2011/djangocon-2011--y--39-all-wanna-scrape-with-us--c.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Y'all Wanna Scrape with Us? Content Ain't a Thing: Web Scraping With Our
Favorite Python Libraries&lt;/p&gt;
&lt;p&gt;Presented by Katharine Jarmul&lt;/p&gt;
&lt;p&gt;Love or hate them, the top python scraping libraries have some hidden
gems and tricks that you can use to enhance, update and diversify your
Django models. This talk will teach you more advanced techniques to
aggregate content from RSS feeds, Twitter, Tumblr and normal old web
sites for your Django projects.&lt;/p&gt;
</summary><category term="djangocon"></category><category term="djangocon2011"></category><category term="lxml"></category><category term="scraping"></category><category term="web"></category></entry><entry><title>Browse and print problems and solutions</title><link href="http://pyvideo.org/europython-2011/browse-and-print-problems-and-solutions.html" rel="alternate"></link><published>2012-02-27T00:00:00+00:00</published><updated>2012-02-27T00:00:00+00:00</updated><author><name>Jonathan Fine</name></author><id>tag:pyvideo.org,2012-02-27:europython-2011/browse-and-print-problems-and-solutions.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Jonathan Fine - 21 June 2011 in &amp;quot;Track Tagliatelle&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;With the growth of the web, how we publish is changing. Paper alone is
not enough, web pages are also required. And for many web pages it is
not enough to rely on the browser’s print capabilities. Sphinx, used
since 2008 for Python’s documentation, is a creative response to this
tension.&lt;/p&gt;
&lt;p&gt;This talk will take a broader view of the problem. For example, many
browsers support web fonts for display but not for printing. Mathematics
on web pages is still difficult, but SVG holds out much promise not only
for mathematics but for tables and other complex typeset material.
Achieving accessibility remains difficult.&lt;/p&gt;
&lt;p&gt;Based on over 15 year’s experience in print and electronic publishing,
this talk will survey problems and emerging solutions. Software and
sites covered include LaTeX, PDF, SVG, MathJax, web-fonts, PediaPress,
Sphinx and arXiv.&lt;/p&gt;
</summary><category term="accessibility"></category><category term="sphinx"></category><category term="web"></category></entry><entry><title>A Python Takeover</title><link href="http://pyvideo.org/europython-2011/a-python-takeover.html" rel="alternate"></link><published>2011-07-24T00:00:00+00:00</published><updated>2011-07-24T00:00:00+00:00</updated><author><name>Mark Ramm-Christensen</name></author><id>tag:pyvideo.org,2011-07-24:europython-2011/a-python-takeover.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Mark Ramm-Christensen - 23 June 2011 in &amp;quot;Track
Lasagne&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Two years ago I started working on SourceForge with a couple of python
developers. Back then the site was written in PHP and was in some ways
buried in technical debt. Everything is different today, we have a
complete set of tools for Ticket tracking, Wiki documents, Git,
Mercurial, Subversion, and IRC - all written in Python, and now released
as open source software.&lt;/p&gt;
&lt;p&gt;This is the story of how the amazing libraries, tools, and talent in the
Python web community has radically changed an established company, and
allowed us to reinvent sourceforge.net.&lt;/p&gt;
&lt;p&gt;This talk will go over our tech stack, talk about the libraries we used,
the way we solved scalability, internationalization, and performance
issues issues. Ultimately we know that without python, we could not have
built a flexible plugin based system, and gotten permission from
management to open source it.&lt;/p&gt;
</summary><category term="community"></category><category term="performance"></category><category term="python,"></category><category term="sourceforge"></category><category term="web"></category></entry><entry><title>Data Driven Cache Invalidation</title><link href="http://pyvideo.org/europython-2011/data-driven-cache-invalidation.html" rel="alternate"></link><published>2011-07-24T00:00:00+00:00</published><updated>2011-07-24T00:00:00+00:00</updated><author><name>Magnus Hagander</name></author><id>tag:pyvideo.org,2011-07-24:europython-2011/data-driven-cache-invalidation.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Magnus Hagander - 23 June 2011 in &amp;quot;Track Ravioli&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In todays world, nobody (should) deploy a web application facing the
internet without having a proper caching system in place. There are many
different solutions to choose from, from manual use of memcached through
framework integrated caching to external caches like Squid or Varnish.
Most modern frameworks come with integrated functionality for at least
one of these methods, and often more than one.&lt;/p&gt;
&lt;p&gt;However, they often relies on all traffic going through the same
framework to work properly - a caching layer in Rails is hard to share
with one in Django. This talk will show a way to break the design rules
of these frameworks just a little, and have the database help solve this
problem.&lt;/p&gt;
&lt;p&gt;This talk will use a small application written in Python using Django to
illustrate the examples, but the method is language independent.
Unsurprisingly, the database used is PostgreSQL.&lt;/p&gt;
</summary><category term="cache"></category><category term="database"></category><category term="deploy"></category><category term="design"></category><category term="django"></category><category term="framework"></category><category term="web"></category></entry><entry><title>Deploying web applications to the cloud with Python</title><link href="http://pyvideo.org/europython-2011/deploying-web-applications-to-the-cloud-with-pyth.html" rel="alternate"></link><published>2011-07-24T00:00:00+00:00</published><updated>2011-07-24T00:00:00+00:00</updated><author><name>Nate Aune</name></author><id>tag:pyvideo.org,2011-07-24:europython-2011/deploying-web-applications-to-the-cloud-with-pyth.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Nate Aune - 23 June 2011 in &amp;quot;Track Ravioli&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How can Python help you deploy web applications to the cloud? Amazon EC2
provides virtual machines on demand but as a developer you still have to
configure these machines and push your code to them. Fabric is a Python
library that lets you execute commands on a remote machine, and Boto is
a Python library for interfacing with Amazon web services. By using
Fabric and Boto, you can easily create repeatable deployments and
provision new resources as needed with minimal effort.&lt;/p&gt;
&lt;p&gt;This talk will introduce Amazon Web Services and how to launch new
machines using simple Boto scripts, and how to get started making your
own repeatable deployments using Fabric scripts.&lt;/p&gt;
</summary><category term="boto"></category><category term="cloud"></category><category term="deploy"></category><category term="ec2"></category><category term="fabric"></category><category term="web"></category></entry><entry><title>Healthcare process management in Python: a use case</title><link href="http://pyvideo.org/europython-2011/healthcare-process-management-in-python-a-use-ca.html" rel="alternate"></link><published>2011-07-24T00:00:00+00:00</published><updated>2011-07-24T00:00:00+00:00</updated><author><name>Federico Caboni</name></author><id>tag:pyvideo.org,2011-07-24:europython-2011/healthcare-process-management-in-python-a-use-ca.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Federico Caboni - 24 June 2011 in &amp;quot;Track Tagliatelle &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk I'll describe our successful experience in introducing
Python into a system for blood collection tube labeling in laboratory
and hospital environments, based on IHE Technical Frameworks –the
industry standard for modeling and streamlining healthcare processes–
and designed to avoid human errors and ensure process traceability.&lt;/p&gt;
&lt;p&gt;During the talk I will explain why we chose Python in the first place,
how we've been able to leverage the language's features and
characteristics for our specific field and what problems and limitations
we faced.&lt;/p&gt;
&lt;p&gt;I will show specific instances of Python usage in different parts of the
project, including a low-level driver for laboratory automation
machinery, an asynchronous messaging module, the implementation of
IHE-compliant actors and the inevitable end-user web application,
implemented with Django.&lt;/p&gt;
&lt;p&gt;Using Python greatly helped us in building our system, allowing very
rapid prototyping cycles for both hardware and software, but during the
talk I'll also point out what we found was missing, and what would be
nice to have to ensure Python has its proper place as a viable platform
for designing streamlined healthcare workflows based on established
international standards.&lt;/p&gt;
</summary><category term="asynchronous"></category><category term="prototyping"></category><category term="web"></category></entry><entry><title>Scraping Techniques to Extract Advertisements from Web Pages</title><link href="http://pyvideo.org/europython-2011/scraping-techniques-to-extract-advertisements-fro.html" rel="alternate"></link><published>2011-07-24T00:00:00+00:00</published><updated>2011-07-24T00:00:00+00:00</updated><author><name>Mirko Urru</name></author><id>tag:pyvideo.org,2011-07-24:europython-2011/scraping-techniques-to-extract-advertisements-fro.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Mirko Urru,Stefano Cotta Ramusino - 24 June 2011 in
&amp;quot;Track Tagliatelle &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Online Advertising is an emerging research field, at the intersection of
Information Retrieval, Machine Learning, Optimization, and
Microeconomics. Its main goal is to choose the right ads to present to a
user engaged in a given task, such as Sponsored Search Advertising or
Contextual Advertising. The former puts ads on the page returned from a
Web search engine following a query. The latter puts ads within the
content of a generic, third party, Web page. The ads themselves are
selected and served by automated systems based on the content displayed
to the user.&lt;/p&gt;
&lt;p&gt;Web scraping is the set of techniques used to automatically get some
information from a website instead of manually copying it. In
particular, we're interested in studying and adopting scraping
techniques for: i. accessing tags as object members ii. finding out tags
whose name, contents or attributes match selection criteria iii.
accessing tag attributes by using a dictionary-like syntax.&lt;/p&gt;
&lt;p&gt;In this talk, we focus on the adoption of scraping techniques in the
contextual advertising field. In particular, we present a system aimed
at finding the most relevant ads for a generic web page p. Starting from
p, the system selects a set of its inlinks (i.e., the pages that link p)
and extracts the ads contained into them. Selection is performed
querying the Google search engine, whereas extraction is made by using
suitable scraping techniques.&lt;/p&gt;
</summary><category term="google"></category><category term="scraping"></category><category term="search"></category><category term="web"></category></entry><entry><title>What is Google App Engine?</title><link href="http://pyvideo.org/europython-2011/what-is-google-app-engine.html" rel="alternate"></link><published>2011-07-24T00:00:00+00:00</published><updated>2011-07-24T00:00:00+00:00</updated><author><name>Wesley J. Chun</name></author><id>tag:pyvideo.org,2011-07-24:europython-2011/what-is-google-app-engine.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] wesley chun - 23 June 2011 in &amp;quot;Track Tagliatelle&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Google App Engine is a unique hosting platform that lets you build
applications and run them in Google's data centers using the massive
global infrastructure built to run the Internet's most powerful company.
App Engine offers a development environment that uses familiar
technologies (Java and Python) and provides a powerful and robust set of
APIs to users while maintaining security and independence from other
apps running in the cloud. It is always free to get started so you can
try it out with no risk, and if you need additional computing resources,
you can purchase additional computing resources beyond the free quota
limits. (If you enable billing and trust us with your credit card, we
will extend your free quotas even further; you won't get charged until
you exceed those &lt;em&gt;extended&lt;/em&gt; quotas.) Scale your application to millions
of users and pay only for what you use at competitive market pricing.&lt;/p&gt;
&lt;p&gt;In this session, we provide an update of the newest features found in
the most recent releases of the App Engine platform. We also share some
suggestions for best practices to existing App Engine developers.&lt;/p&gt;
&lt;p&gt;Beginners to the App Engine platform will be interested in the
introductory workshop which may be offered (see description below).&lt;/p&gt;
&lt;p&gt;Google App Engine workshop&lt;/p&gt;
&lt;p&gt;In this tutorial, we'll give you a comprehensive introduction to the
platform in two/three components:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;1-hour Introduction to Cloud computing and Google App Engine seminar&lt;/li&gt;
&lt;li&gt;3-hour App Engine hands-on workshop/codelab&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the first hour, we review Cloud Computing as an industry and where
Google App Engine fits into the picture. Specifically, we discuss App
Engine as a PaaS solution because of the inherent challenges of building
web and other applications. We'll outline the architecture of App
Engine, what it's major components are, introduce its features and APIs,
discuss the service and how it works (including information on the free
quotas), present some information about current users and usage,
including integration with Google Apps, and finally, give an overview of
its enterprise edition called Google App Engine for Business.&lt;/p&gt;
&lt;p&gt;After the approximately one-hour lecture, we'll show you how to create
applications that run on App Engine by building a simple but real web
application from the ground up via a hands-on coding laboratory.
Although based on the online tutorial, this codelab goes up and beyond
what's in the documentation: you will get a more detailed step-by-step
instructions to replicate that example as well as have the opportunity
to extend your application with some of the newer APIs that come with
App Engine. The codelab will cover the Users service, non-relational
Datastore, and Memcache APIs. Time-permitting, we'll also discuss some
of the newest features found in recent App Engine releases.&lt;/p&gt;
</summary><category term="architecture"></category><category term="cloud"></category><category term="google"></category><category term="hosting"></category><category term="infrastructure"></category><category term="memcache"></category><category term="security"></category><category term="web"></category></entry><entry><title>How to build complex web applications having fun?</title><link href="http://pyvideo.org/europython-2011/how-to-build-complex-web-applications-having-fun.html" rel="alternate"></link><published>2011-07-21T00:00:00+00:00</published><updated>2011-07-21T00:00:00+00:00</updated><author><name>Andrew Mleczko</name></author><id>tag:pyvideo.org,2011-07-21:europython-2011/how-to-build-complex-web-applications-having-fun.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Andrew Mleczko - 22 June 2011 in &amp;quot;Track Ravioli &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Web development is a complexity challenge nowadays. Growing number of
functionalities results in customer expectations increase which makes
project design more difficult. Using proper tools that suite your
customer needs is essential.&lt;/p&gt;
&lt;p&gt;In this talk I would like to present two successful stories using
closely together Pyramid and Plone. Basing on these examples I wished to
highlight the main reasons for using Plone as a CMS only and letting
Pyramid do the rest (vertical application). Moreover, I will underscore
good and bad practices during integration process and how to make
farsighted architectural decisions in a right moment.&lt;/p&gt;
&lt;p&gt;Prerequisites: be familiarized with common python web framework
concepts.&lt;/p&gt;
</summary><category term="cms"></category><category term="design"></category><category term="framework"></category><category term="plone"></category><category term="pyramid"></category><category term="rest"></category><category term="web"></category></entry><entry><title>How to make intelligent web-apps</title><link href="http://pyvideo.org/europython-2011/how-to-make-intelligent-web-apps.html" rel="alternate"></link><published>2011-07-21T00:00:00+00:00</published><updated>2011-07-21T00:00:00+00:00</updated><author><name>Deepak Thukral</name></author><id>tag:pyvideo.org,2011-07-21:europython-2011/how-to-make-intelligent-web-apps.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Deepak Thukral - 22 June 2011 in &amp;quot;Track Ravioli &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The primary goal of this talk is twofold: to evaluate the need of data
mining and introduce some very cool, simple yet powerful machine
learning techniques to audience such as classification, clustering,
collaborative filtering, recommendation etc in your Python web
applications. This talk will conclude with some explanation and
limitations of machine learning algorithms.&lt;/p&gt;
&lt;p&gt;Basic knowledge of Python is sufficient. However some experience with
Django, meshups, machine learning or data hunger is encouraged. All talk
material and django apps will be available after talk under MIT license.&lt;/p&gt;
</summary><category term="django"></category><category term="learning"></category><category term="web"></category></entry><entry><title>Introduction to Gevent</title><link href="http://pyvideo.org/europython-2011/introduction-to-gevent.html" rel="alternate"></link><published>2011-07-21T00:00:00+00:00</published><updated>2011-07-21T00:00:00+00:00</updated><author><name>Denis Bilenko</name></author><id>tag:pyvideo.org,2011-07-21:europython-2011/introduction-to-gevent.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Denis Bilenko - 20 June 2011 in &amp;quot;Track Spaghetti&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;a class="reference external" href="http://gevent.org"&gt;Gevent&lt;/a&gt; is a coroutine-based library that enables
you to write highly-concurrent network and web applications. learn in
detail what Gevent is, what it does and how it does it.&lt;/p&gt;
&lt;p&gt;I will introduce a coroutine-based approach to network programming,
explain it benefits and pitfalls. We will walk through the Gevent API,
including the most recent additions, and understand how it is
implemented. I will make a quick overview of the most interesting 3rd
party add-on and applications after that.&lt;/p&gt;
</summary><category term="gevent"></category><category term="network"></category><category term="web"></category></entry><entry><title>Playing tasks with Django-Celery</title><link href="http://pyvideo.org/europython-2011/playing-tasks-with-django-celery.html" rel="alternate"></link><published>2011-07-21T00:00:00+00:00</published><updated>2011-07-21T00:00:00+00:00</updated><author><name>Mauro Rocco</name></author><id>tag:pyvideo.org,2011-07-21:europython-2011/playing-tasks-with-django-celery.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Mauro Rocco - 22 June 2011 in &amp;quot;Track Tagliatelle &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Celery is an open source task queueing system based on distributed
message passing.&lt;/p&gt;
&lt;p&gt;I will talk about the tools that Celery offers for task distribution and
how to monitor and manage the system using a Django web interface. This
talk will also focus on how we use Celery at Jamendo and our real
solutions to some common issues you may encounter when developing a
back-office based on Celery.&lt;/p&gt;
&lt;p&gt;The talk will cover the following topics:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A brief overview of Celery and the AMPQ protocol AMPQ protocol
overview, Celery introduction: Celery, RabbitMQ code examples&lt;/li&gt;
&lt;li&gt;The impact of Celery on the Jamendo work-flow; examples with real
tasks. Here I will talk about the Jamendo back-office infrastructure
and some of our common tasks. I will discuss the improvements made by
introducing a new back-office system based on Celery. I will show
some code snippets and go over some real scenarios.&lt;/li&gt;
&lt;li&gt;Overview of the Django Celery admin interface and some Jamendo
extensions. Let's talk about the Django-Celery interface that allows
one to monitor or schedule tasks directly from the Django admin. I
will explain which common additional features are necessary and how
to add them.&lt;/li&gt;
&lt;li&gt;Common &amp;quot;gotchas&amp;quot; we encountered while working with Celery and how we
solved them.&lt;/li&gt;
&lt;li&gt;Global task locks&lt;/li&gt;
&lt;li&gt;Centralized logging: be able to read all the logs of all celery
workers on different servers and filter them for real-time debugging&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="celery"></category><category term="distributed"></category><category term="django"></category><category term="infrastructure"></category><category term="queueing"></category><category term="rabbitmq"></category><category term="real-time"></category><category term="web"></category></entry><entry><title>Python at Cloudkick</title><link href="http://pyvideo.org/europython-2011/python-at-cloudkick.html" rel="alternate"></link><published>2011-07-21T00:00:00+00:00</published><updated>2011-07-21T00:00:00+00:00</updated><author><name>Tomaž Muraus</name></author><id>tag:pyvideo.org,2011-07-21:europython-2011/python-at-cloudkick.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Tomaž Muraus - 22 June 2011 in &amp;quot;Track Spaghetti&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Cloudkick is a server management and monitoring software as a service
used by thousands of different companies all across the globe.&lt;/p&gt;
&lt;p&gt;The service is built in and powered by many different programming
languages and technologies, but the web application and majority of the
backend services are written in Python.&lt;/p&gt;
&lt;p&gt;In this talk I will present how and where we use Python (Django,
Twisted, txamqp, Piston, …), different problems we have encountered
while building our service and how we worked around them, good practices
and real-world advices on building effective Twisted services and much
more.&lt;/p&gt;
</summary><category term="monitoring"></category><category term="twisted"></category><category term="web"></category></entry><entry><title>Building a hosting platform with Python</title><link href="http://pyvideo.org/europython-2011/building-a-hosting-platform-with-python.html" rel="alternate"></link><published>2011-07-20T00:00:00+00:00</published><updated>2011-07-20T00:00:00+00:00</updated><author><name>Andrew Godwin</name></author><id>tag:pyvideo.org,2011-07-20:europython-2011/building-a-hosting-platform-with-python.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Andrew Godwin - 20 June 2011 in &amp;quot;Track Lasagne&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;At ep.io we built a Python hosting platform from the ground up, designed
to run large numbers of web applications on a small number of physical
machines both securely and in a reasonably scalable way. This talk will
show you how we built our infrastructure - using Redis, eventlet,
PostgreSQL and more - and what lessons we learnt from our first few
thousand deploys.&lt;/p&gt;
&lt;p&gt;See how we split services into multiple processes and greenthreads; the
pains of building a cooperatively-multitasking PTY module; how Redis
isn't the answer to everything, but is still very useful; how to
persuade third-party software to work securely in a shared environment;
and how important it is to have good logging, especially when you have
more than five servers.&lt;/p&gt;
</summary><category term="ep.io"></category><category term="hosting"></category><category term="infrastructure"></category><category term="postgresql"></category><category term="redis"></category><category term="scalable"></category><category term="web"></category></entry><entry><title>Challenges in developing a large Django site</title><link href="http://pyvideo.org/europython-2011/challenges-in-developing-a-large-django-site.html" rel="alternate"></link><published>2011-07-20T00:00:00+00:00</published><updated>2011-07-20T00:00:00+00:00</updated><author><name>Simon Willison</name></author><id>tag:pyvideo.org,2011-07-20:europython-2011/challenges-in-developing-a-large-django-site.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Simon Willison - 22 June 2011 in &amp;quot;Track Spaghetti&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Django makes it easy to build web sites and applications on tight
deadlines - but how does it deal with sites that scale up in both
traffic and complexity? Using Lanyrd.com as a case study, this talk will
explore tricks and techniques for taking advantage of what Django has to
offer while coping with the unexpected challenges raised by a highly
dynamic social web application.&lt;/p&gt;
&lt;p&gt;Topics covered will include performance monitoring and optimisation,
advanced caching tricks, denormalisation with Solr and Redis and finding
the right balance between technical elegance and pragmatism.&lt;/p&gt;
</summary><category term="django"></category><category term="monitoring"></category><category term="performance"></category><category term="redis"></category><category term="web"></category></entry><entry><title>Best Practices for Python in the Cloud</title><link href="http://pyvideo.org/europython-2011/best-practices-for-python-in-the-cloud.html" rel="alternate"></link><published>2011-07-18T00:00:00+00:00</published><updated>2011-07-18T00:00:00+00:00</updated><author><name>Gisle Aas</name></author><id>tag:pyvideo.org,2011-07-18:europython-2011/best-practices-for-python-in-the-cloud.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Gisle Aas - 21 June 2011 in &amp;quot;Track Lasagne&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Abstract: Whether you’re an independent developer or development manager
in a large company, “the cloud” is on everyone’s mind. But just because
it’s in the cloud, doesn’t mean development and deployment is
effortless. The cloud presents infrastructure and development challenges
in a new way.&lt;/p&gt;
&lt;p&gt;In this presentation, ActiveState's Gisle Aas will share best practices
in building and deploying a Python-centric LAMP stack(s) on the cloud
for a range of web-based applications from simple Django site to HPC GPU
Clusters.&lt;/p&gt;
&lt;p&gt;Based on ActiveState’s experiences, Gisle will discuss the challenges
faced and lessons learned in building an infrastructure to deploy web
applications to the cloud with Python.&lt;/p&gt;
&lt;p&gt;You will learn about:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Which packages are critical for a secure, Python-centric LAMP stack
(and what it takes to build them)!&lt;/li&gt;
&lt;li&gt;Tips for developing, deploying, and scaling Python applicaitons in
the cloud&lt;/li&gt;
&lt;li&gt;How to use Python to connect and build infrastructure to support and
manage your deployment&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="cloud"></category><category term="deploy"></category><category term="deployment"></category><category term="django"></category><category term="gpu"></category><category term="hpc"></category><category term="infrastructure"></category><category term="lamp"></category><category term="packages"></category><category term="scaling"></category><category term="web"></category></entry><entry><title>Gestione di processi clinici in Python: un caso d'uso</title><link href="http://pyvideo.org/europython-2011/gestione-di-processi-clinici-in-python-un-caso-d.html" rel="alternate"></link><published>2011-07-18T00:00:00+00:00</published><updated>2011-07-18T00:00:00+00:00</updated><author><name>Federico Caboni</name></author><id>tag:pyvideo.org,2011-07-18:europython-2011/gestione-di-processi-clinici-in-python-un-caso-d.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Federico Caboni - 23 June 2011 in &amp;quot;Track Italiana Big
Mac &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In questo seminario descriverò la nostra esperienza positiva d'uso di
Python per lo sviluppo di un sistema di etichettatura di provette per il
prelievo sanguigno in ambito di laboratorio e corsia ospedaliera. Il
sistema è basato sui Technical Framework di IHE –standard industriale
per la modellazione di processi clinici– ed è progettato per ridurre gli
errori umani e assicurare la tracciabilità del processo.&lt;/p&gt;
&lt;p&gt;Durante il seminario spiegherò perché abbiamo scelto Python in primo
luogo, e descriverò come siamo stati in grado di sfruttarne le
caratteristiche peculiari nello specifico del nostro dominio, esaminando
le limitazioni e i problemi affrontati.&lt;/p&gt;
&lt;p&gt;Mostrerò specifici casi d'uso di Python in parti differenti del
progetto, come un driver di basso livello per la gestione della robotica
di laboratorio, un modulo di comunicazione asincrona, l'implementazione
di attori IHE, e l'inevitabile applicazione web sviluppata in Django.&lt;/p&gt;
&lt;p&gt;Usare Python ha contribuito enormemente alla progettazione del sistema,
e ci ha consentito di adottare cicli di prototipizzazione estremamente
rapidi, sia per l'hardware che per il software. Durante il seminario
parlerò anche di ciò che, secondo noi, ancora manca perché Python possa
guadagnarsi il posto che gli spetta come piattaforma credibile per
l'implementazione di processi clinici basati sui più diffusi standard
internazionali.&lt;/p&gt;
</summary><category term="ci"></category><category term="framework"></category><category term="web"></category></entry><entry><title>PyHP and the art of dating girls</title><link href="http://pyvideo.org/europython-2011/pyhp-and-the-art-of-dating-girls.html" rel="alternate"></link><published>2011-07-18T00:00:00+00:00</published><updated>2011-07-18T00:00:00+00:00</updated><author><name>Fabio Rotondo</name></author><id>tag:pyvideo.org,2011-07-18:europython-2011/pyhp-and-the-art-of-dating-girls.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Fabio Rotondo - 21 June 2011 in &amp;quot;Track Lasagne&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This will be both technical and light talk, introducing these important
subjects:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;the new scripting language PyHP, a solution to create dynamic web
pages using the Python scripting language server side, a-la PHP, but
smarter.&lt;/li&gt;
&lt;li&gt;the LiWE (Lightweight Web Environment) Web Framework, a new and
robust web framework written in both JavaScript and Python that will
help you creating amazing websites.&lt;/li&gt;
&lt;li&gt;how this new amazing technologies can help you date girls (this will
be the light and funny part of the talk)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Prerequisites:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Very basic knowledge of PHP&lt;/li&gt;
&lt;li&gt;Basic Python&lt;/li&gt;
&lt;li&gt;Basic / None JavaScript&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="art"></category><category term="framework"></category><category term="javascript"></category><category term="web"></category></entry><entry><title>Using Python in Software for the Medical Industry</title><link href="http://pyvideo.org/europython-2011/using-python-in-software-for-the-medical-industry.html" rel="alternate"></link><published>2011-07-18T00:00:00+00:00</published><updated>2011-07-18T00:00:00+00:00</updated><author><name>Wesley J. Chun</name></author><id>tag:pyvideo.org,2011-07-18:europython-2011/using-python-in-software-for-the-medical-industry.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] wesley chun - 21 June 2011 in &amp;quot;Track Tagliatelle&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The medical industry has long been dominated by custom software written
by manufacturers of medical equipment. With the widespread use of
lower-cost computing power and abundance of software developers using
cost-beneficial open source development tools, it is no surprise that
this is a rapidly- growing field in software engineering. In this talk,
I will describe some of my experiences using Python and other open
source tools, temporarily transitioning from the world of the web and
Internet development, jumping into the medical industry, an experience
much like being a fish out of water. The experiences of working in this
field, specifically developing software for use in clinical trials. We
describe the use of open source tools for such software development, the
required integration with closed-source software, and the documentation
rigor that is necessary in a field under the jurisdiction of the US Food
and Drug Administration (FDA). In particular, I'll describe direct
experience in building an application for the use of analyzing spinal
fractures and the various tools that make up the application suite,
whose primary development language was Python. We will also discuss the
particular role of the my employer at the time in the clinical trials
process and elaborate on the data flow that was necessary for all
medical applications developed at the firm, not just the one in
particular.&lt;/p&gt;
</summary><category term="documentation"></category><category term="web"></category></entry><entry><title>Web API Mashups in a Python Application</title><link href="http://pyvideo.org/europython-2011/web-api-mashups-in-a-python-application.html" rel="alternate"></link><published>2011-07-18T00:00:00+00:00</published><updated>2011-07-18T00:00:00+00:00</updated><author><name>Johan Euphrosine</name></author><id>tag:pyvideo.org,2011-07-18:europython-2011/web-api-mashups-in-a-python-application.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Johan Euphrosine - 21 June 2011 in &amp;quot;Track Tagliatelle&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will cover: - How to use OAuth into your webapp so users can
give permission to access their data stored in third party web
application. - How your webapp can interact with their Web API using
RESTful JSON protocols.&lt;/p&gt;
&lt;p&gt;This talk is suitable for beginners already familiar with any WSGI web
framework.&lt;/p&gt;
&lt;p&gt;This talk will be illustrated with code samples using Google App Engine
and Google APIs client library.&lt;/p&gt;
</summary><category term="api"></category><category term="google"></category><category term="json"></category><category term="oauth"></category><category term="web"></category><category term="wsgi"></category></entry><entry><title>Flow-based programming made easy with PyF 2.0</title><link href="http://pyvideo.org/europython-2011/flow-based-programming-made-easy-with-pyf-20.html" rel="alternate"></link><published>2011-07-13T00:00:00+00:00</published><updated>2011-07-13T00:00:00+00:00</updated><author><name>Jonathan Schemoul</name></author><id>tag:pyvideo.org,2011-07-13:europython-2011/flow-based-programming-made-easy-with-pyf-20.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Jonathan Schemoul - 24 June 2011 in &amp;quot;Training Pizza
Napoli &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyF is a python framework to ease flow based programming and allow
massive data crunching on multiple CPUs. We boast an optional web-based
interface to visually design processing tubes, batch scheduling, report
generation and email alerts.&lt;/p&gt;
&lt;p&gt;The Framework is easily extensible by writing plugins, a lot of features
like data persistence, reporting and web scrapping are already part of
the ecosystem.&lt;/p&gt;
&lt;p&gt;This presentation will focus on an introduction to PyF architecture and
higher-level designer ui use and how it could be useful to you.&lt;/p&gt;
&lt;p&gt;If available, an additional training session will focus on working with
the framework to create your own flow-based processes and plugins.&lt;/p&gt;
&lt;p&gt;For more information: &lt;a class="reference external" href="http://www.pyfproject.org/"&gt;http://www.pyfproject.org/&lt;/a&gt;&lt;/p&gt;
</summary><category term="architecture"></category><category term="design"></category><category term="framework"></category><category term="processing"></category><category term="ui"></category><category term="web"></category></entry><entry><title>Introducing Django REST framework</title><link href="http://pyvideo.org/europython-2011/introducing-django-rest-framework.html" rel="alternate"></link><published>2011-07-13T00:00:00+00:00</published><updated>2011-07-13T00:00:00+00:00</updated><author><name>Tom Christie</name></author><id>tag:pyvideo.org,2011-07-13:europython-2011/introducing-django-rest-framework.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Tom Christie - 23 June 2011 in &amp;quot;Track Tagliatelle&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Django REST framework is a new project that aims to make it easy to
build RESTful Web APIs.&lt;/p&gt;
&lt;p&gt;The APIs it creates are fully Web browse-able, using an awesome Django
admin style interface, allowing them to be truly self-describing,
well-connected systems.&lt;/p&gt;
&lt;p&gt;The talk will include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;RESTful Web APIs and Django - what batteries aren't in the box&lt;/li&gt;
&lt;li&gt;An introduction to the framework - What it is, what problems it tries
to solve&lt;/li&gt;
&lt;li&gt;Why it's so important that Web APIs should be Web browse-able&lt;/li&gt;
&lt;li&gt;A live coding demonstration&lt;/li&gt;
&lt;li&gt;Audience discussion&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sign up for the &lt;a class="reference external" href="http://ep2011.europython.eu/p3/sprints/"&gt;sprint&lt;/a&gt;
More &lt;a class="reference external" href="http://django-rest-framework.org"&gt;info&lt;/a&gt;&lt;/p&gt;
</summary><category term="django"></category><category term="framework"></category><category term="rest"></category><category term="web"></category></entry><entry><title>Making use of OpenStreetMap data with Python</title><link href="http://pyvideo.org/europython-2011/making-use-of-openstreetmap-data-with-python.html" rel="alternate"></link><published>2011-07-13T00:00:00+00:00</published><updated>2011-07-13T00:00:00+00:00</updated><author><name>Andrii Mishkovskyi</name></author><id>tag:pyvideo.org,2011-07-13:europython-2011/making-use-of-openstreetmap-data-with-python.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Andrii Mishkovskyi - 22 June 2011 in &amp;quot;Track Lasagne&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Ever wondered how web maps are created? Ever wondered if you could build
something like Google Maps over a weekend? You probably can't, but this
talk will show you the basics of what you need to know, such as
importing data, rendering maps and even building simple routes. And all
of this in Python!&lt;/p&gt;
&lt;p&gt;Abstract: * Learning how OSM data looks * Parsing and importing the
data * Rendering maps with Mapnik * Bits of code required to build
geocoder * Building simple router with Python and PostGIS * And anything
else I forgot to mention in this abstract but will talk about&lt;/p&gt;
&lt;p&gt;Definitions: OpenStreetMap - the so-called &amp;quot;Wikipedia of maps&amp;quot; project,
with thousands of contributors who edit the map data of the whole world.
Unlike similar projects, the map data is completely free (both as in
beer and as in speech) and thus anyone can make use of it. Mapnik -
rendering framework, created specifically for OpenStreetMap, written in
C++ and Python. PostGIS - an extension of PostgreSQL database, with
support for many useful GIS features.&lt;/p&gt;
</summary><category term="gis"></category><category term="google"></category><category term="importing"></category><category term="learning"></category><category term="maps"></category><category term="parsing"></category><category term="postgresql"></category><category term="web"></category></entry><entry><title>Merengue: the new surprising and refreshing Django based CMS.</title><link href="http://pyvideo.org/europython-2011/merengue-the-new-surprising-and-refreshing-djang.html" rel="alternate"></link><published>2011-07-13T00:00:00+00:00</published><updated>2011-07-13T00:00:00+00:00</updated><author><name>Manuel Saelices</name></author><id>tag:pyvideo.org,2011-07-13:europython-2011/merengue-the-new-surprising-and-refreshing-djang.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Manuel Saelices - 20 June 2011 in &amp;quot;Track Tagliatelle&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Django is an excellent web development platform with an extensive
developers community. It may be the most popular Python web framework
nowadays. However, the exisiting django based CMS products are not as
feature complete as other comparable solutions (Drupal, Plone, Alfresco,
ModX, etc.).&lt;/p&gt;
&lt;p&gt;The Merengue project tries to fill this gap. It is financed by the
University of Málaga (Spain) and takes advantage of existing code and
knowledge from other projects (Plone, Drupal, Pinax, django-cms,
feincms, LFC, etc.)&lt;/p&gt;
</summary><category term="cms"></category><category term="django"></category><category term="framework"></category><category term="university"></category><category term="web"></category></entry><entry><title>Paver: the build tool you missed</title><link href="http://pyvideo.org/europython-2011/paver-the-build-tool-you-missed.html" rel="alternate"></link><published>2011-07-13T00:00:00+00:00</published><updated>2011-07-13T00:00:00+00:00</updated><author><name>Lukáš Linhart</name></author><id>tag:pyvideo.org,2011-07-13:europython-2011/paver-the-build-tool-you-missed.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Lukaš Linhart - 22 June 2011 in &amp;quot;Track Tagliatelle &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Build tools are not very popular in Python environment. In this talk,
I'd like to show how useful it is to have one, even if you do just
simple web applications. A nice, single point of entry instead of hairy
shell scripts, fabric fabfiles and django admin commands all over the
place.&lt;/p&gt;
&lt;p&gt;Written in the neat, friendly Python instead of some Anty XML jumbo, you
are about to have a refreshing cleanup.&lt;/p&gt;
</summary><category term="django"></category><category term="fabric"></category><category term="web"></category><category term="xml"></category></entry><entry><title>PostgreSQL - the database-sister of Python</title><link href="http://pyvideo.org/europython-2011/postgresql-the-database-sister-of-python.html" rel="alternate"></link><published>2011-07-13T00:00:00+00:00</published><updated>2011-07-13T00:00:00+00:00</updated><author><name>Harald Armin Massa</name></author><id>tag:pyvideo.org,2011-07-13:europython-2011/postgresql-the-database-sister-of-python.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Harald Armin Massa - 21 June 2011 in &amp;quot;Track Lasagne&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk is the updated and especially enhanced of the &amp;quot;Python and
PostgreSQL - a match made in heaven&amp;quot; talk of EP 2006, CERN, Switzerland.
PostgreSQL and Python share more then the first letter: their
communities have great similiarities; their development processes are
really comparable; their licenses and their openness to academics AND
business (on a technical and communitie perspective) are big pluses. We
will have a look at those similiarities and learn why PostgreSQL is
really the database sister to Python. There will be an overview of
PostgreSQL, information of how to connect PostgreSQL and Python; how
PostgreSQL streaming replication works and what it can do for you, how
PL/Python helps to have Web 2.5 JSON storage and handling right inside
PostgreSQL. We will show that YESQL is also a valid answer to many data
storage qeuestions.&lt;/p&gt;
</summary><category term="business"></category><category term="database"></category><category term="json"></category><category term="postgresql"></category><category term="replication"></category><category term="web"></category></entry><entry><title>Saving Gaia with jQuery Mobile and GeoDjango</title><link href="http://pyvideo.org/europython-2011/saving-gaia-with-jquery-mobile-and-geodjango.html" rel="alternate"></link><published>2011-07-13T00:00:00+00:00</published><updated>2011-07-13T00:00:00+00:00</updated><author><name>Calvin Cheng</name></author><id>tag:pyvideo.org,2011-07-13:europython-2011/saving-gaia-with-jquery-mobile-and-geodjango.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Calvin Cheng - 22 June 2011 in &amp;quot;Track Tagliatelle &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We had the privilege of working on a mobile web application for ETH
Zurich, funded by ETH North-South Centre, using Django/Postgis, jQuery
mobile and Openlayers technology.&lt;/p&gt;
&lt;p&gt;In this talk, I would like to share what we have learnt technically and
the experiences and fun we had with polygon creation on a map and saving
polygon vertices and related data into our spatial database via
geodjango.&lt;/p&gt;
&lt;p&gt;This mobile web app is developed based on research by Dr Koh of ETH
Zurich, specializing on Matrix-calibrated and edge-corrected
species-area models that allow users to evaluate the biodiversity
consequence and trade-offs of land- use decisions. The development and
description of these models were published in Conserv. Biol. 24, 994 and
J. Appl. Ecol. 47, 1063.&lt;/p&gt;
</summary><category term="database"></category><category term="geodjango"></category><category term="jquery"></category><category term="mobile"></category><category term="spatial"></category><category term="web"></category></entry><entry><title>Spatial data and GeoDjango</title><link href="http://pyvideo.org/europython-2011/spatial-data-and-geodjango.html" rel="alternate"></link><published>2011-07-13T00:00:00+00:00</published><updated>2011-07-13T00:00:00+00:00</updated><author><name>Bruno Renié</name></author><id>tag:pyvideo.org,2011-07-13:europython-2011/spatial-data-and-geodjango.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Bruno Renie - 21 June 2011 in &amp;quot;Track Tagliatelle&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;GeoDjango is the &amp;quot;world-class geographic web framework&amp;quot; everyone has
probably heard of. The purpose of this talk, targeted at people familiar
with Django itself, is to introduce in more details the capabilities of
this framework.&lt;/p&gt;
&lt;p&gt;After learning the basics of Geographic Information Systems, we will
see:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;how to get started with a GeoDjango installation,&lt;/li&gt;
&lt;li&gt;how to import, store and query spatial data,&lt;/li&gt;
&lt;li&gt;how to geo-enable your forms to allow user-generated spatial data,&lt;/li&gt;
&lt;li&gt;how to serialize and display your data using the different formats
and mapping frameworks such as OpenLayers and Polymaps.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;During this talk we will be building a simple GeoDjango application to
illustrate the different concepts introduced.&lt;/p&gt;
</summary><category term="django"></category><category term="forms"></category><category term="geodjango"></category><category term="learning"></category><category term="mapping"></category><category term="spatial"></category><category term="web"></category></entry><entry><title>uWSGI, il coltellino svizzero (di MacGyver) del deploy</title><link href="http://pyvideo.org/europython-2011/uwsgi-il-coltellino-svizzero-di-macgyver-del-d.html" rel="alternate"></link><published>2011-07-13T00:00:00+00:00</published><updated>2011-07-13T00:00:00+00:00</updated><author><name>Roberto De Ioris</name></author><id>tag:pyvideo.org,2011-07-13:europython-2011/uwsgi-il-coltellino-svizzero-di-macgyver-del-d.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Roberto De Ioris - 21 June 2011 in &amp;quot;Track Italiana Big
Mac&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;La prima parte del talk introdurra' la storia di uWSGI, dall'idea
iniziale alla messa in produzione dei primi lavori, fino alla sua
inclusione nei progetti Cherokee e Nginx.&lt;/p&gt;
&lt;p&gt;Seguira' una serie di esempi di deploy in ambienti ostili (a livello di
sicurezza, non faremo deploy nella jungla) o con risorse fortemente
limitate fino all'utilizzo delle funzionalita' integrate per il
clustering.&lt;/p&gt;
&lt;p&gt;Il talk si rivolge a tutti gli sviluppatori di applicazioni web che sono
alla ricerca di un ambiente robusto e veloce per i propri lavori, o a
chi gia' utilizza uWSGI e vuole conoscere qualcuna delle nuove
funzionalita' introdotte nel ramo di sviluppo.&lt;/p&gt;
</summary><category term="deploy"></category><category term="web"></category></entry><entry><title>Writing Books using Python &amp; Open Source Software</title><link href="http://pyvideo.org/europython-2011/writing-books-using-python-open-source-software.html" rel="alternate"></link><published>2011-07-13T00:00:00+00:00</published><updated>2011-07-13T00:00:00+00:00</updated><author><name>Wesley J. Chun</name></author><id>tag:pyvideo.org,2011-07-13:europython-2011/writing-books-using-python-open-source-software.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] wesley chun - 20 June 2011 in &amp;quot;Track Ravioli&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;All of us are familiar with using open source tools to develop software
applications with, but instead of writing code, it is also possible to
create the manuscript of a book in very much the same way. These days,
authors have many choices in terms of the tools which are available to
aid them in writing a book. Gone are the times when the only option is
using a proprietary word processor, so why not try it using open source
tools? It's especially attractive to those who develop software using
open source tools as well those who are writing books about open source
tools. Both code and the written word are created in plain text files.
These files are easily archived using some version control system. They
can be shared easily via e-mail and can also be backed up in the same
manner. In the end, the final product is shipped to the customer: in the
case of software, it's distribution via CD or DVD, or perhaps a release
for installation on a server, and for a book, it's delivering a
manuscript to the publisher, perhaps in a format such as HTML or PDF®.&lt;/p&gt;
&lt;p&gt;Upon some reflection, writing a book is, in many ways, similar to
writing an application: you create text or code which is saved to a file
(or files- typically one but could be more) file in some format,
proprietary or otherwise. Additions, changes, or deletions are made to
the file(s), which is then updated when the file is (re)saved. Backups
need to be made, some versioning may be required to keep track of
multiple files during the course of development, and finally, the
resulting file(s) have to be delivered, as described above. Because of
all the similarities described, we assert that it is possible to use a
development environment utilizing Python and other open source tools to
not only write application with, but also be able to create the entire
manuscript for a book as well! While this entire concept should not
really be mind-blowing, it does represent a trend seemingly growing in
popularity in the open source world.&lt;/p&gt;
&lt;p&gt;In particular, we highlight the following requirements that are
necessary when creating a manuscript, especially with co-authors:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Text Formatting&lt;/li&gt;
&lt;li&gt;Editing&lt;/li&gt;
&lt;li&gt;Versioning and Backups&lt;/li&gt;
&lt;li&gt;Automated Testing of Code&lt;/li&gt;
&lt;li&gt;HTML/PDF® Generation&lt;/li&gt;
&lt;li&gt;Author Communication&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this talk, we highlight one particular case study, the development of
Addison Wesley's 2009 publication, &amp;quot;Python Web Development with Django&amp;quot;,
as well as provide some insight into other projects created using
similar tools. Open source software has radically affected how
applications are built today, and this phenomenon has the ability to
affect the book publishing world in the same way.&lt;/p&gt;
</summary><category term="cd"></category><category term="html"></category><category term="testing"></category><category term="web"></category></entry><entry><title>An iPhone-Python love affair: Building APIs for mobile</title><link href="http://pyvideo.org/europython-2011/an-iphone-python-love-affair-building-apis-for-m.html" rel="alternate"></link><published>2011-07-07T00:00:00+00:00</published><updated>2011-07-07T00:00:00+00:00</updated><author><name>Anna Callahan</name></author><id>tag:pyvideo.org,2011-07-07:europython-2011/an-iphone-python-love-affair-building-apis-for-m.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Anna Callahan,Nate Aune - 24 June 2011 in &amp;quot;Track
Spaghetti&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Mobile apps are the hot item of the day - and the best mobile apps are
backed by a great website. Python web developer Nate Aune and iPhone
developer Anna Callahan will show you how we built a simple music web
app in Django with a native iPhone app that communicates with it.
Attendees of this talk will see a concrete case study of building an
application that exposes an API for mobile devices.&lt;/p&gt;
&lt;p&gt;Our web app exposes a JSON API for sending and receiving data from the
mobile device. We’ll talk about why we chose Django and the TastyPie API
package, and discuss other Python-based frameworks that could be used to
build the API such as Pyramid, Flask and Bottle. We’ll also compare REST
and custom APIs to understand best practices for building APIs designed
for mobile devices.&lt;/p&gt;
</summary><category term="api"></category><category term="django"></category><category term="flask"></category><category term="json"></category><category term="mobile"></category><category term="rest"></category><category term="tastypie"></category><category term="web"></category></entry><entry><title>Building Scalable Web Apps</title><link href="http://pyvideo.org/europython-2011/building-scalable-web-apps.html" rel="alternate"></link><published>2011-07-07T00:00:00+00:00</published><updated>2011-07-07T00:00:00+00:00</updated><author><name>David Cramer</name></author><id>tag:pyvideo.org,2011-07-07:europython-2011/building-scalable-web-apps.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] David Cramer - 21 June 2011 in &amp;quot;Track Spaghetti&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Building scalable web applications may seem like a distant problem, but
the problem is not thinking about it before it's too late. This talk
will focus on designing a scalable web application before it needs to be
(and avoiding the premature optimization dilemma). It will cover topics
such as efficient usage of your database, appropriate caching (and
invalidation!), and what the speaker considers as best practices.&lt;/p&gt;
</summary><category term="optimization"></category><category term="scalable"></category><category term="web"></category></entry><entry><title>Joel Burton - Why Python Web Frameworks are Changing the Web</title><link href="http://pyvideo.org/kiwi-pycon-2009/joel-burton---why-python-web-frameworks-are-chang.html" rel="alternate"></link><published>1990-01-01T00:00:00+00:00</published><updated>1990-01-01T00:00:00+00:00</updated><author><name>Joel Burton</name></author><id>tag:pyvideo.org,1990-01-01:kiwi-pycon-2009/joel-burton---why-python-web-frameworks-are-chang.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Why Python web frameworks are changing the web&lt;/p&gt;
&lt;p&gt;Presented by Joel Burton&lt;/p&gt;
&lt;p&gt;Keynote.&lt;/p&gt;
&lt;p&gt;Slides from the keynote:
&lt;a class="reference external" href="http://www.slideshare.net/joelburton/why-python-web"&gt;http://www.slideshare.net/joelburton/why-python-web&lt;/a&gt;-
frameworks-are-changing-the-web&lt;/p&gt;
&lt;p&gt;[VIDEO HAS ISSUES: Sound and video are poor. Slides are hard to read.]&lt;/p&gt;
</summary><category term="kiwipycon"></category><category term="kiwipycon2009"></category><category term="plone"></category><category term="pylons"></category><category term="turbogears"></category><category term="web"></category><category term="zope"></category></entry><entry><title>Robert Coup - /me wants it. Scraping sites to get data.</title><link href="http://pyvideo.org/kiwi-pycon-2009/robert-coup----me-wants-it--scraping-sites-to-get.html" rel="alternate"></link><published>1990-01-01T00:00:00+00:00</published><updated>1990-01-01T00:00:00+00:00</updated><author><name>Robert Coup</name></author><id>tag:pyvideo.org,1990-01-01:kiwi-pycon-2009/robert-coup----me-wants-it--scraping-sites-to-get.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;/me wants it. Scraping sites to get data.&lt;/p&gt;
&lt;p&gt;Presented by Robert Coup&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Building scrapers for grabbing data from websites. Tools, techniques,
and tips.&lt;/p&gt;
&lt;p&gt;Outline&lt;/p&gt;
&lt;p&gt;Life would be so much easier if the data contained in websites was
available raw via APIs. Alas, until that mythical day comes we either
need to deal with unhelpful people via email and phone, or just get it
ourselves. Python has some great tools available to help with building
scrapers and for parsing and formatting the data we get. Starting off
with the basics - tracking what needs to be done, making web requests,
parsing HTML, following links, and extricating data from Excel and PDF
documents. Our scraper needs to be resilient against too-clever content
management systems, Frontpage-era HTML, and plain dodgy data. We may
need to pass through logins and other messiness. There are some
techniques and tips for approaching the problems and keeping your
solution flexible and as simple as possible. We'll discuss some scrapers
built for New Zealand data, and introduce a new project from the NZ open
government data group to provide a RESTful interface to scrapers -
effectively creating a nice API where there isn't one.&lt;/p&gt;
&lt;p&gt;Slides:
&lt;a class="reference external" href="http://www.slideshare.net/rcoup/me-wants-it-scraping-sites-to-get-data"&gt;http://www.slideshare.net/rcoup/me-wants-it-scraping-sites-to-get-
data&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[VIDEO HAS ISSUES: Sound and video are poor. Slides are hard to read.]&lt;/p&gt;
</summary><category term="api"></category><category term="html"></category><category term="kiwipycon"></category><category term="kiwipycon2009"></category><category term="rest"></category><category term="scraping"></category><category term="web"></category></entry><entry><title>Roman Joost - Get started with Zope3</title><link href="http://pyvideo.org/kiwi-pycon-2009/roman-joost---get-started-with-zope3.html" rel="alternate"></link><published>1990-01-01T00:00:00+00:00</published><updated>1990-01-01T00:00:00+00:00</updated><author><name>Roman Joost</name></author><id>tag:pyvideo.org,1990-01-01:kiwi-pycon-2009/roman-joost---get-started-with-zope3.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Get started with Zope3&lt;/p&gt;
&lt;p&gt;Presented by Roman Joost&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;The talk introduces Zope 3, the main differences to Zope (2) and how to
get started.&lt;/p&gt;
&lt;p&gt;Outline&lt;/p&gt;
&lt;p&gt;The Zope application server exist for nearly a decade now. One of the
biggest changes to the Zope architecture was the rewrite of the
framework and an introduction of a component architecture. Zope 3 was
born. The talk covers how developers can bootstrap a Zope 3 project
using buildout, what the differences between Zope (2) and Zope 3 is, how
views and models are created and registered, how third party
applications are used and how common pitfalls can be avoided.&lt;/p&gt;
&lt;p&gt;[VIDEO HAS ISSUES: Sound and video are poor. Slides are hard to read.]&lt;/p&gt;
</summary><category term="kiwipycon"></category><category term="kiwipycon2009"></category><category term="web"></category><category term="zope"></category><category term="zope3"></category></entry><entry><title>Roman Joost - Grok or how Zope3 reinvented itself</title><link href="http://pyvideo.org/kiwi-pycon-2009/roman-joost---grok-or-how-zope3-reinvented-itself.html" rel="alternate"></link><published>1990-01-01T00:00:00+00:00</published><updated>1990-01-01T00:00:00+00:00</updated><author><name>Roman Joost</name></author><id>tag:pyvideo.org,1990-01-01:kiwi-pycon-2009/roman-joost---grok-or-how-zope3-reinvented-itself.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Grok or how Zope3 reinvented itself&lt;/p&gt;
&lt;p&gt;Presented by Roman Joost&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;The talk introduces how to quickly and easily create web applications
with Grok, a web framework based on Zope3 (&lt;a class="reference external" href="http://grok.zope.org/"&gt;http://grok.zope.org/&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Outline&lt;/p&gt;
&lt;p&gt;Grok is a web application framework based on Zope 3 - the popular
application server. One of the main aspects of Grok is the rapid
development of web applications without losing the flexibility Zope 3
provides. The talk covers a quick introduction to Zope 3 and Grok. Based
on an example, I will provide a quick walk through on how easy it is to
create sophisticated web applications with Grok. Additionally, the talk
outlines pitfalls for newcomers and how to avoid them.&lt;/p&gt;
&lt;p&gt;[VIDEO HAS ISSUES: Sound and video are poor. Slides are hard to read.]&lt;/p&gt;
</summary><category term="grok"></category><category term="kiwipycon"></category><category term="kiwipycon2009"></category><category term="web"></category><category term="zope3"></category></entry><entry><title>PyConAU 2010: App Engine 101</title><link href="http://pyvideo.org/pycon-au-2010/pyconau-2010--app-engine-101.html" rel="alternate"></link><published>1990-01-01T00:00:00+00:00</published><updated>1990-01-01T00:00:00+00:00</updated><author><name>Brian K Quinlan</name></author><id>tag:pyvideo.org,1990-01-01:pycon-au-2010/pyconau-2010--app-engine-101.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;App Engine 101&lt;/p&gt;
&lt;p&gt;Presented by Brian K Quinlan (Google)&lt;/p&gt;
&lt;p&gt;App Engine lets you run your Python web applications on Google's
infrastructure.&lt;/p&gt;
&lt;p&gt;This tutorial will provide an overview on how to create, configure and
deploy applications on App Engine using a simple (but useful!) example
application.&lt;/p&gt;
</summary><category term="appengine"></category><category term="gae"></category><category term="pyconau"></category><category term="pyconau2010"></category><category term="tutorial"></category><category term="web"></category></entry><entry><title>PyConAU 2010: Building the Wave Robots API: Behind the Scenes</title><link href="http://pyvideo.org/pycon-au-2010/pyconau-2010--building-the-wave-robots-api--behin.html" rel="alternate"></link><published>1990-01-01T00:00:00+00:00</published><updated>1990-01-01T00:00:00+00:00</updated><author><name>Pamela S Fox</name></author><id>tag:pyvideo.org,1990-01-01:pycon-au-2010/pyconau-2010--building-the-wave-robots-api--behin.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Building the Wave Robots API: Behind the Scenes&lt;/p&gt;
&lt;p&gt;Presented by Pamela S Fox (Google)&lt;/p&gt;
&lt;p&gt;The Google Wave robots protocol involves JSON-RPC messages that are sent
between the Wave server and the robot, communicating events to process
and operations to perform. The Python Robots API abstracts on top of
that JSON-RPC service, allowing developers to interact with waves using
event callbacks, python classes, and chained functions. In this talk,
we'll explain the JSON- RPC protocol, talk about how we designed the API
to sit on top of that protocol, and show how developers can use the API.&lt;/p&gt;
</summary><category term="apis"></category><category term="json"></category><category term="jsonrpc"></category><category term="pyconau"></category><category term="pyconau2010"></category><category term="web"></category></entry><entry><title>PyConAU 2010: Genropy - a framework for creating complex applications deployed on the web</title><link href="http://pyvideo.org/pycon-au-2010/pyconau-2010--genropy---a-framework-for-creating-.html" rel="alternate"></link><published>1990-01-01T00:00:00+00:00</published><updated>1990-01-01T00:00:00+00:00</updated><author><name>Jeff B Edwards</name></author><id>tag:pyvideo.org,1990-01-01:pycon-au-2010/pyconau-2010--genropy---a-framework-for-creating-.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Genropy - A framework for creating complex applications deployed on the
web&lt;/p&gt;
&lt;p&gt;Presented by Jeff B Edwards (Goodsoftware)&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://blog.genropy.org/"&gt;Genropy&lt;/a&gt; is the python implementation of
Genro, and is an application framework quite different from the standard
(django, cherrypy, turbogears), for building powerful database
applications deployed from the browser. Many differences and advantages
between this framework and traditional python application frameworks are
explained. Genropy is a suitable for creating complex 'applications' as
opposed to 'sites'. The differentiation is that an application is
something an operator uses all day, has trained users, that have to
'squeeze' all the power from it available. Conversely, a 'site' is
basically public and not necessarily powerful as a user spends a
relatively small amount of time on it. Genropy is the framework for
creation applications. It is used for attendee registration and sales in
pycon italy, the larger national conference in Europe (Florence, Italy).&lt;/p&gt;
&lt;p&gt;This session will demonstrate how to create a simple application (3
tables) and demonstrate the ease and power of using python for the model
view and controller on the client. It demonstrates how one api- being
the genro Bag - is used to create the model, to map the sql to objects,
to create the GUI and communicate all data. So all of it can be done in
python instead of having to use many different technologies and
languages.&lt;/p&gt;
&lt;p&gt;Jeff Edwards from Goodsoftware is strategic partner of Sofwell who is
the author of Genropy.&lt;/p&gt;
</summary><category term="databases"></category><category term="gui"></category><category term="pyconau"></category><category term="pyconau2010"></category><category term="web"></category></entry><entry><title>PyConAU 2010: GLAMkit: a harder, better, faster, stronger way to write reusable Django code</title><link href="http://pyvideo.org/pycon-au-2010/pyconau-2010--glamkit--a-harder--better--faster--.html" rel="alternate"></link><published>1990-01-01T00:00:00+00:00</published><updated>1990-01-01T00:00:00+00:00</updated><author><name>Dr. Greg Turner</name></author><id>tag:pyvideo.org,1990-01-01:pycon-au-2010/pyconau-2010--glamkit--a-harder--better--faster--.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;GLAMkit: a harder, better, faster, stronger way to write reusable Django
code&lt;/p&gt;
&lt;p&gt;Presented by Dr. Greg Turner (the Interaction Consortium)&lt;/p&gt;
&lt;p&gt;As part of our web development work for Galleries, Libraries, Archives
and Museums (the so-called GLAM sector), we have open-sourced the common
tools and design patterns that we have developed as a web framework
called GLAMkit (&lt;a class="reference external" href="http://glamkit.org/"&gt;http://glamkit.org/&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;GLAMkit is based on Django, and is inspired by its design philosophy of
several apps which implement specific features. However, by looking at
the successes and challenges faced by other CMSes and collections of
apps such as Pinax, we have taken the philosophy a stage futher.&lt;/p&gt;
&lt;p&gt;Rather than being a collection of Django apps, we have constructed
GLAMkit as a collection of optional and reusable Django 'toolkits' for
implementing common features. We leave the implementation details - the
things that Django already does brilliantly - to the application
developers themselves.&lt;/p&gt;
&lt;p&gt;In this talk, we will present the history of GLAMkit's development, with
particular focus on how our approach to reusability came about, and some
examples of that approach.&lt;/p&gt;
</summary><category term="advocacy"></category><category term="architecture"></category><category term="community"></category><category term="pyconau"></category><category term="pyconau2010"></category><category term="web"></category></entry><entry><title>PyConAU 2010: Plone for Python Developers</title><link href="http://pyvideo.org/pycon-au-2010/pyconau-2010--plone-for-python-developers.html" rel="alternate"></link><published>1990-01-01T00:00:00+00:00</published><updated>1990-01-01T00:00:00+00:00</updated><author><name>Dylan Jay</name></author><id>tag:pyvideo.org,1990-01-01:pycon-au-2010/pyconau-2010--plone-for-python-developers.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Plone for Python Developers&lt;/p&gt;
&lt;p&gt;Presented by Dylan Jay (PretaWeb)&lt;/p&gt;
&lt;p&gt;Plone is one of the top four open source CMSes in the world and is pure
python. Plone is in demand for security, simple UI and extreme
flexibility. This talk will concentrate on helping web programers with
several common customisations of Plone, including content type creation,
themeing and template customizations and how the re-architecture using
ZTK makes this easy.&lt;/p&gt;
</summary><category term="cms"></category><category term="plone"></category><category term="pyconau"></category><category term="pyconau2010"></category><category term="web"></category><category term="zope"></category></entry><entry><title>PyConAU 2010: Python in Video Games and Multimedia Projects</title><link href="http://pyvideo.org/pycon-au-2010/pyconau-2010--python-in-video-games-and-multimedi.html" rel="alternate"></link><published>1990-01-01T00:00:00+00:00</published><updated>1990-01-01T00:00:00+00:00</updated><author><name>Chris McCormick</name></author><id>tag:pyvideo.org,1990-01-01:pycon-au-2010/pyconau-2010--python-in-video-games-and-multimedi.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python in Video Games and Multimedia Projects&lt;/p&gt;
&lt;p&gt;Presented by Mr. Chris McCormick&lt;/p&gt;
&lt;p&gt;This talk will cover several real-world uses of Python in cross platform
video game and multimedia projects, and the tips, tricks, and techniques
I learned along the way whilst working on those projects. I'll speak
about the issues involved in cross platform desktop dev with wxPython,
interfacing with multimedia programs using subprocess, spreading load
with multiprocessing, developing for the web on small devices with
Django, and when and how to write custom network servers using asyncore.&lt;/p&gt;
</summary><category term="games"></category><category term="handheld"></category><category term="multimedia"></category><category term="network"></category><category term="pyconau"></category><category term="pyconau2010"></category><category term="web"></category></entry><entry><title>PyConAU 2010: What's new in Django 1.2</title><link href="http://pyvideo.org/pycon-au-2010/pyconau-2010--what--39-s-new-in-django-1-2.html" rel="alternate"></link><published>1990-01-01T00:00:00+00:00</published><updated>1990-01-01T00:00:00+00:00</updated><author><name>Dr. Russell Keith-Magee</name></author><id>tag:pyvideo.org,1990-01-01:pycon-au-2010/pyconau-2010--what--39-s-new-in-django-1-2.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What's new in Django 1.2&lt;/p&gt;
&lt;p&gt;Presented by Dr. Russell Keith-Magee (Django Project)&lt;/p&gt;
&lt;p&gt;Django 1.2 added a number of major, long anticipated features to Django.
This talk will give an overview of these new features (both large and
small), as well as giving a look into what the future may hold for
Django.&lt;/p&gt;
</summary><category term="pyconau"></category><category term="pyconau2010"></category><category term="web"></category></entry><entry><title>PyConAU 2010: whoops I deployed again - new ways to get your app in the cloud</title><link href="http://pyvideo.org/pycon-au-2010/pyconau-2010--whoops-i-deployed-again---new-ways-.html" rel="alternate"></link><published>1990-01-01T00:00:00+00:00</published><updated>1990-01-01T00:00:00+00:00</updated><author><name>Dylan Jay</name></author><id>tag:pyvideo.org,1990-01-01:pycon-au-2010/pyconau-2010--whoops-i-deployed-again---new-ways-.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;whoops I deployed again - new ways to get your app in the cloud&lt;/p&gt;
&lt;p&gt;Presented by Dylan Jay (PretaWeb)&lt;/p&gt;
&lt;p&gt;A overview of new tools for deploying python based applications to
servers including cloud inferstructure such as Amazon Ec2.&lt;/p&gt;
&lt;p&gt;The talk will cover Ian Bicking's Silver Lining, zc.buildout, Fabric and
hostout. This talk will focus on how to get your first web app hosted
easily.&lt;/p&gt;
</summary><category term="deployment"></category><category term="hostout"></category><category term="pyconau"></category><category term="pyconau2010"></category><category term="silverlining"></category><category term="web"></category><category term="wsgi"></category><category term="zc.buildout"></category></entry><entry><title>Easy site migration using Diazo and Funnelweb</title><link href="http://pyvideo.org/pycon-au-2011/easy-site-migration-using-diazo-and-funnelweb.html" rel="alternate"></link><published>2011-08-23T00:00:00+00:00</published><updated>2011-08-23T00:00:00+00:00</updated><author><name>Adam Terrey</name></author><id>tag:pyvideo.org,2011-08-23:pycon-au-2011/easy-site-migration-using-diazo-and-funnelweb.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Moving old sites into a new web platform is a pain. Often you need to
pull apart perfectly good HTML just to spend time painstakingly putting
back together again and converting hundreds of pages of content is a
chore. Recently PretaWeb used tools to drastically simplify this process
when converting genetics.edu.au to Plone 4.1. Diazo is a platform
independent theming engine that leaves HTML untouched. Funnelweb is a
static content migration tool for crawling and manipulating site
content.&lt;/p&gt;
</summary><category term="migration"></category><category term="plone"></category><category term="web"></category></entry><entry><title>A Python on the Couch</title><link href="http://pyvideo.org/pycon-au-2011/a-python-on-the-couch.html" rel="alternate"></link><published>2011-08-22T00:00:00+00:00</published><updated>2011-08-22T00:00:00+00:00</updated><author><name>Mark J Rees</name></author><id>tag:pyvideo.org,2011-08-22:pycon-au-2011/a-python-on-the-couch.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;CouchDB &amp;amp;nbsp_place_holder;(&lt;a class="reference external" href="http://couchdb.apache.org/"&gt;http://couchdb.apache.org/&lt;/a&gt;) is an open
source, document-oriented NoSQL Database Management Server.It supports
queries via views using MapReduce, and replication. The talk will give
an overview of CouchDB followed by how to access and manipulate using
Python. There are a number of python libraries for accessing couchdb and
these will be quickly discussed followed by &amp;amp;nbsp_place_holder;how to
use one of these libs with a Python web framework.&lt;/p&gt;
</summary><category term="couchdb"></category><category term="database"></category><category term="nosql"></category><category term="web"></category></entry><entry><title>Ah! I see you have the machine that goes "BING"!</title><link href="http://pyvideo.org/pycon-au-2011/ah-i-see-you-have-the-machine-that-goes-bing.html" rel="alternate"></link><published>2011-08-22T00:00:00+00:00</published><updated>2011-08-22T00:00:00+00:00</updated><author><name>Dr. Graeme Cross</name></author><id>tag:pyvideo.org,2011-08-22:pycon-au-2011/ah-i-see-you-have-the-machine-that-goes-bing.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Whirrr, buzz, squelch, click, smash, bing! Python is so much more than a
language for Web 2.0 and system administration: Python can also be used
for interfacing into the real world. Learn how to connect Python up to
stepper motors, micro-fluidic pumps, A/D sensors, switches, solenoids,
vacuum/pressure valves and XYZ robots, with simple off-the-shelf control
hardware.&lt;/p&gt;
</summary><category term="web"></category></entry><entry><title>Hosting Python Web Applications</title><link href="http://pyvideo.org/pycon-au-2011/hosting-python-web-applications.html" rel="alternate"></link><published>2011-08-22T00:00:00+00:00</published><updated>2011-08-22T00:00:00+00:00</updated><author><name>Graham P Dumpleton</name></author><id>tag:pyvideo.org,2011-08-22:pycon-au-2011/hosting-python-web-applications.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Web applications which are able to dynamically deliver up content
have&amp;amp;nbsp_place_holder;become a crucial part of the Internet
landscape, with Python becoming an increasingly popular choice for the
implementation of all manner of web applications. In order though for
users to be able to access your web application you need to host it. The
choices available are however many and varied with accurate information
on which may be a good choice not always easy to find.&lt;/p&gt;
</summary><category term="hosting"></category><category term="web"></category></entry><entry><title>How to maintain big app stacks without losing your mind</title><link href="http://pyvideo.org/pycon-au-2011/how-to-maintain-big-app-stacks-without-losing-you.html" rel="alternate"></link><published>2011-08-22T00:00:00+00:00</published><updated>2011-08-22T00:00:00+00:00</updated><author><name>Dylan Jay</name></author><id>tag:pyvideo.org,2011-08-22:pycon-au-2011/how-to-maintain-big-app-stacks-without-losing-you.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;zc.buildout is a powerful build/configure/deployment tool for creating
applications from multiple parts, some not python. It's perfect for
sharing a development environment or deploy applications to many hosts.
This tutorial will cover basic concepts, similarity to other tools such
as virtual-env, puppet etc as well as practical examples. zc.buildout
has successful been used with web applications such as Plone, django and
pyramid.&lt;/p&gt;
</summary><category term="deploy"></category><category term="django"></category><category term="puppet"></category><category term="tutorial"></category><category term="web"></category><category term="zc.buildout"></category></entry><entry><title>Panel: Python in the webs</title><link href="http://pyvideo.org/pycon-au-2011/panel-python-in-the-webs.html" rel="alternate"></link><published>2011-08-22T00:00:00+00:00</published><updated>2011-08-22T00:00:00+00:00</updated><author><name>Dylan Jay</name></author><id>tag:pyvideo.org,2011-08-22:pycon-au-2011/panel-python-in-the-webs.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;This will be a panel discussion wherein we wax philosophical about the
state of web frameworks in Python - talking about invention,
reinvention, multitudes of choice, how all of them suck, etc. Panelists
will include Dylan Jay, Malcolm Tredinnick, Russell Keith-Magee and
Richard Jones.&lt;/p&gt;
</summary><category term="panel"></category><category term="web"></category></entry><entry><title>Pyramid: Lighter, faster, better web apps</title><link href="http://pyvideo.org/pycon-au-2011/pyramid-lighter-faster-better-web-apps.html" rel="alternate"></link><published>2011-08-22T00:00:00+00:00</published><updated>2011-08-22T00:00:00+00:00</updated><author><name>Dylan Jay</name></author><id>tag:pyvideo.org,2011-08-22:pycon-au-2011/pyramid-lighter-faster-better-web-apps.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Introduction to the Pyramid, the new web framework taking the python
world by storm. This tutorial will cover the basics of a hello world app
and cover some of the advanced features of pyramid that give it it's
power such as traversal. Pyramid is part of the pylons project and is a
successor to pylons and a continuation of the BFG framework. It's very
simple to learn, runs fast yet has powerful concepts which help keep
large web app creation a sane process..&lt;/p&gt;
</summary><category term="framework"></category><category term="pylons"></category><category term="pyramid"></category><category term="tutorial"></category><category term="web"></category></entry><entry><title>Web micro-framework battle</title><link href="http://pyvideo.org/pycon-au-2011/web-micro-framework-battle.html" rel="alternate"></link><published>2011-08-22T00:00:00+00:00</published><updated>2011-08-22T00:00:00+00:00</updated><author><name>Richard Jones</name></author><id>tag:pyvideo.org,2011-08-22:pycon-au-2011/web-micro-framework-battle.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;In this talk I'll be running through the current choices of web micro
frameworks and comparing them by implementing a simple application.&lt;/p&gt;
</summary><category term="web"></category></entry><entry><title>Django, App-gehoben</title><link href="http://pyvideo.org/pycon-de-2012/django-app-gehoben.html" rel="alternate"></link><published>2012-10-31T00:00:00+00:00</published><updated>2012-10-31T00:00:00+00:00</updated><author><name>Frank Becker</name></author><id>tag:pyvideo.org,2012-10-31:pycon-de-2012/django-app-gehoben.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Das Webframework Django kommt ganz wie Python mit &amp;quot;Batteries included&amp;quot;.
Ähnlich wie sich in Python mit seiner umfangreichen Standardlib viele
Alltagsaufgaben mit wenigen Zeilen Code erledigen lassen, so vereinfacht
Django die Entwicklung von Webanwendungen. Und genau wie es im PyPI
unzählige Packages für so gut wie jede Aufgabe gibt, so umkreist auch
Django eine Fülle von sogenannten Pluggable Apps, also Zusatzmodulen für
fast jeden Anwendungsfall.&lt;/p&gt;
&lt;p&gt;Der Vortrag stellt einige Highlights solcher Django-Packages vor, welche
ohne viel Aufwand gewöhnlichen Djangoanwendungen erweiterte
Funktionalität mitgeben.&lt;/p&gt;
&lt;p&gt;Es werden aus den Bereichen RESTful API, Formulare, Sicherheit,
CSS/SCSS/JS Handling, Softwaretesting, Taskqueue, Ajax, Suche,
Datenbankschemamigration und Authentifizierung jeweils ein populäres
Beispielpackage kurz vorgestellt. Der Fokus liegt bewußt nicht auf
Details. Gezeigt wird grob die Funktionsweise, Installation und ein paar
Erfahrungen aus dem praktischen Einsatz.&lt;/p&gt;
&lt;p&gt;Der geneigte Zuhörer soll angeregt werden ähnliche Django-Packages in
seinen eigenen Projekten zu verwenden. Der Benefit für den Einzelnen
ist, schnell meist gut getestete Funktionalität für das eigene Projekt
einzubauen. Die Gemeinschaft profitiert von gemeinschaftlich
entwickelter Freier Software.&lt;/p&gt;
</summary><category term="app"></category><category term="django"></category><category term="module"></category><category term="package"></category><category term="pluggable"></category><category term="reuseable app"></category><category term="web"></category></entry><entry><title>Practical DevOps</title><link href="http://pyvideo.org/pycon-de-2012/practical-devops.html" rel="alternate"></link><published>2012-10-31T00:00:00+00:00</published><updated>2012-10-31T00:00:00+00:00</updated><author><name>Schlomo Schapiro</name></author><id>tag:pyvideo.org,2012-10-31:pycon-de-2012/practical-devops.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;DevOps ist eine aktuelle Bewegung in der IT, die sich zur Aufgabe macht,
ein Umdenken in den klassischen Lagern Entwicklung und Betrieb
einzuleiten. Der Vortrag wirft einen Blick auf die noch junge Bewegung
und zeigt mit Geschichten aus dem wahren Leben, wie sich die agile
Denkweise fortschreiben lässt, die mit SCRUM ins allgemeine Bewusstsein
getreten ist.&lt;/p&gt;
&lt;p&gt;Schlomo gibt einen Überblick über das Thema und berichtet über die
DevOps Erfolge bei der
&lt;a class="reference external" href="http://www.immobilienscout24.de"&gt;ImmobilienScout24&lt;/a&gt;. Nach 2 Jahren
agilem Umdenken in der Entwicklung zeigte sich, dass die klassische
Gewaltenteilung Plan - Build - Run einfach nicht mehr gut funktioniert
weil sich die Anforderungen und Erwartungen sowohl in der Entwicklung
als auch im Betrieb ändern und daher auch eine neue Form der
Zusammenarbeit nahe legen.&lt;/p&gt;
&lt;p&gt;Die Ideen aus der DevOps Bewegung lassen sich fast überall einsetzen, wo
bisher ein &amp;quot;über den Zaun werfen&amp;quot; gespielt wird und haben das primäre
Ziel, alle Beteiligten gemeinsam an einem Strang ziehen zu lassen. Mit
den Ideen und Erfahrungen aus dem Vortrag lassen sich sicher die ersten
Schritte in die richtige Richtung einleiten.&lt;/p&gt;
</summary><category term="agile"></category><category term="devops"></category><category term="kanban"></category><category term="open source"></category><category term="python"></category><category term="scrum"></category><category term="web"></category></entry><entry><title>Building Leafy Chat, DjangoDose, and Hurricane, Lessons Learned on the Real-Time Web with Python (#24)</title><link href="http://pyvideo.org/pycon-us-2010/pycon-2010--building-leafy-chat--djangodose--and-.html" rel="alternate"></link><published>2010-02-19T00:00:00+00:00</published><updated>2010-02-19T00:00:00+00:00</updated><author><name>Alex Gaynor</name></author><id>tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--building-leafy-chat--djangodose--and-.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Building Leafy Chat, DjangoDose, and Hurricane. Lessons learned on the
real- time web with Python&lt;/p&gt;
&lt;p&gt;Presented by Alex Gaynor (Eldarion)&lt;/p&gt;
&lt;p&gt;Websites are getting increasingly dynamic and realtime in order to
compete with desktop applications. This talk is an examination of 3
websites/tools I've built, all using Python. I'm going to try to explain
what we did to build these, and how you can do the same.&lt;/p&gt;
</summary><category term="pycon"></category><category term="pycon2010"></category><category term="realtime"></category><category term="web"></category></entry><entry><title>Creating RESTful Web services with restish (#17)</title><link href="http://pyvideo.org/pycon-us-2010/pycon-2010--creating-restful-web-services-with-re.html" rel="alternate"></link><published>2010-02-19T00:00:00+00:00</published><updated>2010-02-19T00:00:00+00:00</updated><author><name>Grig Gheorghiu</name></author><id>tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--creating-restful-web-services-with-re.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Creating RESTful Web Services with restish&lt;/p&gt;
&lt;p&gt;Presented by Grig Gheorghiu&lt;/p&gt;
&lt;p&gt;Roy Fielding described REST in his Ph.D. dissertation in the year 2000.
Almost ten years later, Web developers are still confused as to how to
apply the REST principles in their applications. Examples of poorly
designed 'REST' APIs abound, and I will make use of them in my talk.&lt;/p&gt;
&lt;p&gt;In this presentation, I will give an overview of REST and its design
principles, and I will show a concrete example of a RESTful Web service
implemented in the restish framework. My examples will include CRUD
operations, as well as transactions. I will also show how to consume
this Web service using both httplib2 and curl. I would be remiss if I
didn't describe ways to test the Web service with WebTest and twill.&lt;/p&gt;
</summary><category term="pycon"></category><category term="pycon2010"></category><category term="rest"></category><category term="restish"></category><category term="testing"></category><category term="web"></category></entry><entry><title>Dealing with unsightly data in the real world. (#156)</title><link href="http://pyvideo.org/pycon-us-2010/pycon-2010--dealing-with-unsightly-data-in-the-re.html" rel="alternate"></link><published>2010-02-19T00:00:00+00:00</published><updated>2010-02-19T00:00:00+00:00</updated><author><name>Alexander Dutton</name></author><id>tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--dealing-with-unsightly-data-in-the-re.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Dealing with unsightly data in the real world&lt;/p&gt;
&lt;p&gt;Presented by Alexander Dutton&lt;/p&gt;
&lt;p&gt;Drawing on experiences writing &lt;a class="reference external" href="http://m.ox.ac.uk/"&gt;http://m.ox.ac.uk/&lt;/a&gt;, we'll explore the art
of getting data out of unhelpful systems. We'll start with working out
how to interact with a system, move on to techniques for parsing the
data it gives you, and round off by implementing a shinier interface
over the top.&lt;/p&gt;
</summary><category term="pycon"></category><category term="pycon2010"></category><category term="scraping"></category><category term="web"></category></entry><entry><title>Introduction to Internet Programming</title><link href="http://pyvideo.org/pycon-us-2010/pycon-2010--introduction-to-internet-programming.html" rel="alternate"></link><published>2010-02-19T00:00:00+00:00</published><updated>2010-02-19T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--introduction-to-internet-programming.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Introduction to Internet Programming (Wesley J. Chun)&lt;/p&gt;
&lt;p&gt;Python is an interpreted, cross-platform, object-oriented programming
language that is popular for a wide range of applications, one of which
is Internet programming. This tutorial introduces current Python
programmers to 3-4 distinct areas of Internet programming, each in
self-contained lectures with a demonstration of code following each
lecture topic. Intended Audience&lt;/p&gt;
&lt;p&gt;Developers familiar with Python who are interested in exploring
client/server network programming with sockets, Internet client (FTP,
NNTP, e-mail), development and web programming.&lt;/p&gt;
&lt;p&gt;Class Outline&lt;/p&gt;
&lt;p&gt;Python is an interpreted, cross-platform, object-oriented programming
language that is popular for a wide range of applications, one of which
is Internet programming. This tutorial introduces current Python
programmers to distinct areas of Internet programming, each in
self-contained lectures with a demonstration of code following these
lecture topics (each ranging from 20-60min in length):&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Network Programming using Sockets&lt;/li&gt;
&lt;li&gt;Internet Client Programming&lt;/li&gt;
&lt;li&gt;Web/CGI Programming and Concepts&lt;/li&gt;
&lt;li&gt;Intro to Django (time-permitting)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We start at the lowest layer, where one creates communication channels
directly between clients and servers using sockets then move up one
level to discuss well-known Internet protocols such as FTP. Then we move
up even higher to address the concept of web programming, including a
description and purpose of all &amp;quot;CGI&amp;quot; interfaces, and finally, if there's
time, to give a high-level quick introduction to one of the most popular
Python web frameworks today, Django. We'll try build and implement a
simple blog in 15-20 minutes! This is especially for those of you who
couldn't sign up for the intro to Django tutorial at this PyCon which
will likely be full.&lt;/p&gt;
&lt;p&gt;About the Instructor&lt;/p&gt;
&lt;p&gt;WESLEY J. CHUN, MSCS, is the author of Prentice Hall's bestseller, &amp;quot;Core
Python Programming&amp;quot;, its video training course, &amp;quot;Python Fundamentals&amp;quot;
(LiveLessons DVD), and co-author of &amp;quot;Python Web Development with
Django&amp;quot;. In addition to being a software architect and Developer
Advocate for Google, he runs CyberWeb, a consulting business
specializing in Python software engineering and technical training. He
has over 25 years of programming, teaching, and writing experience,
including more than a decade of Python. While at Yahoo!, he helped
create Yahoo! Mail and Yahoo! People Search using Python. He holds
degrees in Computer Science, Mathematics, and Music from the University
of California.&lt;/p&gt;
</summary><category term="pycon"></category><category term="pycon2010"></category><category term="tutorial"></category><category term="web"></category></entry><entry><title>Panel: Form Generator Generators (#28)</title><link href="http://pyvideo.org/pycon-us-2010/pycon-2010--panel--form-generator-generators---28.html" rel="alternate"></link><published>2010-02-19T00:00:00+00:00</published><updated>2010-02-19T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--panel--form-generator-generators---28.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Panel: Form Generator Generators&lt;/p&gt;
&lt;p&gt;Christopher Perkins; Brandon Craig Rhodes (Rhodes Mill Studios, Inc.);
Chris P McDonough (Agendaless Consulting); Jacob Kaplan-Moss
(&lt;a class="reference external" href="mailto:jacob&amp;#64;jacobian.org"&gt;jacob&amp;#64;jacobian.org&lt;/a&gt;); Jonathan Ellis&lt;/p&gt;
&lt;p&gt;It seems that almost every python web framework in existence has solved
the problem of automatically generating forms. Some have straight
forward techniques, some are unique or even an unusual approach to the
problem. The question is: &amp;quot;what can we learn from each other?&amp;quot;. This
panel will examine the different ways developers generate forms by
offering examples, and summarizing the functionality, differences, and
similarities between these valuable web development tools.&lt;/p&gt;
&lt;p&gt;[VIDEO HAS ISSUES: Feedback galore when moving between mics, cover your
ears]&lt;/p&gt;
</summary><category term="forms"></category><category term="panel"></category><category term="pycon"></category><category term="pycon2010"></category><category term="restish"></category><category term="turbogears"></category><category term="web"></category><category term="web2py"></category><category term="zope"></category></entry><entry><title>Scaling your Python application on EC2 (#191)</title><link href="http://pyvideo.org/pycon-us-2010/pycon-2010--scaling-your-python-application-on-ec.html" rel="alternate"></link><published>2010-02-19T00:00:00+00:00</published><updated>2010-02-19T00:00:00+00:00</updated><author><name>Jeremy Edberg</name></author><id>tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--scaling-your-python-application-on-ec.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Scaling Your Python Application on EC2&lt;/p&gt;
&lt;p&gt;Presented by Jeremy Edberg&lt;/p&gt;
&lt;p&gt;Come hear about the trials and tribulations of moving reddit's Python
application from physical hardware to EC2's cloud infrastructure, and
how they have scaled since moving. Will include general discussion of
their learnings about scaling as well cloud specific issues.&lt;/p&gt;
&lt;p&gt;[VIDEO HAS ISSUES: Missing audio first few seconds]&lt;/p&gt;
</summary><category term="pycon"></category><category term="pycon2010"></category><category term="reddit"></category><category term="scaling"></category><category term="web"></category></entry><entry><title>Scrape the Web: Strategies for programming websites that don't expect it</title><link href="http://pyvideo.org/pycon-us-2010/pycon-2010--scrape-the-web--strategies-for-progra.html" rel="alternate"></link><published>2010-02-19T00:00:00+00:00</published><updated>2010-02-19T00:00:00+00:00</updated><author><name>Asheesh Laroia</name></author><id>tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--scrape-the-web--strategies-for-progra.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;We'll discuss the basics of web scraping, and then dive into the details
of different methods and where they are most applicable. You'll leave
with an understanding of when to apply different tools, and learn about
automating a full web browser, a &amp;quot;heavy hammer&amp;quot; that I picked up at a
project for the Electronic Frontier Foundation.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Scrape the Web: Strategies for programming websites that don't expect it&lt;/p&gt;
&lt;p&gt;Presented by Asheesh Laroia&lt;/p&gt;
&lt;p&gt;Do you find yourself faced with websites that have data you need to
extract? Would your life be simpler if you could programmatically input
data into web applications, even those tuned to resist interaction by
bots?&lt;/p&gt;
&lt;p&gt;Year by year, the web is becoming a stronger force. Learn how to get the
best of it.&lt;/p&gt;
&lt;p&gt;We'll discuss the basics of web scraping, and then dive into the details
of different methods and where they are most applicable. You'll leave
with an understanding of when to apply different tools, and learn about
automating a full web browser, a &amp;quot;heavy hammer&amp;quot; that I picked up at a
project for the Electronic Frontier Foundation.&lt;/p&gt;
&lt;p&gt;Atendees should bring a laptop, if possible, to try the examples we
discuss and optionally take notes. Code samples will be made available
after class with no restrictions. Intended Audience&lt;/p&gt;
&lt;p&gt;Intermediate (or better) Python programmers, probably without extensive
web testing experience&lt;/p&gt;
&lt;p&gt;Class Outline&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;My motto: &amp;quot;The website is the API.&amp;quot;&lt;/li&gt;
&lt;li&gt;Choosing a parser: BeautifulSoup, lxml, HTMLParse, and html5lib.&lt;/li&gt;
&lt;li&gt;Extracting information, even in the face of bad HTML: Regular
expressions, BeautifulSoup, SAX, and XPath.&lt;/li&gt;
&lt;li&gt;Automatic template reverse-engineering tools.&lt;/li&gt;
&lt;li&gt;Submitting to forms.&lt;/li&gt;
&lt;li&gt;Playing with XML-RPC&lt;/li&gt;
&lt;li&gt;DO NOT BECOME AN EVIL COMMENT SPAMMER.&lt;/li&gt;
&lt;li&gt;Countermeasures, and circumventing them:&lt;ul&gt;
&lt;li&gt;IP address limits&lt;/li&gt;
&lt;li&gt;Hidden form fields&lt;/li&gt;
&lt;li&gt;User-agent detection&lt;/li&gt;
&lt;li&gt;JavaScript&lt;/li&gt;
&lt;li&gt;CAPTCHAs&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Plenty of full source code to working examples:&lt;ul&gt;
&lt;li&gt;Submitting to forms for text-to-speech.&lt;/li&gt;
&lt;li&gt;Downloading music from web stores.&lt;/li&gt;
&lt;li&gt;Automating Firefox with Selenium RC to navigate a pure-JavaScript
service.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Q&amp;amp;A; and workshopping&lt;/li&gt;
&lt;li&gt;Use your power for good, not evil.&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="pycon"></category><category term="pycon2010"></category><category term="scraping"></category><category term="web"></category></entry><entry><title>Supercharging Web Communications: Integrating Python-based Apps with Salesforce.com CRM (#152)</title><link href="http://pyvideo.org/pycon-us-2010/pycon-2010--supercharging-web-communications--int.html" rel="alternate"></link><published>2010-02-19T00:00:00+00:00</published><updated>2010-02-19T00:00:00+00:00</updated><author><name>Christopher Johnson</name></author><id>tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--supercharging-web-communications--int.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Supercharging Web Communications: Integrating Python-based Apps with
Salesforce.com CRM&lt;/p&gt;
&lt;p&gt;Presented by Christopher Johnson&lt;/p&gt;
&lt;p&gt;Salesforce.com is a leading provider of Customer Relationship Management
(CRM) for enterprises (over 55,000 customers) and nonprofits (over 6,000
customers). While it handles sales, marketing and support processes, it
can be extended to automate any business process, making it a core part
of business operations. Python developers working with companies using
salesforce.com need to be able to integrate applications with
Salesforce. Luckily, Salesforce.com has an elegant and powerful SOAP
API. This presentation will introduce an example of using the Python
wrapper for the Salesforce.com API (Beatbox) in an interactive website.
While the library itself is powerful and can be used in custom Python
applications, the Python community can also leverage the advanced
integration between the Plone Content Management System (CMS) and
salesforce.com. We will demonstrate how a Plone website can post forms,
ecommerce transactions, and event RSVPs to salesforce. Additionally, we
will show how developers can make Salesforce.com data interactive in a
Plone website.&lt;/p&gt;
</summary><category term="cms"></category><category term="crm"></category><category term="plone"></category><category term="pycon"></category><category term="pycon2010"></category><category term="web"></category></entry><entry><title>An (biased) survey of the python web</title><link href="http://pyvideo.org/pycon-us-2011/pycon-2011--an--biased--survey-of-the-python-web.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Mark Ramm</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--an--biased--survey-of-the-python-web.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;An (biased) survey of the python web&lt;/p&gt;
&lt;p&gt;Presented by Mark Ramm&lt;/p&gt;
&lt;p&gt;I may be BDFL of one framework, but that's also why I pay attention to
the whole ecosystem. From the release of Plone 4, TurboGears 2, Django
1.2 and Pylons 1 ,it's been an interesting year. And things like
html5lib, an updated WSGI spec, and a contender for the next generation
WSGI have all made things interesting. Come explore the wild and dynamic
jungle that I call &amp;quot;the python web toolkit.&amp;quot;&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;This talk will not teach people to use python to make websites. It's to
teach people who already use python, that there are lots of different
tools out there, and to help us all get some perspective on the python
web toolkit.&lt;/p&gt;
&lt;p&gt;In 2005 Pycon had the great PyWebOff, and while this talk won't be about
throwing Twisted into a cage match with Zope3, or setting Flask up in a
fight to the death against web.py, it will one again provide an attempt
to survey the full landscape of the python web world, and to see how far
we've come in the last 5 years.&lt;/p&gt;
&lt;p&gt;We've definitely come a long way. Django has brought over many converts
to Python, google released app engine with python as the first supported
language, and there are quite a few sites in the top 100 using python to
serve up dynamic content to hundreds of millions of users.&lt;/p&gt;
&lt;p&gt;But it hasn't all been good either, there's more fragmentation than
ever. We've also got more half finished libraries, and broken framework
extensions, and abandoned projects littering up the landscape.&lt;/p&gt;
</summary><category term="pycon"></category><category term="pycon2011"></category><category term="web"></category><category term="webframeworks"></category></entry><entry><title>web2py secrets tutorial (1/2)</title><link href="http://pyvideo.org/pycon-us-2011/pycon-2011--web2py-secrets-tutorial--1-2.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Massimo Di Pierro</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--web2py-secrets-tutorial--1-2.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;web2py secrets&lt;/p&gt;
&lt;p&gt;Presented by Massimo Di Pierro&lt;/p&gt;
&lt;p&gt;We will provide an introduction to web2py with particular focus on its
design objectives, its differences when compared to other web
frameworks, and some of the most recently added features (components,
plugins, openid/oauth integration).&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Web2py is a framework for rapid web application development of secure
database-driven web applications. In this tutorial we will provide a
brief introduction to web2py, the web based IDE, its internal design,
and its internal file organization. We will explain the motivations
behind some of its most controversial design goals. We will also discuss
in some detail its Ajax capabilities by using web2py components and
plugins for modular design of rich web interfaces.&lt;/p&gt;
&lt;p&gt;This will be a very concentrated version (10%) of a course (CSC438) on
web frameworks the author teaches at DePaul University. The course has
been taught 3 times and the last time counted more than 30 students.&lt;/p&gt;
</summary><category term="pycon"></category><category term="pycon2011"></category><category term="web"></category><category term="web2py"></category></entry></feed>