<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>http://pyvideo.org/</link><description></description><lastBuildDate>Thu, 18 May 2017 00:00:00 +0000</lastBuildDate><item><title>Mastering scipy.spatial</title><link>http://pyvideo.org/pycon-us-2017/mastering-scipyspatial.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The heavily-used scipy library is so large that each of the major
modules could fill its own tutorial syllabus. It is also
production-quality software with a 1.0 release imminent. In this
tutorial, my focus is to cover the scipy.spatial component of the
library in great detail, from the perspective of a heavy user and active
developer of the computational geometry components of scipy. From
distance matrices to Voronoi diagrams and Hausdorff distances, we will
explore the corners of scipy.spatial code--both long-established
features and even proposed features that haven't yet made it into a
stable release.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tyler Reddy</dc:creator><pubDate>Thu, 18 May 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-05-18:pycon-us-2017/mastering-scipyspatial.html</guid></item><item><title>MDAnalysis: A Python Package for the Rapid Analysis of Molecular Dynamics Simulations</title><link>http://pyvideo.org/scipy-2016/mdanalysis-a-python-package-for-the-rapid-analysis-of-molecular-dynamics-simulations-scipy-2016.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;MDAnalysis (&lt;a class="reference external" href="http://mdanalysis.org"&gt;http://mdanalysis.org&lt;/a&gt;) is an object-oriented library for structural and temporal analysis of molecular dynamics (MD) simulation trajectories and individual protein structures. MD simulations of biological molecules have become an important tool to elucidate the relationship between molecular structure and physiological function. Simulations are performed with highly optimized software packages on HPC resources but most codes generate output trajectories in their own formats so that the development of new trajectory analysis algorithms is confined to specific user communities and widespread adoption and further development is delayed. The MDAnalysis library addresses this problem by abstracting access to the raw simulation data and presenting a uniform object-oriented Python interface to the user. It thus enables users to rapidly write code that is portable and immediately usable in virtually all biomolecular simulation communities. The user interface and modular design work equally well in complex scripted workflows, as foundations for other packages, and for interactive and rapid prototyping work in IPython/Jupyter notebooks, especially together with molecular visualization provided by nglview [1] and time series analysis with pandas [2]. MDAnalysis is written in Python and Cython and uses NumPy arrays for easy interoperability with the wider scientific Python ecosystem. It is widely used and forms the foundation for more specialized biomolecular simulation tools. MDAnalysis is available under the GNU General Public License v2.&lt;/p&gt;
&lt;p&gt;[1] &lt;a class="reference external" href="https://github.com/arose/nglview"&gt;https://github.com/arose/nglview&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[2] &lt;a class="reference external" href="http://pandas.pydata.org/"&gt;http://pandas.pydata.org/&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Oliver Beckstein</dc:creator><pubDate>Thu, 14 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-07-14:scipy-2016/mdanalysis-a-python-package-for-the-rapid-analysis-of-molecular-dynamics-simulations-scipy-2016.html</guid><category>mdanalysis</category><category>biomolecular</category><category>biomedicine</category></item><item><title>Computational Geometry in Python</title><link>http://pyvideo.org/pycon-us-2016/tyler-reddy-computational-geometry-in-python-pycon-2016.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker: Tyler Reddy&lt;/p&gt;
&lt;p&gt;Computational geometry deals with the algorithms used to solve a diverse set of problems in geometry. Applications range from robotics (visibility) and geographic information systems to game development (collision detection) and medical research. This tutorial will introduce computational geometry, the related tools available in the Python ecosystem, and identify areas for improvement.&lt;/p&gt;
&lt;p&gt;Slides can be found at: &lt;a class="reference external" href="https://speakerdeck.com/pycon2016"&gt;https://speakerdeck.com/pycon2016&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/PyCon/2016-slides"&gt;https://github.com/PyCon/2016-slides&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tyler Reddy</dc:creator><pubDate>Mon, 30 May 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-05-30:pycon-us-2016/tyler-reddy-computational-geometry-in-python-pycon-2016.html</guid></item></channel></rss>