<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="http://pyvideo.org/" rel="alternate"></link><link href="http://pyvideo.org/feeds/speaker_ville-tuulos.atom.xml" rel="self"></link><id>http://pyvideo.org/</id><updated>2016-08-24T00:00:00+00:00</updated><entry><title>TrailDB tutorial Store and process billions of events efficiently</title><link href="http://pyvideo.org/pydata-san-francisco-2016/traildb-tutorial-store-and-process-billions-of-events-efficiently.html" rel="alternate"></link><published>2016-08-24T00:00:00+00:00</published><updated>2016-08-24T00:00:00+00:00</updated><author><name>Ville Tuulos</name></author><id>tag:pyvideo.org,2016-08-24:pydata-san-francisco-2016/traildb-tutorial-store-and-process-billions-of-events-efficiently.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData SF 2016
Ville Tuulos | TrailDB tutorial Store and process billions of events efficiently&lt;/p&gt;
&lt;p&gt;TrailDB is an efficient library for storing and querying series of events. It shines at compressing a large number of discrete events in a small space - often small enough to allow processing on a single server. TrailDB is implemented in C and it comes with Python bindings.&lt;/p&gt;
&lt;p&gt;This is a hands-on tutorial that gets you started with TrailDB. Bring your own data or play with a public data set.&lt;/p&gt;
&lt;p&gt;What is TrailDB?&lt;/p&gt;
&lt;p&gt;TrailDB is designed to be a core building block for systems that need to store and process a large number of discrete events, organized by a primary key. It is complementary to existing relational and time-series databases and key-value stores.&lt;/p&gt;
&lt;p&gt;What makes TrailDB different is immutability: Immutable data enables deeper compression, scalability, and architectural decisions, which would not be feasible with existing databases. This is especially true for cloud environments with object stores like Amazon S3 that are a perfect match for compressed, immutable files.&lt;/p&gt;
&lt;p&gt;Developer productivity is another main motivation of TrailDB. Individual files are easy to manipulate using standard filesystem tools. The easily portable C library has only a few easily available dependencies, making it easily deployable. The API is clean and minimal by design. Language bindings are provided for Python, Go, Haskell, R, and D.&lt;/p&gt;
&lt;p&gt;TrailDB is a perfect match for use cases that involve detecting patterns over time, such as web/mobile analytics, anomaly detection, and various machine learning models. Since 2014, AdRoll has used TrailDB to store and query over 20 trillion events that power a number of products at AdRoll. TrailDB was open-sourced in May 2016.&lt;/p&gt;
</summary></entry></feed>