<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>http://pyvideo.org/</link><description></description><lastBuildDate>Sun, 11 Sep 2016 00:00:00 +0000</lastBuildDate><item><title>Hear no evil, see no evil, patch no evil: Or, how to monkey-patch safely.</title><link>http://pyvideo.org/kiwi-pycon-2016/hear-no-evil-see-no-evil-patch-no-evil-or-how-to-monkey-patch-safely.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Graham Dumpleton
&lt;a class="reference external" href="https://kiwi.pycon.org/schedule/presentation/155/"&gt;https://kiwi.pycon.org/schedule/presentation/155/&lt;/a&gt;
Monkey patching has come to have a reputation of being somewhat evil. In this talk you will learn what monkey patching is all about and whether its reputation as being evil is truly justified.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Graham Dumpleton</dc:creator><pubDate>Sun, 11 Sep 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-09-11:kiwi-pycon-2016/hear-no-evil-see-no-evil-patch-no-evil-or-how-to-monkey-patch-safely.html</guid></item><item><title>Warpdrive, making Python web application deployment magically easy.</title><link>http://pyvideo.org/kiwi-pycon-2016/warpdrive-making-python-web-application-deployment-magically-easy.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Graham Dumpleton
&lt;a class="reference external" href="https://kiwi.pycon.org/schedule/presentation/108/"&gt;https://kiwi.pycon.org/schedule/presentation/108/&lt;/a&gt;
Deploying Python web applications is too hard. You either have to understand some arcane configuration syntax, or have to dig through an encyclopaedic volume of options. It shouldn't have to be this hard. In this talk you will see how 'warpdrive', with the right sort of magic, can make Python web application deployment easy.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Graham Dumpleton</dc:creator><pubDate>Sun, 11 Sep 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-09-11:kiwi-pycon-2016/warpdrive-making-python-web-application-deployment-magically-easy.html</guid></item><item><title>Hear no evil, see no evil, patch no evil: Or, how to monkey-patch safely.</title><link>http://pyvideo.org/pycon-au-2016/hear-no-evil-see-no-evil-patch-no-evil-or-how-to-monkey-patch-safely.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Graham Dumpleton
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/18/view_talk"&gt;https://2016.pycon-au.org/schedule/18/view_talk&lt;/a&gt;
Python is a dynamic programming language and has a strong tradition of adhering to a programming style called duck-typing. This means that it is possible to easily modify an application's code while it is running. One might wish to do this for various reasons, including enhancing the functionality of code, correcting errant behaviour, or adding instrumentation or debugging code.&lt;/p&gt;
&lt;p&gt;Making such code modifications can be tricky though and not done correctly can potentially interfere with the operation of the original code, through destroying introspection abilities, not honouring the duck-typing mantra or due to being applied at the wrong time.&lt;/p&gt;
&lt;p&gt;If you do need to do monkey patching though, the 'wrapt' library is your friend, with its transparent object proxy wrappers and post import hook mechanism, it allows you to safely monkey patch code to modify its behaviour.&lt;/p&gt;
&lt;p&gt;Come learn about the 'wrapt' library and the joys, but also the dangers, of monkey patching.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Graham Dumpleton</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/hear-no-evil-see-no-evil-patch-no-evil-or-how-to-monkey-patch-safely.html</guid></item><item><title>Monkeying Around with Python at New Relic</title><link>http://pyvideo.org/djangocon-2011/djangocon-2011--monkeying-around-with-python-at-n.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Monkeying around with Python at New Relic&lt;/p&gt;
&lt;p&gt;Presented by Graham Dumpleton&lt;/p&gt;
&lt;p&gt;This session will cover the challenges of creating a production
application performance monitoring system for Python. It includes an
overview of the architecture of the system, as well as how it hooks into
Django and captures details about web transactions, database
transactions, memcache requests, exceptions and much more.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Graham Dumpleton</dc:creator><pubDate>Mon, 01 Jan 1990 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,1990-01-01:djangocon-2011/djangocon-2011--monkeying-around-with-python-at-n.html</guid><category>djangocon</category><category>djangocon2011</category><category>exceptions</category><category>memcache</category><category>monitoring</category><category>performance</category><category>requests</category><category>transactions</category></item><item><title>How do debug tool bars for web applications work?</title><link>http://pyvideo.org/djangocon-2014/djangocon-2014-how-do-debug-tool-bars-for-web-applications-work.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;The Django debug toolbar is for many an indispensable part of the
developer toolkit. This talk will look at how such web application debug
tool bars are integrated into your web application and are able to
inject information into your browser window, how they capture the
information presented and how you can extend them.&lt;/p&gt;
&lt;p&gt;Help us caption &amp;amp; translate this video!&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://amara.org/v/FNEi/"&gt;http://amara.org/v/FNEi/&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Graham Dumpleton</dc:creator><pubDate>Fri, 12 Sep 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-09-12:djangocon-2014/djangocon-2014-how-do-debug-tool-bars-for-web-applications-work.html</guid></item><item><title>Advanced methods for creating decorators</title><link>http://pyvideo.org/kiwi-pycon-2013/advanced-methods-for-creating-decorators.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Decorators are a simple concept, yet extremely powerful. Implementing
decorators which will work in a range of contexts is however non
trivial. This talk will walk through various problems which arise with
the more common ways of implementing decorators and then describe how to
combine a wrapper and a descriptor to build a better decorator.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&amp;#64; Kiwi PyCon 2013 - Sunday, 08 Sep 2013 - Track 1&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Experienced&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A decorator is any callable Python object that is used to modify a
function, method or class definition. A decorator is passed the original
object being defined and returns a modified object, which is then bound
to the name in the definition.&lt;/p&gt;
&lt;p&gt;One would generally expect the result of applying a decorator to an
object to be another object which is not readily distinguishable from
the original. Naive implementations of decorators do not however
preserve introspectability. This can result in callable objects having
different names, appearing to have different signatures or not returning
the original doc strings. This can cause problems for tools where you
want to derive information about the original wrapped object such as
debuggers, IDEs, documentation systems or performance monitoring
software.&lt;/p&gt;
&lt;p&gt;The use of the functools.wraps() decorator addresses some of these
issues, but relies on decorators being implemented as closures. Using a
closure to implement a decorator will not always work when wrapping
functions where the descriptor protocol needs to be triggered to bind a
function to an instance, to create an instance method, or where the
function is a special method type such as a class method or static
method.&lt;/p&gt;
&lt;p&gt;A more robust decorator, and one where the decorator is able to
distinguish when it is being applied to a normal function or instance
method, needs to be implemented as a combination of a wrapper and a
descriptor. To also be able to use this as a generic wrapper when
performing monkey patching requires even more tricks.&lt;/p&gt;
&lt;p&gt;The purpose of this talk is to walk through the various problems which
arise with the more common ways of implementing decorators. It will then
describe how to create a more robust generic wrapper/decorator which can
be used in a wider range of scenarios than typical decorators.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Slides&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/nzpug/graham-dumpleton-advanced-methods-for-creating-decorators"&gt;https://speakerdeck.com/nzpug/graham-dumpleton-advanced-methods-for-creating-decorators&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Graham Dumpleton</dc:creator><pubDate>Sun, 15 Sep 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-09-15:kiwi-pycon-2013/advanced-methods-for-creating-decorators.html</guid></item><item><title>PyConAU 2010: Getting started with Apache/mod_wsgi</title><link>http://pyvideo.org/pycon-au-2010/pyconau-2010--getting-started-with-apache-mod-wsg.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Getting started with Apache/mod_wsgi&lt;/p&gt;
&lt;p&gt;Presented by Graham Dumpleton&lt;/p&gt;
&lt;p&gt;An introduction to using Apache/mod_wsgi to host Python web
applications supporting the Python Web Server Gateway Interface (WSGI).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Graham Dumpleton</dc:creator><pubDate>Mon, 01 Jan 1990 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,1990-01-01:pycon-au-2010/pyconau-2010--getting-started-with-apache-mod-wsg.html</guid><category>mod_wsgi</category><category>pyconau</category><category>pyconau2010</category><category>virtualenv</category><category>wsgi</category></item><item><title>Web Server Bottlenecks And Performance Tuning</title><link>http://pyvideo.org/pycon-au-2012/web-server-bottlenecks-and-performance-tuning-0.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;A benchmark of a hello world application is often what developers use to
make the all important decision of what web hosting infrastructure they
use. Worse is that in many cases this is the only sort of performance
testing or monitor&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A benchmark of a hello world application is often what developers use to
make the all important decision of what web hosting infrastructure they
use. Worse is that in many cases this is the only sort of performance
testing or monitoring they will ever do. When it comes to their
production applications they are usually flying blind and have no idea
of how it is performing and what they need to do to tune their web
application stack.&lt;/p&gt;
&lt;p&gt;This talk will provide an overview as to where in your overall request
handling pipeline the main overheads are going to arise. It will then
zoom in and discuss different limiting factors or bottlenecks which can
arise within your WSGI server stack and system that can directly affect
the performance of your Python web application.&lt;/p&gt;
&lt;p&gt;Such factors that will be discussed will include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Use of threads vs processes.&lt;/li&gt;
&lt;li&gt;Number of processors available.&lt;/li&gt;
&lt;li&gt;Python global interpreter lock (GIL)&lt;/li&gt;
&lt;li&gt;Amount of memory available.&lt;/li&gt;
&lt;li&gt;Slow HTTP browsers/clients.&lt;/li&gt;
&lt;li&gt;Browser keep alive connections.&lt;/li&gt;
&lt;li&gt;Need to handle static assets.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;From this will be provided some general guidelines of what is a good
configuration/architecture to use for different types of Python web
applications.&lt;/p&gt;
&lt;p&gt;The importance of continuous production monitoring will also be covered,
ensuring that you know when the performance of your system is dropping
off due to changing traffic patterns as well as code changes you have
made in your actual web application.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Graham Dumpleton</dc:creator><pubDate>Wed, 22 Aug 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-08-22:pycon-au-2012/web-server-bottlenecks-and-performance-tuning-0.html</guid><category>bottlenecks</category><category>performance</category></item><item><title>Debugging Live Python Web Applications</title><link>http://pyvideo.org/pycon-au-2012/debugging-live-python-web-applications-0.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Monitoring tools will record the result of what happened to your web
application or system when a problem arises, but for some classes of
problem are of limited help in working out what happened, except through
inference or by way of&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Monitoring tools will record the result of what happened to your web
application or system when a problem arises, but for some classes of
problem are of limited help in working out what happened, except through
inference or by way of anecdotal evidence.&lt;/p&gt;
&lt;p&gt;This talk will describe the limitations on what monitoring tools can
help you with. It will then move onto look at a range of debugging tools
and techniques which can be applied to web applications, but also
separate them into what can and cannot be used on live production web
applications.&lt;/p&gt;
&lt;p&gt;Topics which will be discussed will include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Browser viewable error pages.&lt;/li&gt;
&lt;li&gt;Browser based debuggers.&lt;/li&gt;
&lt;li&gt;Python interactive debuggers.&lt;/li&gt;
&lt;li&gt;Post-mortem exception analysis.&lt;/li&gt;
&lt;li&gt;Methods for dumping Python stack traces&lt;/li&gt;
&lt;li&gt;Methods for dumping C stack traces.&lt;/li&gt;
&lt;li&gt;Methods for analysing thread utilisation.&lt;/li&gt;
&lt;li&gt;Interactive process introspection tools.&lt;/li&gt;
&lt;li&gt;Error reporting and logging services.&lt;/li&gt;
&lt;li&gt;Performance monitoring services.&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Graham Dumpleton</dc:creator><pubDate>Tue, 21 Aug 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-08-21:pycon-au-2012/debugging-live-python-web-applications-0.html</guid></item><item><title>How do debug tool bars for web applications work? by Graham Dumpleton</title><link>http://pyvideo.org/pycon-au-2014/how-do-debug-tool-bars-for-web-applications-work.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When your production web application breaks, working out what went wrong
can be hard. Information from log messages and details of any Python
exceptions which occurred, along with other application performance data
can help to identify the issue, but not always. Often you will need to
fall back to a development or test environment and hope you can
replicate the problem and then debug the issue from there.&lt;/p&gt;
&lt;p&gt;The purpose of this talk is to dive in and look at one class of tools
that can be used in helping debug web applications. Specifically, it
will look at web application tools such as the Django debug tool bar.&lt;/p&gt;
&lt;p&gt;Rather than simply look at how you might use such a tool though, this
talk will look at how these debug tool bars are actually implemented,
how they hook into your web application, how they capture the
information that they do, as well as how they can be extended to add new
functionality.&lt;/p&gt;
&lt;p&gt;The limitations on these tools as far as performance overhead, security
of data etc, which nearly aways lead to them only being recommended for
development environments, will also be discussed.&lt;/p&gt;
&lt;p&gt;At the same time though, this notion that they are only suitable for
development environments will also be challenged by looking at how a
tool such as the New Relic Python agent, which implements application
performance monitoring, overcomes such limitations to provide a
production grade solution.&lt;/p&gt;
&lt;p&gt;Are there lessons to be learnt from how the New Relic Python agent works
which could drive improvements to existing web application debug tool
bars? Could the New Relic Python agent itself be used as a base for a
new generation of debug tool bars which combine an ability to debug a
web application, even in a production environment, with the ability to
monitor the performance of the web application over time?&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Graham Dumpleton</dc:creator><pubDate>Mon, 11 Aug 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-08-11:pycon-au-2014/how-do-debug-tool-bars-for-web-applications-work.html</guid></item><item><title>Using benchmarks to understand how WSGI servers work</title><link>http://pyvideo.org/pycon-au-2015/using-benchmarks-to-understand-how-wsgi-servers-w.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;During the development of a Python web application the inbuilt
development web server provided by the web framework is often what is
used. When moving to a production environment, one has to choose a more
capable production grade WSGI deployment mechanism. Which of the various
WSGI servers available is going to be the most suitable is going to
depend on a range of criteria related to your specific web applications
requirements.&lt;/p&gt;
&lt;p&gt;Unfortunately, rather than look at the bigger picture and what would be
the most suitable across such criteria, many people will simply rush to
trying to run an overly simplistic benchmark on the various WSGI servers
and make the decision based purely on perceptions of whether one WSGI
server is faster than the alternatives. Worse, they don't even attempt
to do the benchmarks themselves and instead rely on benchmarks published
on some public blog site.&lt;/p&gt;
&lt;p&gt;Such public benchmarks as are available are often flawed, or cover such
a narrow use case as to in no way be relevant to that users own specific
situation.&lt;/p&gt;
&lt;p&gt;A further problem with such benchmarks is that they try and evaluate the
performance of a WSGI server as if they are a black box. As such, there
is no attempt to try and work out what is actually going on within the
WSGI server and why it is exhibiting the behaviour it is.&lt;/p&gt;
&lt;p&gt;The purpose of this talk is to explore a number of different micro
benchmarks, using them to work out what is actually going on within a
WSGI server when they are run. The analysis will delve down into, and
look at the different ways that WSGI servers are implemented and
deployed. The behaviour under the different benchmarks will be
determined using fine grained metrics captured from hooking
instrumentation into the WSGI servers themselves.&lt;/p&gt;
&lt;p&gt;As there are many factors which could be investigated, the talk cannot
be entirely comprehensive, but selected benchmarks drawing from a sub
set of the following areas will be presented:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;multithreading&lt;/li&gt;
&lt;li&gt;CPU intensive tasks&lt;/li&gt;
&lt;li&gt;long running requests&lt;/li&gt;
&lt;li&gt;combination of short and long running requests&lt;/li&gt;
&lt;li&gt;large request content uploads&lt;/li&gt;
&lt;li&gt;large amounts of response content&lt;/li&gt;
&lt;li&gt;blocking on back end services&lt;/li&gt;
&lt;li&gt;slow HTTP clients&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The tests will look not just at response times, but also server capacity
utilisation, CPU and memory utilisation.&lt;/p&gt;
&lt;p&gt;Although the discussion will primarily revolve around WSGI servers, a
comparison will also be made for some tests were one instead to use an
ASYNC web application framework alone, or in conjunction with a WSGI
adapter.&lt;/p&gt;
&lt;p&gt;To conclude, an attempt will be made to summarise what you should be
looking at in a WSGI server to determine if it is the right choice for
your use case.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Graham Dumpleton</dc:creator><pubDate>Mon, 03 Aug 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-08-03:pycon-au-2015/using-benchmarks-to-understand-how-wsgi-servers-w.html</guid></item><item><title>Web Server Bottlenecks And Performance Tuning</title><link>http://pyvideo.org/pycon-us-2012/web-server-bottlenecks-and-performance-tuning.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;New Python web developers seem to love running benchmarks on WSGI
servers. Reality is that they often have no idea what they are doing or
what to look at. This talk will look at a range of factors which can
influence the performance of your Python web application. This includes
the impact of using threads vs processes, number of processors, memory
available, the GIL and slow HTTP clients.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Graham Dumpleton</dc:creator><pubDate>Sat, 10 Mar 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-03-10:pycon-us-2012/web-server-bottlenecks-and-performance-tuning.html</guid></item><item><title>Making Apache suck less for hosting Python web applications.</title><link>http://pyvideo.org/pycon-us-2013/making-apache-suck-less-for-hosting-python-web-ap.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;It is not hard to find developers who will tell you that Apache sucks
for running Python web applications. Is there a valid basis to such
claims or have they simply been misguided by the views of others? This
talk will endeavor to shine a light on the realities of and limitations
in working with Apache, as well as the challenges in implementing the
mod_wsgi module for Apache.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Graham Dumpleton</dc:creator><pubDate>Sat, 16 Mar 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-03-16:pycon-us-2013/making-apache-suck-less-for-hosting-python-web-ap.html</guid><category>talk</category></item><item><title>Advanced methods for creating decorators</title><link>http://pyvideo.org/pycon-us-2014/advanced-methods-for-creat.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Graham Dumpleton</dc:creator><pubDate>Sat, 12 Apr 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-04-12:pycon-us-2014/advanced-methods-for-creat.html</guid></item></channel></rss>