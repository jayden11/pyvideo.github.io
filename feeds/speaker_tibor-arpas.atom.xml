<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="http://pyvideo.org/" rel="alternate"></link><link href="http://pyvideo.org/feeds/speaker_tibor-arpas.atom.xml" rel="self"></link><id>http://pyvideo.org/</id><updated>2017-03-10T00:00:00+00:00</updated><entry><title>Mashing up py.test, coverage.py and ast.py to take TDD to a new level</title><link href="http://pyvideo.org/pycon-sk-2016/mashing-up-pytest-coveragepy-and-astpy-to-take-tdd-to-a-new-level.html" rel="alternate"></link><published>2016-03-11T00:00:00+00:00</published><updated>2016-03-11T00:00:00+00:00</updated><author><name>Tibor Arpáš</name></author><id>tag:pyvideo.org,2016-03-11:pycon-sk-2016/mashing-up-pytest-coveragepy-and-astpy-to-take-tdd-to-a-new-level.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Users and especially developers hate waiting. Computing has adapted and
we almost never wait for the computer for more than 10 seconds. One big
exception is running a test suite, which takes MINUTES on many projects.
That is incredibly distracting, frustrating and dragging the whole
concept of automated tests down.&lt;/p&gt;
&lt;p&gt;I will present a technique and a tool (py.test plugin called “testmon&amp;quot;),
which automatically selects only tests affected by recent changes. Does
it sound too good to be true? Python developers rightfully have a
suspecting attitude towards any tool, which tries to be too clever about
their source code. Code completion and symbol searching doesn’t need to
be 100% reliable but messing with the test suite execution? I will show
that we can significantly reduce the test suite execution time without
losing its reliability.&lt;/p&gt;
</summary></entry><entry><title>Alternatívne spôsoby ako spúšťať testy a vyhodnocovať ich výsledky</title><link href="http://pyvideo.org/pycon-sk-2017/alternativne-sposoby-ako-spustat-testy-a-vyhodnocovat-ich-vysledky.html" rel="alternate"></link><published>2017-03-10T00:00:00+00:00</published><updated>2017-03-10T00:00:00+00:00</updated><author><name>Tibor Arpáš</name></author><id>tag:pyvideo.org,2017-03-10:pycon-sk-2017/alternativne-sposoby-ako-spustat-testy-a-vyhodnocovat-ich-vysledky.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Konceptuálne zamyslenie sa nad tým ako používať sadu testov a ako interpretovať jej výsledky. Čo je pri tom problematické a ako z nej získať čo najväčšiu hodnotu.&lt;/p&gt;
&lt;p&gt;Najpoužívanejším úžívateľským rozhraním na spúštanie testov sú pravdepodobne command line, PyCharm a CI Servre. Ukážem ich výhody a limity. Predvediem alpha verziu nového nástroja na pohodlné výhľadávanie, spúštanie testov, uchovávanie výsledkov a ich prehľadné zobrazenie. Ukážem ako sa vyhnúť kilobajtom neštruktúrovaného textového výpisu.&lt;/p&gt;
&lt;p&gt;Predvediem koncept zobrazenia stack trace inline v editore zdrojového kódu a pohodlnú navigáciu hore-dole po ňom.&lt;/p&gt;
</summary></entry><entry><title>Mashing up py.test, coverage.py and ast.py to take TDD to a new level</title><link href="http://pyvideo.org/europython-2015/mashing-up-pytest-coveragepy-and-astpy-to-take-tdd-to-a-new-level.html" rel="alternate"></link><published>2015-08-06T00:00:00+00:00</published><updated>2015-08-06T00:00:00+00:00</updated><author><name>Tibor Arpas</name></author><id>tag:pyvideo.org,2015-08-06:europython-2015/mashing-up-pytest-coveragepy-and-astpy-to-take-tdd-to-a-new-level.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Tibor Arpas - Mashing up py.test, coverage.py and ast.py to take TDD to a new level
[EuroPython 2015]
[21 July 2015]
[Bilbao, Euskadi, Spain]&lt;/p&gt;
&lt;p&gt;Users and developers especially, hate waiting. Computing has adapted
and we almost never wait for the computer for more then 10 seconds.
One big exception is runnig a test suite which takes MINUTES on many
projects. That is incredibly distracting, frustrating and dragging the
whole concept of automated tests down.&lt;/p&gt;
&lt;p&gt;I present a technique and a tool (py.test plugin called &amp;quot;testmon&amp;quot;)
which automatically selects only tests affected by recent changes.
Does it sound too good to be true? Python developers rightfully have a
suspecting attitude towards any tool which tries to be too clever
about their source code. Code completion and symbol searching doesn't
need to be 100% reliable but messing with the test suite execution? I
show that we can cut test suite execution time significantly but
maintain it's reliability.&lt;/p&gt;
</summary></entry></feed>