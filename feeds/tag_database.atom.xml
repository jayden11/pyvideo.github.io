<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="http://pyvideo.org/" rel="alternate"></link><link href="http://pyvideo.org/feeds/tag_database.atom.xml" rel="self"></link><id>http://pyvideo.org/</id><updated>2016-07-16T00:00:00+00:00</updated><entry><title>We're All Database Engineers (WADE)</title><link href="http://pyvideo.org/pygotham-2016/were-all-database-engineers-wade.html" rel="alternate"></link><published>2016-07-16T00:00:00+00:00</published><updated>2016-07-16T00:00:00+00:00</updated><author><name>Adrian Kramer</name></author><id>tag:pyvideo.org,2016-07-16:pygotham-2016/were-all-database-engineers-wade.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;WADE is a distributed database framework providing strong consistency and high throughput using chain replication, in lieu of the traditional primary/backup model. Quite unlike traditional databases, WADE is a framework. Programmers implement the storage interface themselves and write custom query or update functions in Python that are executed by the database avoiding the dreaded read-write update cycle that degrades performance. Since the storage layer is implemented by the programmer it can be hand customized to the use case at hand using tools such as LevelDB, RocksDB, or whatever the programmer desires. However, WADE takes control at the networking layer handling replication, message forwarding amongst nodes, and fault tolerance in the event of failure so long as a few simple functions are implemented by the end user.&lt;/p&gt;
</summary><category term="database"></category></entry><entry><title>PyOhio 2010: Implementation of a Numerical Simulation in Python</title><link href="http://pyvideo.org/pyohio-2010/pyohio-2010--implementation-of-a-numerical-simula.html" rel="alternate"></link><published>1990-01-01T00:00:00+00:00</published><updated>1990-01-01T00:00:00+00:00</updated><author><name>Jeffrey Armstrong</name></author><id>tag:pyvideo.org,1990-01-01:pyohio-2010/pyohio-2010--implementation-of-a-numerical-simula.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Implementation of a Numerical Simulation in Python&lt;/p&gt;
&lt;p&gt;Presented by Jeffrey B. Armstrong&lt;/p&gt;
&lt;p&gt;The Python programming language is well suited for numerical computation
under a variety of circumstances. Python offers advantages over
competing free and commercial technologies, including price,
functionality, and maintainability. Specifically, the combination of
mature numerical libraries and liberal licensing allow complex
simulations to be coded with ease and to be made available to nearly all
interested parties. !NumPy/!SciPy, database access, networking, and
optimization techniques are examined in detail with respect to numerical
computation. A practical example involving an aerothermal commercial
turbofan aircraft engine simulation showcases these advantages. An
aircraft engine is broken down into discrete stages, including
compressors, turbines, and other flow-related components. Commonalities
between components, such as rotation and the presence of inlet and exit
conditions, map cleanly to the object-oriented nature of Python. Based
on simulation needs and hardware availability, Python allows for the
parallel computation of simulations without the expense and complexity
of commercial parallelization packages.&lt;/p&gt;
</summary><category term="database"></category><category term="networking"></category><category term="numpy"></category><category term="optimization"></category><category term="pyohio"></category><category term="pyohio2010"></category><category term="scipy"></category><category term="simulation"></category></entry><entry><title>Multi-database patterns</title><link href="http://pyvideo.org/djangocon-2010/djangocon-2010--multi-database-patterns.html" rel="alternate"></link><published>2010-09-09T00:00:00+00:00</published><updated>2010-09-09T00:00:00+00:00</updated><author><name>Malcolm Tredinnick</name></author><id>tag:pyvideo.org,2010-09-09:djangocon-2010/djangocon-2010--multi-database-patterns.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A tour through four common &amp;quot;multiple database&amp;quot; usage patterns and how
they can be implemented and utilised with Django. We'll talk about the
strengths and weaknesses of each pattern and why you might not need any
of them.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;There are a few good reasons a system might want to interact regularly
with multiple databases. “Because it’s what cool people do” is not one
of those reasons. Most multi-database usages fall into one of four main
classes:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Separation by function. All data of one type in one database, all
data of another type in some other database.&lt;/li&gt;
&lt;li&gt;Separation by sharding. Data of a particular type (e.g. user records)
is split across multiple databases, each database holding a shard of
the whole data.&lt;/li&gt;
&lt;li&gt;Data replication (separation by access). Some pieces of data are
synchronized to multiple machines. Writes might go into one or more
masters and reads normally come from the slaves.&lt;/li&gt;
&lt;li&gt;Data augmentation/shadowing. Data in one database is added to or
entirely replaced by data from another database. Can happen during
development when reading from a production snapshot whilst trying out
changes to some tables or data only against a local database.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Obviously, combinations of these classes are possible, such as
replicated sharded data in a huge site. There are tricks and traps to
the way a developer talks to each of these sorts of setups. I'll spend a
few minutes showing credible examples of the usage of each as well as
when you might be over- engineering by going that way. All four access
patterns are possible in Django 1.2, with varying degrees of ease of use
and I'll show the type of code required in each case.&lt;/p&gt;
</summary><category term="database"></category><category term="djangocon"></category><category term="djangocon2010"></category><category term="multipledatabases"></category></entry><entry><title>Data Driven Cache Invalidation</title><link href="http://pyvideo.org/europython-2011/data-driven-cache-invalidation.html" rel="alternate"></link><published>2011-07-24T00:00:00+00:00</published><updated>2011-07-24T00:00:00+00:00</updated><author><name>Magnus Hagander</name></author><id>tag:pyvideo.org,2011-07-24:europython-2011/data-driven-cache-invalidation.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Magnus Hagander - 23 June 2011 in &amp;quot;Track Ravioli&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In todays world, nobody (should) deploy a web application facing the
internet without having a proper caching system in place. There are many
different solutions to choose from, from manual use of memcached through
framework integrated caching to external caches like Squid or Varnish.
Most modern frameworks come with integrated functionality for at least
one of these methods, and often more than one.&lt;/p&gt;
&lt;p&gt;However, they often relies on all traffic going through the same
framework to work properly - a caching layer in Rails is hard to share
with one in Django. This talk will show a way to break the design rules
of these frameworks just a little, and have the database help solve this
problem.&lt;/p&gt;
&lt;p&gt;This talk will use a small application written in Python using Django to
illustrate the examples, but the method is language independent.
Unsurprisingly, the database used is PostgreSQL.&lt;/p&gt;
</summary><category term="cache"></category><category term="database"></category><category term="deploy"></category><category term="design"></category><category term="django"></category><category term="framework"></category><category term="web"></category></entry><entry><title>Sqlkit: empowering database access</title><link href="http://pyvideo.org/europython-2011/sqlkit-empowering-database-access.html" rel="alternate"></link><published>2011-07-24T00:00:00+00:00</published><updated>2011-07-24T00:00:00+00:00</updated><author><name>Alessandro Dentella</name></author><id>tag:pyvideo.org,2011-07-24:europython-2011/sqlkit-empowering-database-access.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Alessandro Dentella - 23 June 2011 in &amp;quot;Track
Spaghetti&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;It's very easy to access databases with Python, and there are many ORMs
allowing a high level of abstraction. Still, it's a long road from there
to interactive handling of data, even for very simple tasks.&lt;/p&gt;
&lt;p&gt;Sqlkit tries to act as a bridge, offering some mega-widgets that allow
you to build GUI applications or directly access data using the
'sqledit' application, shipped with sqlkit; sqlkit is built with PyGTK
and SQLAlchemy.&lt;/p&gt;
&lt;p&gt;This presentation covers some of the most powerful features of sqlkit,
and shows how easy it is to build small programs for personal use, as
well as rich and complex applications. It primarily focuses on two
points: how easy it is to create data forms (eventually with one2many or
many2many, thanks to a original definition of layouts), and the template
system based on OpenOffice which allows easy report creation.&lt;/p&gt;
&lt;p&gt;This presentation shows how sqlkit can be used both as application
development framework and as a tool to help us while developing other
applications (e.g.: Django, OpenERP,… ).&lt;/p&gt;
&lt;p&gt;To deliver a gradual presentation, we'll use the configuration system of
sqledit, starting from a minimal configuration (a single URL) we'll add
elements to that until we'll have a full application.&lt;/p&gt;
</summary><category term="database"></category><category term="forms"></category><category term="framework"></category><category term="gui"></category><category term="openoffice"></category><category term="python,"></category></entry><entry><title>Python + Oracle = Prosperity &amp; Performance</title><link href="http://pyvideo.org/europython-2011/python-oracle-prosperity-performance.html" rel="alternate"></link><published>2011-07-21T00:00:00+00:00</published><updated>2011-07-21T00:00:00+00:00</updated><author><name>Todd Trichler</name></author><id>tag:pyvideo.org,2011-07-21:europython-2011/python-oracle-prosperity-performance.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Todd Trichler - 23 June 2011 in &amp;quot;Training Pizza Napoli&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you ever wanted or perhaps needed to access data stored in a
corporate Oracle database from within your Python environment?&lt;/p&gt;
&lt;p&gt;This session will help developers get up and running using Python with
Oracle:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Learn the basics of working with cx_Oracle&lt;/li&gt;
&lt;li&gt;Learn how to use VirtualBox to set up a Python &amp;amp; Oracle test and developement environment.&lt;/li&gt;
&lt;li&gt;Discover features within Oracle that you can use to build more performant python based applications.&lt;/li&gt;
&lt;li&gt;Leave with all the resources you need to certify your python app to run against a production Oracle11gR2 database, or hone those skills for the next job.&lt;/li&gt;
&lt;li&gt;Get a quick intro to Oracle Linux along the way.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;No prior experience with Oracle is required, some basic understanding of
databases would be helpful.&lt;/p&gt;
&lt;p&gt;Look forward to meeting you &amp;#64; EuroPython 2011 - Todd&lt;/p&gt;
</summary><category term="database"></category><category term="performance"></category><category term="virtualbox"></category></entry><entry><title>Sqlkit: database ad accesso immediato</title><link href="http://pyvideo.org/europython-2011/sqlkit-database-ad-accesso-immediato.html" rel="alternate"></link><published>2011-07-18T00:00:00+00:00</published><updated>2011-07-18T00:00:00+00:00</updated><author><name>Alessandro Dentella</name></author><id>tag:pyvideo.org,2011-07-18:europython-2011/sqlkit-database-ad-accesso-immediato.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Alessandro Dentella - 21 June 2011 in &amp;quot;Track Italiana
Big Mac&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;È molto facile accedere ad un database con Python e ci sono molti ORM
che permettono un alto livello di astrazione. Da qui c'é ancora una
lunga strada per arrivare a manipolare interattivamente i dati anche per
semplici compiti.&lt;/p&gt;
&lt;p&gt;Sqlkit cerca di coprire questa distanza fornendo alcuni mega-widgets che
permettono di costruire ogni applicazione GUI o accedere direttamente ai
dati con l'applicazione 'sqledit', che viene distribuita con sqlkit.
Sqlkit è costruita con PyGTK e SQLAlchemy.&lt;/p&gt;
&lt;p&gt;Questa presentazione esplora alcune fra le più potenti caratteristiche
di sqlkit e mostra quanto sia semplice costruire piccoli programmini ad
uso personale o applicazioni ricche ed articolate. Si focalizza
principalmente su due punti: quanto sia facile creare maschere per
editare dati (anche relazioni on2many o many2many, grazie al modo
originale di definire i layout) e al sistema di template basato su
OpenOffice che rende incredibilmente semplice creare report.&lt;/p&gt;
&lt;p&gt;Questa presentazione vuole mostrare come sqlkit può essere usato sia
come framework di sviluppo di applicazioni, sia come strumento che ci
aiuta mentre sviluppiamo altre applicazioni (es.: Django, OpenERP,… ).&lt;/p&gt;
&lt;p&gt;Per rendere la presentazione più graduale, sfrutteremo il sistema di
configurazione di sqledit Partendo da una configurazione minima -un URL-
aggiungeremo elementi fino ad ottenere una vera applicazione.&lt;/p&gt;
</summary><category term="ci"></category><category term="database"></category><category term="framework"></category><category term="gui"></category><category term="openoffice"></category><category term="orm"></category></entry><entry><title>Introduction to Python Database Programming</title><link href="http://pyvideo.org/europython-2011/introduction-to-python-database-programming.html" rel="alternate"></link><published>2011-07-14T00:00:00+00:00</published><updated>2011-07-14T00:00:00+00:00</updated><author><name>Marc-André Lemburg</name></author><id>tag:pyvideo.org,2011-07-14:europython-2011/introduction-to-python-database-programming.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Marc-Andre Lemburg - 21 June 2011 in &amp;quot;Track
Tagliatelle&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The talk will give an introduction to the concepts used in the Python
Database API and relational databases in general. Connection, cursors
and transactions are discussed, and their use in a typical Python
database application are demonstrated. The talk will also touch upon
some advanced database programming techniques and discuss best
practices.&lt;/p&gt;
</summary><category term="api"></category><category term="database"></category><category term="transactions"></category></entry><entry><title>django-rdflib and postgresql - the best of both worlds</title><link href="http://pyvideo.org/europython-2011/django-rdflib-and-postgresql-the-best-of-both-w.html" rel="alternate"></link><published>2011-07-13T00:00:00+00:00</published><updated>2011-07-13T00:00:00+00:00</updated><author><name>Stefan Talpalaru</name></author><id>tag:pyvideo.org,2011-07-13:europython-2011/django-rdflib-and-postgresql-the-best-of-both-w.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Stefan Talpalaru - 21 June 2011 in &amp;quot;Track Ravioli&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;rdflib is a python library implementing a database with various triples
back- end, parser, data serializers, SPARQL is a Python interface to
extract/insert triples. We integrated it in Django reusing the database
connection and exposing an ORM interface, along with full-text search on
literals. This presentation shows a django-rdflib case study with a
PostgreSQL backend in &lt;a class="reference external" href="http://brancusi1.usc.edu"&gt;Brain Architecture Management
System&lt;/a&gt; - a neuroscientific project for the
University of Southern California. Benefits of the flexible RDF
structure will be shown, allowing researchers to insert free format
data, making data public with a customizable serialization and use the
powerful full-text search integrated in PostgreSQL.&lt;/p&gt;
&lt;p&gt;Objective: show attendees an effective combination of RDF, PostgreSQL
full- text search and Django ORM via django-rdflib.&lt;/p&gt;
&lt;p&gt;Requirements: Django familiarity.&lt;/p&gt;
</summary><category term="architecture"></category><category term="database"></category><category term="django"></category><category term="orm"></category><category term="postgresql"></category><category term="reusing"></category><category term="search"></category><category term="serialization"></category><category term="university"></category></entry><entry><title>Getting ready for PostgreSQL 9.1</title><link href="http://pyvideo.org/europython-2011/getting-ready-for-postgresql-91.html" rel="alternate"></link><published>2011-07-13T00:00:00+00:00</published><updated>2011-07-13T00:00:00+00:00</updated><author><name>Gabriele Bartolini</name></author><id>tag:pyvideo.org,2011-07-13:europython-2011/getting-ready-for-postgresql-91.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Gabriele Bartolini,Harald Armin Massa,Marco Nenciarini
- 22 June 2011 in &amp;quot;Training Pizza Napoli &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PostgreSQL is an advanced, versatile open-source database management
system that integrates perfectly with Python. It is developed by a very
active international community and is distributed under the BSD-like
PostgreSQL License.&lt;/p&gt;
&lt;p&gt;Enterprise-class features (including SQL standard compliance, ACID
transactions, disaster recovery, high availability, replication,
partitioning and general extensibility) make PostgreSQL suitable for
business critical environments seeking to reduce the TCO of their
database solutions without altering their functional needs. PostgreSQL
9.0, released in September 2010, was the first version of PostgreSQL
with Hot Standby, a built-in master/slave replication mechanism.
Asynchronous replication through the standard and consolidated log
shipping technique (previously used with Warm Standby for high
availability) has been enhanced with streaming replication.&lt;/p&gt;
&lt;p&gt;Version 9.1, expected to be out later in 2011, will add synchronous
replication to PostgreSQL, making it the first DBMS that allows
developers and users to control the replication strategy at
transactional granularity. Come to the talk and discover all the major
new features of PostgreSQL 9.1, including extensions management,
writable common table expressions (WCTE), etc.&lt;/p&gt;
</summary><category term="asynchronous"></category><category term="business"></category><category term="community"></category><category term="database"></category><category term="distributed"></category><category term="extensions"></category><category term="partitioning"></category><category term="postgresql"></category><category term="replication"></category></entry><entry><title>PostgreSQL - the database-sister of Python</title><link href="http://pyvideo.org/europython-2011/postgresql-the-database-sister-of-python.html" rel="alternate"></link><published>2011-07-13T00:00:00+00:00</published><updated>2011-07-13T00:00:00+00:00</updated><author><name>Harald Armin Massa</name></author><id>tag:pyvideo.org,2011-07-13:europython-2011/postgresql-the-database-sister-of-python.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Harald Armin Massa - 21 June 2011 in &amp;quot;Track Lasagne&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk is the updated and especially enhanced of the &amp;quot;Python and
PostgreSQL - a match made in heaven&amp;quot; talk of EP 2006, CERN, Switzerland.
PostgreSQL and Python share more then the first letter: their
communities have great similiarities; their development processes are
really comparable; their licenses and their openness to academics AND
business (on a technical and communitie perspective) are big pluses. We
will have a look at those similiarities and learn why PostgreSQL is
really the database sister to Python. There will be an overview of
PostgreSQL, information of how to connect PostgreSQL and Python; how
PostgreSQL streaming replication works and what it can do for you, how
PL/Python helps to have Web 2.5 JSON storage and handling right inside
PostgreSQL. We will show that YESQL is also a valid answer to many data
storage qeuestions.&lt;/p&gt;
</summary><category term="business"></category><category term="database"></category><category term="json"></category><category term="postgresql"></category><category term="replication"></category><category term="web"></category></entry><entry><title>Relate or !Relate</title><link href="http://pyvideo.org/europython-2011/relate-or-relate.html" rel="alternate"></link><published>2011-07-13T00:00:00+00:00</published><updated>2011-07-13T00:00:00+00:00</updated><author><name>Mark Ramm-Christensen</name></author><id>tag:pyvideo.org,2011-07-13:europython-2011/relate-or-relate.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Mark Ramm-Christensen - 21 June 2011 in &amp;quot;Track
Spaghetti&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;To Relate or Not to Relate, that is the question raised by the NoSQL
movement. There is a lot of buzz about Couch, Casandra, MongoDB, and
other non relational databases, and at the same time there are decades
of hard work that's gone into optimizing databases built around the
relational model.&lt;/p&gt;
&lt;p&gt;I would actually argue that there is no such thing as a NoSQL database -
there are a variety of compelling options to relational database - each
of which have different features and different performance
characteristics. So no one- sized fits all comparison will do. So, I'll
try to outline a general taxonomy for persistence mechanisms, and then
proceed to comparing relational DB's to their new friends in practice.&lt;/p&gt;
&lt;p&gt;The talk will contain quite a few stories from the trenches with
CouchDB, MongoDB, MySQL, Postgres, Tokyo Cabinet, ZODB, and other
databases, and will help you think about the data storage needs of your
applications in new ways.&lt;/p&gt;
</summary><category term="database"></category><category term="nosql"></category><category term="optimizing"></category><category term="performance"></category></entry><entry><title>Saving Gaia with jQuery Mobile and GeoDjango</title><link href="http://pyvideo.org/europython-2011/saving-gaia-with-jquery-mobile-and-geodjango.html" rel="alternate"></link><published>2011-07-13T00:00:00+00:00</published><updated>2011-07-13T00:00:00+00:00</updated><author><name>Calvin Cheng</name></author><id>tag:pyvideo.org,2011-07-13:europython-2011/saving-gaia-with-jquery-mobile-and-geodjango.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Calvin Cheng - 22 June 2011 in &amp;quot;Track Tagliatelle &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We had the privilege of working on a mobile web application for ETH
Zurich, funded by ETH North-South Centre, using Django/Postgis, jQuery
mobile and Openlayers technology.&lt;/p&gt;
&lt;p&gt;In this talk, I would like to share what we have learnt technically and
the experiences and fun we had with polygon creation on a map and saving
polygon vertices and related data into our spatial database via
geodjango.&lt;/p&gt;
&lt;p&gt;This mobile web app is developed based on research by Dr Koh of ETH
Zurich, specializing on Matrix-calibrated and edge-corrected
species-area models that allow users to evaluate the biodiversity
consequence and trade-offs of land- use decisions. The development and
description of these models were published in Conserv. Biol. 24, 994 and
J. Appl. Ecol. 47, 1063.&lt;/p&gt;
</summary><category term="database"></category><category term="geodjango"></category><category term="jquery"></category><category term="mobile"></category><category term="spatial"></category><category term="web"></category></entry><entry><title>Using Storm to work with SQL databases</title><link href="http://pyvideo.org/europython-2011/using-storm-to-work-with-sql-databases.html" rel="alternate"></link><published>2011-07-13T00:00:00+00:00</published><updated>2011-07-13T00:00:00+00:00</updated><author><name>Jamu Kakar</name></author><id>tag:pyvideo.org,2011-07-13:europython-2011/using-storm-to-work-with-sql-databases.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Jamu Kakar - 24 June 2011 in &amp;quot;Track Tagliatelle &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Storm is an object relational mapper for SQL databases, with builtin
support for PostgreSQL, MySQL and SQLite. It was designed and
implemented as part of the Landscape project at Canonical in mid-2006
and was open sourced in mid-2007. Since then it's been used in a variety
of projects, in production for many years, and has received numerous
enhancements and bug fixes. The features of Storm will be explained with
a series of examples and with discussion about what's happening in each
one. In addition to describing the concepts and features that a
developer needs to understand, a variety of best practices will be
shared, to help developers make the best use of Storm.&lt;/p&gt;
&lt;p&gt;The examples in this talk assume that participants have a good
understanding of SQL, transactions, relationships between tables and
other common database concepts.&lt;/p&gt;
</summary><category term="database"></category></entry><entry><title>Aspettando PostgreSQL 9.1</title><link href="http://pyvideo.org/europython-2011/aspettando-postgresql-91.html" rel="alternate"></link><published>2011-07-07T00:00:00+00:00</published><updated>2011-07-07T00:00:00+00:00</updated><author><name>Gabriele Bartolini</name></author><id>tag:pyvideo.org,2011-07-07:europython-2011/aspettando-postgresql-91.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Gabriele Bartolini - 22 June 2011 in &amp;quot;Track Italiana
Big Mac &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PostgreSQL è un sistema open-source per la gestione di database molto
avanzato ed estremamente versatile che si integra perfettamente con
Python. E' sviluppato da una comunità internazionale molto attiva ed è
distribuito secondo la licenza in stile BSD denominata &amp;quot;PostgreSQL
License&amp;quot;.&lt;/p&gt;
&lt;p&gt;Le funzionalità di classe enterprise (come la conformità con lo standard
SQL, le transazioni ACID, la disaster recovery, l'alta disponibilità o
HA, la replica, il partizionamento e in generale l'estensibilità)
rendono PostgreSQL particolarmente adatto per quegli ambienti
business-critical che intendono ridurre il costo di proprietà totale
(TCO) delle loro soluzioni di database senza alterarne i requisiti
funzionali. PostgreSQL 9.0, rilasciato nel settembre del 2010, è stata
la prima versione di PostgreSQL con Hot Standby, un meccanismo nativo
per la replica master/slave. Al consueto e collaudato meccanismo di
replica secondo la tecnica del log shipping (usata precedentemente per
scopi di HA con Warm Standby) è stata aggiunta la replica in streaming.&lt;/p&gt;
&lt;p&gt;La versione 9.1, attesa per la seconda parte del 2011, aggiungerà la
replica sincrona a PostgreSQL, rendendolo il primo DBMS in grado di
permettere a sviluppatori e utenti di controllare la strategia di
replica a livello di singola transazione. Partecipa al talk per scoprire
tutte le altre funzionalità principali che saranno incluse in PostgreSQL
9.1, fra le quali: gestione delle estensioni, writable common table
expression, ecc.&lt;/p&gt;
</summary><category term="database"></category><category term="postgresql"></category></entry><entry><title>A Python on the Couch</title><link href="http://pyvideo.org/pycon-au-2011/a-python-on-the-couch.html" rel="alternate"></link><published>2011-08-22T00:00:00+00:00</published><updated>2011-08-22T00:00:00+00:00</updated><author><name>Mark J Rees</name></author><id>tag:pyvideo.org,2011-08-22:pycon-au-2011/a-python-on-the-couch.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;CouchDB &amp;amp;nbsp_place_holder;(&lt;a class="reference external" href="http://couchdb.apache.org/"&gt;http://couchdb.apache.org/&lt;/a&gt;) is an open
source, document-oriented NoSQL Database Management Server.It supports
queries via views using MapReduce, and replication. The talk will give
an overview of CouchDB followed by how to access and manipulate using
Python. There are a number of python libraries for accessing couchdb and
these will be quickly discussed followed by &amp;amp;nbsp_place_holder;how to
use one of these libs with a Python web framework.&lt;/p&gt;
</summary><category term="couchdb"></category><category term="database"></category><category term="nosql"></category><category term="web"></category></entry><entry><title>Table Partitioning with Django</title><link href="http://pyvideo.org/pycon-de-2013/table-partitioning-with-django.html" rel="alternate"></link><published>2013-10-17T00:00:00+00:00</published><updated>2013-10-17T00:00:00+00:00</updated><author><name>Max Tepkeev</name></author><id>tag:pyvideo.org,2013-10-17:pycon-de-2013/table-partitioning-with-django.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Table partitioning can be thought of as a division of one large table
into several smaller tables which represent that original table. Table
partitioning is &amp;quot;transparent&amp;quot;, that means that in theory you don't need
to change any code to work with partitioned tables.&lt;/p&gt;
&lt;p&gt;We will talk about table partitioning theory in general and
implementations in different database servers. Why and when we need to
do table partitioning. What problems we can face and how we can solve
them.&lt;/p&gt;
&lt;p&gt;Django provides us with great database abstraction and ORM, but how can
we use it with table partitioning ? We will talk about existing
libraries for Django to work with table partitioning, their differences,
which is the best (if any) and why.&lt;/p&gt;
</summary><category term="database"></category><category term="django"></category><category term="partition"></category><category term="partitioning"></category></entry><entry><title>Relational Database Applications</title><link href="http://pyvideo.org/pycon-us-2010/pycon-2010--relational-database-applications.html" rel="alternate"></link><published>2010-02-19T00:00:00+00:00</published><updated>2010-02-19T00:00:00+00:00</updated><author><name>Chris Perkins</name></author><id>tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--relational-database-applications.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Turbogears Database Applications (Relational Database Applications)&lt;/p&gt;
&lt;p&gt;Presented by Chris Perkins&lt;/p&gt;
&lt;p&gt;TurboGears2 provides a rich toolset to provide developers with a
platform for developing web applications with existing databases. This
â€œun-tutorialâ€ has a simple goal. The participants may bring in their
own databases, and we will explore how TurboGears can use this database
to create a working web application. If the student does not want to use
her own database, one will be provided. This tutorial will focus on the
TurboGears Admin system, along with relational databases.&lt;/p&gt;
&lt;p&gt;This tutorial is intended to be an un-tutorial. The idea is simple.
Bring a public database, (or 4) and share with the class as we explore
the new admin- level RESTful features that TurboGears2 employs.&lt;/p&gt;
&lt;p&gt;At the end of the class, the goal is for everyone to have a working TG2
application, with a working admin, at least one customized form or
table, based on a database they, or another student brought to class.&lt;/p&gt;
&lt;p&gt;Requirements&lt;/p&gt;
&lt;p&gt;Laptop with Python 2.5 or 2.6 installed. Database system of your choice
(Postgres, Sqlite, MySQL) Python drivers for your desired database
system installed. (psychopg2, pg8000, pysqlite, mysql-python)&lt;/p&gt;
</summary><category term="database"></category><category term="pycon"></category><category term="pycon2010"></category><category term="turbogears"></category><category term="tutorial"></category></entry><entry><title>Scaling Python webapps from zero to 50 million users - A top-down approach. (#134)</title><link href="http://pyvideo.org/pycon-us-2010/pycon-2010--scaling-python-webapps-from-zero-to-5.html" rel="alternate"></link><published>2010-02-19T00:00:00+00:00</published><updated>2010-02-19T00:00:00+00:00</updated><author><name>Jinal Jhaveri</name></author><id>tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--scaling-python-webapps-from-zero-to-5.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Scaling Python webapps from zero to 50 million users - A top-down
approach&lt;/p&gt;
&lt;p&gt;Presented by Jinal Jhaveri&lt;/p&gt;
&lt;p&gt;LOLapps is one of the top providers of social games and user generated
applications with 50+ million monthly uniques on Facebook, MySpace and
Bebo. This session will focus on the top-down approach we took to scale
our webapps for millions of users. Here are the 6 topics we will cover:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Why is performance a big issue for Social Media&lt;/li&gt;
&lt;li&gt;How we profiled our apps and found bottlenecks using custom developed
and existing middleware&lt;/li&gt;
&lt;li&gt;The web application best practices we applied and results obtained&lt;/li&gt;
&lt;li&gt;How we traced database connection leaks&lt;/li&gt;
&lt;li&gt;Our caching strategies and the changes we made to speed up the
memcache client&lt;/li&gt;
&lt;li&gt;Results of our experiment using Paster and Tornado as our web
servers.&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="casestudy"></category><category term="database"></category><category term="memcache"></category><category term="paster"></category><category term="profiling"></category><category term="pycon"></category><category term="pycon2010"></category><category term="tornado"></category></entry><entry><title>To relate or not to relate, that is the question (#99)</title><link href="http://pyvideo.org/pycon-us-2010/pycon-2010--to-relate-or-not-to-relate--that-is-t.html" rel="alternate"></link><published>2010-02-19T00:00:00+00:00</published><updated>2010-02-19T00:00:00+00:00</updated><author><name>Mark Ramm</name></author><id>tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--to-relate-or-not-to-relate--that-is-t.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;To relate or not to relate, that is the question&lt;/p&gt;
&lt;p&gt;Presented by Mark Ramm&lt;/p&gt;
&lt;p&gt;There is a lot of buzz about Couch, Casandra, MongoDB, and other non
relational databases, and at the same time there are decades of hard
work that's gone into optimizing databases built around the relational
model. This talk will focus on comparing relational DB's to their new
friends in practice, and on providing practical tools for deciding
what's right for your project.&lt;/p&gt;
</summary><category term="database"></category><category term="nosql"></category><category term="pycon"></category><category term="pycon2010"></category></entry></feed>