<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>http://pyvideo.org/</link><description></description><lastBuildDate>Fri, 05 Aug 2016 00:00:00 +0000</lastBuildDate><item><title>Building beautiful RESTful APIs using Flask</title><link>http://pyvideo.org/europython-2016/building-beautiful-restful-apis-using-flask.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Michał Karzyński - Building beautiful RESTful APIs using Flask
[EuroPython 2016]
[22 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/building-beautiful-restful-apis-using-flask-1"&gt;https://ep2016.europython.eu//conference/talks/building-beautiful-restful-apis-using-flask-1&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;This talk demonstrates a technique for developing RESTful APIs using
Flask and Flask-Restplus. These tools automate common API tasks such
as: validating input, serializing output, routing requests to methods,
and turning Python exceptions into HTTP responses.&lt;/p&gt;
&lt;p&gt;The final API comes with a Swagger interactive UI, which documents all
endpoints and makes testing easy. The described tools tools provide
just enough syntactic sugar to make your code readable, scalable and
easy to maintain.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Modern software is powered by APIs. User facing apps may run in the
browser or on mobile platforms, but they almost universally rely on
data stored in the cloud. More often then not apps use a RESTful API
to exchange data with the server.&lt;/p&gt;
&lt;p&gt;In my talk I will demonstrate a technique for developing RESTful APIs
using the [Flask][1] micro-framework and [Flask-Restplus][2]. These
powerful tools automate most common tasks associated with API
development: validating input, serializing output, routing requests to
methods, and turning Python exceptions into machine-readable HTTP
responses.&lt;/p&gt;
&lt;p&gt;A Flask-Restplus API is fully documented by [Swagger][3] which lists
all defined endpoints, their query parameters and the format of input
and output JSON objects. Swagger generates an [interactive UI][4] for
selecting options and easily testing queries. Flask and Flask-Restplus
provide just enough syntactic sugar to make your code readable,
scalable and easy to maintain.&lt;/p&gt;
&lt;p&gt;My presentation will give an overview of the features of Flask and
Flask-Restplus; I will describe how easy it is to get started and
discuss some best practices for building complex APIs using this
approach. I will wrap up by briefly mentioning other components of the
Flask ecosystem, which give this micro-framework power to match fully-
loaded systems such as Django.&lt;/p&gt;
&lt;p&gt;[1]: &lt;a class="reference external" href="http://flask.pocoo.org/"&gt;http://flask.pocoo.org/&lt;/a&gt;
[2]: &lt;a class="reference external" href="http://flask-restplus.readthedocs.org/en/latest/"&gt;http://flask-restplus.readthedocs.org/en/latest/&lt;/a&gt;
[3]: &lt;a class="reference external" href="http://swagger.io/"&gt;http://swagger.io/&lt;/a&gt;
[4]: &lt;a class="reference external" href="http://petstore.swagger.io/#/pet"&gt;http://petstore.swagger.io/#/pet&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michał Karzyński</dc:creator><pubDate>Fri, 05 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-05:europython-2016/building-beautiful-restful-apis-using-flask.html</guid></item></channel></rss>