<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="http://pyvideo.org/" rel="alternate"></link><link href="http://pyvideo.org/feeds/speaker_carl-cerecke.atom.xml" rel="self"></link><id>http://pyvideo.org/</id><updated>2014-09-14T00:00:00+00:00</updated><entry><title>Publishing Theology with Python</title><link href="http://pyvideo.org/kiwi-pycon-2013/publishing-theology-with-python.html" rel="alternate"></link><published>2013-09-12T00:00:00+00:00</published><updated>2013-09-12T00:00:00+00:00</updated><author><name>Carl Cerecke</name></author><id>tag:pyvideo.org,2013-09-12:kiwi-pycon-2013/publishing-theology-with-python.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;How to use python tools to represent and publish a large corpus of
theological literature.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&amp;#64; Kiwi PyCon 2013 - Sunday, 08 Sep 2013 - Track 2&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Intermediate&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Python tools are used for publishing a large corpus of theological
literature. Python is used to help convert the existing literature from
its original, poorly styled, MS Word format to docutils source format.
Solutions are presented to various domain-specific problems, including
making the documents bible-version independent. The paver tool is used
to manage the conversion process from docutils to the various output
formats. Some rejected alternative publishing technologies are covered,
as well as a future road map.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Slides&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/nzpug/carl-cerecke-publishing-theology-with-python"&gt;https://speakerdeck.com/nzpug/carl-cerecke-publishing-theology-with-python&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>goto in python. Yes. Really.</title><link href="http://pyvideo.org/kiwi-pycon-2014/goto-in-python-yes-really.html" rel="alternate"></link><published>2014-09-14T00:00:00+00:00</published><updated>2014-09-14T00:00:00+00:00</updated><author><name>Carl Cerecke</name></author><id>tag:pyvideo.org,2014-09-14:kiwi-pycon-2014/goto-in-python-yes-really.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Experienced&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Unfortunately, python is missing the goto keyword. This talk rights this
historical wrong by presenting a module that allows the use of goto
within a function. An overview of the implementation is provided, along
with rationale and performance results. Knowing what a decorator is will
be helpful for understanding the technical part of this talk.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;goto in Python&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A brief history of the goto statement.&lt;/li&gt;
&lt;li&gt;Why have a goto in Python?&lt;/li&gt;
&lt;li&gt;Previous attempts at goto in Python&lt;/li&gt;
&lt;li&gt;Dynamically rewriting byte codes&lt;/li&gt;
&lt;li&gt;Problematic constructs&lt;/li&gt;
&lt;li&gt;Performance results&lt;/li&gt;
&lt;li&gt;Future work&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Slides&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/nzpug/carl-cerecke-goto-in-python-yes-really"&gt;https://speakerdeck.com/nzpug/carl-cerecke-goto-in-python-yes-really&lt;/a&gt;&lt;/p&gt;
</summary><category term="talk"></category></entry></feed>