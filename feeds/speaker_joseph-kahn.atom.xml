<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="http://pyvideo.org/" rel="alternate"></link><link href="http://pyvideo.org/feeds/speaker_joseph-kahn.atom.xml" rel="self"></link><id>http://pyvideo.org/</id><updated>2015-11-07T00:00:00+00:00</updated><entry><title>How Wave does database sharding with Django</title><link href="http://pyvideo.org/pycon-ca-2015/how-wave-does-database-sharding-with-django-joseph.html" rel="alternate"></link><published>2015-11-07T00:00:00+00:00</published><updated>2015-11-07T00:00:00+00:00</updated><author><name>Joseph Kahn</name></author><id>tag:pyvideo.org,2015-11-07:pycon-ca-2015/how-wave-does-database-sharding-with-django-joseph.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Learn how we handle a large amount of data in Django by sharding the data using a developer friendly interface. I'll be talking about what we learned from our initial implementation and sharding style as well as the details we used in implementing a newer system.&lt;/p&gt;
&lt;p&gt;First, learn about why we shard, why you probably want to shard, what we originally tried and why it didn't work.&lt;/p&gt;
&lt;p&gt;Next, learn about how we re-implemented sharding including the router, unique id generation and all the code that went into the project.&lt;/p&gt;
&lt;p&gt;Finally, I'll touch on some of the more advanced topics such as shard re-balancing and dealing with replication lag time.&lt;/p&gt;
</summary></entry></feed>