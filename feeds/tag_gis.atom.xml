<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="http://pyvideo.org/" rel="alternate"></link><link href="http://pyvideo.org/feeds/tag_gis.atom.xml" rel="self"></link><id>http://pyvideo.org/</id><updated>2016-06-24T00:00:00+00:00</updated><entry><title>Localiza, una biblioteca para la localización óptima de equipamientos sociales</title><link href="http://pyvideo.org/scipyla-2016/localiza-una-biblioteca-para-la-localizacion-optima-de-equipamientos-sociales.html" rel="alternate"></link><published>2016-06-24T00:00:00+00:00</published><updated>2016-06-24T00:00:00+00:00</updated><author><name>Francisco Palm</name></author><id>tag:pyvideo.org,2016-06-24:scipyla-2016/localiza-una-biblioteca-para-la-localizacion-optima-de-equipamientos-sociales.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Palestrante: Francisco Palm&lt;/p&gt;
&lt;p&gt;Resumo:&lt;/p&gt;
&lt;p&gt;El autor desarrolló entre los años 2000 y 2003 una extensión para Idrisi32 que permitía resolver problemas de localización óptima de instalaciones. Esta extensión, Localiza, fue utilizada en investigaciones en España y diversos países de América Latina, lo que sirvió de base para la publicación del libro &lt;a class="reference external" href="http://www.ra-ma.es/libros/SISTEMAS-DE-INFORMACION-GEOGRAFICA-Y-LOCALIZACION-OPTIMA-DE-INSTALACIONES-Y-EQUIPAMIENTOSINCLUYE-CD/127/978-84-7897-611-9"&gt;Sistemas de Información Geográfica y Localización Óptima de Instalaciones y Equipamientos&lt;/a&gt;. Con las nuevas versiones de Idrisi, Localiza quedó obsoleta.&lt;/p&gt;
&lt;p&gt;Idrisi (ahora llamado TerrSet) era un Sistema de Información Geográfica con importantes capacidades para el análisis ráster, lo que permitió la incorporación del cálculo de matrices de distancia basados en algoritmos de rutas de menor costo que permiten un análisis mucho mas flexible y rico que el análisis de distancias exclusivamente vectorial. Por otra parte, la ubicación de la oferta y la demanda se representa de una forma mucho mas conveniente mediante imágenes vectoriales. Por esta razón, en la implantación de la nueva versión de Localiza es fundamental contar con herramientas que permitan aplicar según sea necesario, capacidades de manipulación tanto ráster como vectorial.&lt;/p&gt;
&lt;p&gt;En la actualidad, las capacidades para la resolución de problemas de localización-asignación siguen siendo muy limitadas para los software SIG (libres y no libres) mas difundidos, por lo cual resulta necesario contar con una herramienta que atienda estos requerimientos. Afortunadamente, se dispone para Python bibliotecas como &lt;a class="reference external" href="https://github.com/mapbox/rasterio"&gt;rasterio&lt;/a&gt; para el análisis datos ráster y &lt;a class="reference external" href="http://toblerity.github.com/fiona/"&gt;fiona&lt;/a&gt; para el análisis vectorial, los cuáles son a su vez envoltorios &lt;em&gt;pitónicos&lt;/em&gt; de la biblioteca universal para manejo de información geográfica GDAL/OGR que permiten la manipulación de varias decenas de distintos formatos de datos geográficos. Localiza intenta seguir los estándares de diseño, organización y codificación de otras bibliotecas de Python para el análisis de datos tales como &lt;a class="reference external" href="http://pysal.org/"&gt;PySAL&lt;/a&gt; y &lt;a class="reference external" href="http://quant-econ.net/py/"&gt;QuantEcon&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Las principales ventajas de Localiza son fundamentalmente dos:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Es un conjunto de utilidades que carecen por completo de dependencias de software privativo, y&lt;/li&gt;
&lt;li&gt;Su desarrollo como biblioteca permite el uso de las capacidades desde la línea de comandos, y para el desarrollo de aplicaciones web o de escritorio, o incluso en forma de un complemento de QGIS o similar.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Localiza se encuentra en sus primeras etapas de desarrollo por lo que se espera presentar algunos resultados preliminares.&lt;/p&gt;
</summary><category term="gis"></category><category term="rasterio"></category><category term="fiona"></category><category term="pysal"></category><category term="quantecon"></category></entry><entry><title>Torque: Python y analisis de datos</title><link href="http://pyvideo.org/pycon-es-2014/torque-python-y-analisis-de-datos.html" rel="alternate"></link><published>2015-04-06T00:00:00+00:00</published><updated>2015-04-06T00:00:00+00:00</updated><author><name>Javier Santana</name></author><id>tag:pyvideo.org,2015-04-06:pycon-es-2014/torque-python-y-analisis-de-datos.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;En CartoDB usamos torque (&lt;a class="reference external" href="https://github.com/cartodb/torque"&gt;https://github.com/cartodb/torque&lt;/a&gt;) para la generación de visualizaciones en el navegador de millones de puntos. Para que sea posible es necesario hacer un procesado de los datos en el servidor. En esta charla se tratará como usamos python para:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Hacer análisis estadístico de los datos para buscar la mejor forma de codificar los datos&lt;/li&gt;
&lt;li&gt;La generación de los tiles desde los datos en crudo con millones de datos&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Del toolset de python usamos tornado para servidor datos de torque en tiempo real y numpy + pyplot para el análisis de datos.&lt;/p&gt;
</summary><category term="cartodb"></category><category term="torque"></category><category term="gis"></category></entry><entry><title>Fiona y Shapely, la punta del iceberg del análisis de datos geográficos con Python</title><link href="http://pyvideo.org/pycon-es-2015/fiona-y-shapely-la-punta-del-iceberg-del-analisis-de-datos-geograficos-con-python.html" rel="alternate"></link><published>2016-02-02T00:00:00+00:00</published><updated>2016-02-02T00:00:00+00:00</updated><author><name>Geoinquietos Vlc</name></author><id>tag:pyvideo.org,2016-02-02:pycon-es-2015/fiona-y-shapely-la-punta-del-iceberg-del-analisis-de-datos-geograficos-con-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Fiona y Shapely, la punta del iceberg del análisis de datos geográficos con Python&lt;/p&gt;
&lt;p&gt;Geoinquietos Valencia&lt;/p&gt;
&lt;p&gt;Fiona y Shapely son la puerta de entrada al análisis de datos geográficos con Python. En la charla haremos una introducción básica a su uso y realizaremos un pequeño mapa de demostración.&lt;/p&gt;
</summary><category term="T. Científico"></category><category term="Fiona"></category><category term="Shapely"></category><category term="gis"></category></entry><entry><title>Python en gvSIG, el Sistema de Información Geográfica Libre</title><link href="http://pyvideo.org/pycon-es-2015/python-en-gvsig-el-sistema-de-informacion-geografica-libre.html" rel="alternate"></link><published>2016-02-02T00:00:00+00:00</published><updated>2016-02-02T00:00:00+00:00</updated><author><name>Joaquín del Cerro</name></author><id>tag:pyvideo.org,2016-02-02:pycon-es-2015/python-en-gvsig-el-sistema-de-informacion-geografica-libre.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Taller orientado a los que quieran iniciarse en el uso de python para desarrollar funcionalidades en gvSIG, un Sistema de Información Geográfica libre.&lt;/p&gt;
&lt;p&gt;La idea seria dividir el taller en tres bloques:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Una introducción, de nivel básico. Veremos como manipular datos espaciales y generar nuevas capas a partir de algunas ya existentes.&lt;/li&gt;
&lt;li&gt;Un ejemplo de manipulación de mapas, de nivel intermedio.&lt;/li&gt;
&lt;li&gt;Un ejemplo de creación de interfaces de usuario desde scripting, de un nivel avanzado.&lt;/li&gt;
&lt;/ol&gt;
</summary><category term="workshop"></category><category term="gis"></category><category term="gvsig"></category></entry><entry><title>GIS Panel Discussion</title><link href="http://pyvideo.org/scipy-2013/gis-panel-discussion-0.html" rel="alternate"></link><published>2013-07-01T00:00:00+00:00</published><updated>2013-07-01T00:00:00+00:00</updated><author><name>Andrew Wilson</name></author><id>tag:pyvideo.org,2013-07-01:scipy-2013/gis-panel-discussion-0.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Authors: Panel participants: Sergio Ray (Arizona State U), Shaun
Walbridge (ESRI), Andrew Wilson (TWDB)&lt;/p&gt;
&lt;p&gt;Track: GIS - Geospatial Data Analysis&lt;/p&gt;
</summary><category term="geospatial data analysis"></category><category term="gis"></category></entry><entry><title>Deploying Python Tools to GIS Users</title><link href="http://pyvideo.org/scipy-2014/deploying-python-tools-to-gis-users.html" rel="alternate"></link><published>2014-07-14T00:00:00+00:00</published><updated>2014-07-14T00:00:00+00:00</updated><author><name>Shaun Walbridge</name></author><id>tag:pyvideo.org,2014-07-14:scipy-2014/deploying-python-tools-to-gis-users.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;The geospatial community has coalesced around Python, both in the
commercial and open source spaces. In this talk, I'll show how Python
tools can be shared with users of ArcGIS, a commercial GIS system which
uses Python as its primary development environment. By constructing
small Python wrappers, code can be shared in graphical tools which
enable non-programmers to use what you've built.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Geospatial data is frequently manipulated directly using Python tools,
commonly built on top of powerful libraries such as GDAL, GEOS and
NetCDF. Delivering model results to end users in many instances requires
providing tools in familiar graphical environments, such as desktop GIS
systems, which can permit users without programming knowledge to
integrate models and results into their existing scientific workflows.
This talk discusses how to construct simple wrappers around existing
Python programs to enable their use by ArcGIS, a commonly used
commercial GIS.&lt;/p&gt;
&lt;p&gt;Two separate approaches will be illustrated: creating Python toolboxes,
or collections of tools embeddable in workflows, and creating customized
Python graphical add-ins, which can control the graphical environment
provided within ArcGIS. Building contextual help, interactive widgets,
and leveraging &lt;tt class="docutils literal"&gt;numpy&lt;/tt&gt; for direct data integration will be discussed.
While ArcGIS exposes much of its functionality via the &lt;tt class="docutils literal"&gt;ArcPy&lt;/tt&gt;
package, this talk instead focuses on integrating code from other
environments, and doesn't presume existing ArcGIS expertise.&lt;/p&gt;
</summary><category term="gis"></category></entry><entry><title>Rasterio: Geospatial Raster Data Access for Programmers and Future Programmers</title><link href="http://pyvideo.org/scipy-2014/rasterio-geospatial-raster-data-access-for-progr.html" rel="alternate"></link><published>2014-07-14T00:00:00+00:00</published><updated>2014-07-14T00:00:00+00:00</updated><author><name>Sean Gillies</name></author><id>tag:pyvideo.org,2014-07-14:scipy-2014/rasterio-geospatial-raster-data-access-for-progr.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Learn to read, manipulate, and write georeferenced imagery and other
kinds of geospatial raster data using a productive and fun GDAL and
Numpy-based library named Rasterio. It's a new open source project from
the satellite team at Mapbox and is informed by a decade of experience
using Python and GDAL.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Rasterio is a GDAL and Numpy-based Python library guided by lessons
learned over a decade of using GDAL and Python to solve geospatial
problems. Among these lessons: the importance of productivity,
enjoyability, and serendipity.&lt;/p&gt;
&lt;p&gt;I will discuss the motivation for writing Rasterio and explain how and
why it diverges from other GIS software and embraces Python types,
protocols, and idioms. I will also explain why Rasterio adheres to some
GIS paradigms and bends or breaks others.&lt;/p&gt;
&lt;p&gt;Finally, I will show examples of using Rasterio to read, manipulate, and
write georeferenced raster data. Some examples will be familiar to users
of older Python GIS software and will illustrate how Rasterio lets you
get more done with less code and fewer bugs. I will also demonstrate fun
and useful features of Rasterio not found in other geospatial libraries.&lt;/p&gt;
</summary><category term="gis"></category></entry><entry><title>GeoPandas: Geospatial Data + Pandas</title><link href="http://pyvideo.org/scipy-2014/geopandas-geospatial-data-pandas.html" rel="alternate"></link><published>2014-07-13T00:00:00+00:00</published><updated>2014-07-13T00:00:00+00:00</updated><author><name>Kelsey Jordahl</name></author><id>tag:pyvideo.org,2014-07-13:scipy-2014/geopandas-geospatial-data-pandas.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;GeoPandas extends the pandas data analysis library to work with
geographic objects.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/kjordahl/geopandas"&gt;GeoPandas&lt;/a&gt; is a library built
on top of pandas to extend its capabilities to allow spatial
calculations. The two main datatypes are &lt;tt class="docutils literal"&gt;GeoSeries&lt;/tt&gt; and
&lt;tt class="docutils literal"&gt;GeoDataFrame&lt;/tt&gt;, extending pandas &lt;tt class="docutils literal"&gt;Series&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;DataFrame&lt;/tt&gt;,
respectively. A &lt;tt class="docutils literal"&gt;GeoSeries&lt;/tt&gt; contains a collection of geometric objects
(such as &lt;tt class="docutils literal"&gt;Point&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;LineString&lt;/tt&gt;, or &lt;tt class="docutils literal"&gt;Polygon&lt;/tt&gt;) and implements
nearly all &lt;tt class="docutils literal"&gt;Shapely&lt;/tt&gt; operations. These include unary operations (e.g.
&lt;tt class="docutils literal"&gt;centroid&lt;/tt&gt;), binary operations (e.g. &lt;tt class="docutils literal"&gt;distance&lt;/tt&gt;, either elementwise
to another &lt;tt class="docutils literal"&gt;GeoSeries&lt;/tt&gt; or to a single geometry), and cumulative
operations (e.g. &lt;tt class="docutils literal"&gt;unary_union&lt;/tt&gt; to combine all items to a single
geometry).&lt;/p&gt;
&lt;p&gt;A &lt;tt class="docutils literal"&gt;GeoDataFrame&lt;/tt&gt; object contains a column of geometries (itself a
&lt;tt class="docutils literal"&gt;GeoSeries&lt;/tt&gt;) that has special meaning. GeoDataFrames can be easily
created from spatial data in other formats, such as shapefiles. Rows in
the &lt;tt class="docutils literal"&gt;GeoDataFrame&lt;/tt&gt; represent features, and columns represent
attributes. Pandas' grouping and aggregation methods are also supported.&lt;/p&gt;
&lt;p&gt;GeoPandas objects can optionally be aware of coordinate reference
systems (by adding a &lt;tt class="docutils literal"&gt;crs&lt;/tt&gt; attribute) and transformed between map
projections. Basic support for plotting is included with GeoPandas.
Other features include geocoding, export to GeoJSON, and retrieving data
from a PostGIS spatial database.&lt;/p&gt;
&lt;p&gt;This talk will describe the main features of GeoPandas and show examples
of its use.&lt;/p&gt;
</summary><category term="gis"></category></entry><entry><title>Geospatial data in Python: Database, Desktop, and the Web part 1</title><link href="http://pyvideo.org/scipy-2014/geospatial-data-in-python-database-desktop-and.html" rel="alternate"></link><published>2014-07-09T00:00:00+00:00</published><updated>2014-07-09T00:00:00+00:00</updated><author><name>Carson Farmer</name></author><id>tag:pyvideo.org,2014-07-09:scipy-2014/geospatial-data-in-python-database-desktop-and.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Using the wide range of tools and libraries available for working with
geospatial data, it is now possible to transport geospatial data from a
database to a web-interface in only a few lines of code. In this
tutorial, we explore some of these libraries and work through examples
which showcase the power of Python for geospatial data.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Tools and libraries for working with geospatial data in Python are
currently undergoing rapid development and expansion. Libraries such as
shapely, fiona, rasterio, geopandas, and others now provide Pythonic
ways of reading, writing, editing, and manipulating geographic data. In
this tutorial, participants will be exposed to a number of new and
legacy geospatial libraries in Python, with a focus on simple and rapid
interaction with geospatial data.&lt;/p&gt;
&lt;p&gt;We will utilize Python to interact with geographic data from a database
to a web interface, all the while showcasing how Python can be used to
access data from online resources, query spatially enabled databases,
perform coordinate transformations and geoprocessing functions, and
export geospatial data to web-enabled formats for visualizing and
sharing with others. Time permitting, we will also briefly explore
Python plugin development for the QGIS Desktop GIS environment.&lt;/p&gt;
&lt;p&gt;This tutorial should be accessible to anyone who has basic Python
knowledge (though familiarity with Pandas, NumPy, matplotlib, etc. will
be helpful) as well as familiarity with IPython Notebook. We will take
some time at the start of the tutorial to go over installation
strategies for geospatial libraries (GDAL/OGR, Proj.4, GEOS) and their
Python bindings (Shapely, Fiona, GeoPandas) on Windows, Mac, and Linux.
Some knowledge of geospatial concepts such as map projections and GIS
data formats will also be helpful.&lt;/p&gt;
&lt;div class="section" id="outline"&gt;
&lt;h4&gt;Outline&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Introduction to geospatial data&lt;ul&gt;
&lt;li&gt;Map projections, data formats, and looking at maps&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Introduction to geospatial libraries&lt;ul&gt;
&lt;li&gt;GDAL/OGR (Fiona); Shapely (GEOS); PostGIS; GeoPandas; and more&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GeoPandas&lt;ul&gt;
&lt;li&gt;Reading data from various sources&lt;/li&gt;
&lt;li&gt;Data manipulation and plotting&lt;/li&gt;
&lt;li&gt;Writing data to various sources&lt;/li&gt;
&lt;li&gt;Getting data from the web&lt;/li&gt;
&lt;li&gt;Pushing data to the web (for maps)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Putting it all together&lt;ul&gt;
&lt;li&gt;Quick example: From database to web&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Introduction to QGIS Desktop GIS (time permitting)&lt;ul&gt;
&lt;li&gt;Python interface (PyQGIS)&lt;/li&gt;
&lt;li&gt;Building a simple plugin&lt;/li&gt;
&lt;li&gt;Plugin deployment&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="geospatial"></category><category term="gis"></category><category term="tutorial"></category></entry><entry><title>Geospatial data in Python: Database, Desktop, and the Web part 2</title><link href="http://pyvideo.org/scipy-2014/geospatial-data-in-python-database-desktop-and-0.html" rel="alternate"></link><published>2014-07-09T00:00:00+00:00</published><updated>2014-07-09T00:00:00+00:00</updated><author><name>Carson Farmer</name></author><id>tag:pyvideo.org,2014-07-09:scipy-2014/geospatial-data-in-python-database-desktop-and-0.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Using the wide range of tools and libraries available for working with
geospatial data, it is now possible to transport geospatial data from a
database to a web-interface in only a few lines of code. In this
tutorial, we explore some of these libraries and work through examples
which showcase the power of Python for geospatial data.&lt;/p&gt;
</summary><category term="geospatial"></category><category term="gis"></category><category term="tutorial"></category></entry><entry><title>Geospatial data in Python: Database, Desktop and the Web - Part 3</title><link href="http://pyvideo.org/scipy-2014/geospatial-data-in-python-database-desktop-and-1.html" rel="alternate"></link><published>2014-07-09T00:00:00+00:00</published><updated>2014-07-09T00:00:00+00:00</updated><author><name>Carson Farmer</name></author><id>tag:pyvideo.org,2014-07-09:scipy-2014/geospatial-data-in-python-database-desktop-and-1.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Using the wide range of tools and libraries available for working with
geospatial data, it is now possible to transport geospatial data from a
database to a web-interface in only a few lines of code. In this
tutorial, we explore some of these libraries and work through examples
which showcase the power of Python for geospatial data.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Tools and libraries for working with geospatial data in Python are
currently undergoing rapid development and expansion. Libraries such as
shapely, fiona, rasterio, geopandas, and others now provide Pythonic
ways of reading, writing, editing, and manipulating geographic data. In
this tutorial, participants will be exposed to a number of new and
legacy geospatial libraries in Python, with a focus on simple and rapid
interaction with geospatial data.&lt;/p&gt;
&lt;p&gt;We will utilize Python to interact with geographic data from a database
to a web interface, all the while showcasing how Python can be used to
access data from online resources, query spatially enabled databases,
perform coordinate transformations and geoprocessing functions, and
export geospatial data to web-enabled formats for visualizing and
sharing with others. Time permitting, we will also briefly explore
Python plugin development for the QGIS Desktop GIS environment.&lt;/p&gt;
&lt;p&gt;This tutorial should be accessible to anyone who has basic Python
knowledge (though familiarity with Pandas, NumPy, matplotlib, etc. will
be helpful) as well as familiarity with IPython Notebook. We will take
some time at the start of the tutorial to go over installation
strategies for geospatial libraries (GDAL/OGR, Proj.4, GEOS) and their
Python bindings (Shapely, Fiona, GeoPandas) on Windows, Mac, and Linux.
Some knowledge of geospatial concepts such as map projections and GIS
data formats will also be helpful.&lt;/p&gt;
&lt;div class="section" id="outline"&gt;
&lt;h4&gt;Outline&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Introduction to geospatial data&lt;ul&gt;
&lt;li&gt;Map projections, data formats, and looking at maps&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Introduction to geospatial libraries&lt;ul&gt;
&lt;li&gt;GDAL/OGR (Fiona); Shapely (GEOS); PostGIS; GeoPandas; and more&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GeoPandas&lt;ul&gt;
&lt;li&gt;Reading data from various sources&lt;/li&gt;
&lt;li&gt;Data manipulation and plotting&lt;/li&gt;
&lt;li&gt;Writing data to various sources&lt;/li&gt;
&lt;li&gt;Getting data from the web&lt;/li&gt;
&lt;li&gt;Pushing data to the web (for maps)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Putting it all together&lt;ul&gt;
&lt;li&gt;Quick example: From database to web&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Introduction to QGIS Desktop GIS (time permitting)&lt;ul&gt;
&lt;li&gt;Python interface (PyQGIS)&lt;/li&gt;
&lt;li&gt;Building a simple plugin&lt;/li&gt;
&lt;li&gt;Plugin deployment&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="geospatial"></category><category term="gis"></category><category term="tutorial"></category></entry><entry><title>WCSAxes: A Framework for Plotting Astronomical and Geospatial Data</title><link href="http://pyvideo.org/scipy-2014/wcsaxes-a-framework-for-plotting-astronomical-an.html" rel="alternate"></link><published>2014-07-09T00:00:00+00:00</published><updated>2014-07-09T00:00:00+00:00</updated><author><name>Thomas Robitaille</name></author><id>tag:pyvideo.org,2014-07-09:scipy-2014/wcsaxes-a-framework-for-plotting-astronomical-an.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;I will present WCSAxes, a new framework for plotting astronomical data
that seamlessly handles the plotting of ticks, tick labels, and grid
lines for arbitrary coordinate systems and projections. While originally
written for with astronomical data, it can be used for any kind of map
provided that the projection and coordinate system can be represented by
a pixel-to-world transformation.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Astronomical data (whether images on the sky, or other data) are
typically stored with information about their corresponding projection
(Gnomonic, Mercator, Conical, Aitoff, and &lt;em&gt;many&lt;/em&gt; more) and coordinate
system (Equatorial, Galactic, Ecliptic, and so on).&lt;/p&gt;
&lt;p&gt;I will present &lt;a class="reference external" href="https://github.com/astrofrog/wcsaxes"&gt;WCSAxes&lt;/a&gt;, a new
framework for plotting such astronomical data, developed as part of the
&lt;a class="reference external" href="http://www.astropy.org"&gt;Astropy&lt;/a&gt; project. WCSAxes consists primarily
of a &lt;a class="reference external" href="http://www.matplotlib.org"&gt;Matplotlib&lt;/a&gt; Axes sub-class that
seamlessly handles the plotting of ticks, tick labels, and grid lines
for arbitrary coordinate systems and projections.&lt;/p&gt;
&lt;p&gt;As an example, the following plot was produced with WCSAxes:&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="The Galactic center as seen by the Chandra X-ray observatory" src="http://www.mpia.de/~robitaille/chandra_avm_small.png" /&gt;
&lt;p class="caption"&gt;The Galactic Center as seen by Chandra&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;(Image Credit: NASA/CXC/UMass/D. Wang et al. -
&lt;a class="reference external" href="http://chandra.harvard.edu/photo/2009/gcenter/"&gt;http://chandra.harvard.edu/photo/2009/gcenter/&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Since it is a sub-class of the Matplotlib Axes class, all the default
Matplotlib methods such as plot, scatter, imshow, contour, as well as
patches, lines, collections, and so on are supported, and WCSAxes - in
combination with Matplotlib's ability to accept arbitrary
transformations - makes it very easy to define whether the plotting
should apply to pixel coordinates, or a world coordinate system related
to the data.&lt;/p&gt;
&lt;p&gt;WCSAxes has been designed as a framework that can be easily used in
other Python tools, and it is planned for inclusion in
&lt;a class="reference external" href="http://www.glueviz.org"&gt;Glue&lt;/a&gt;, &lt;a class="reference external" href="http://aplpy.github.io"&gt;APLpy&lt;/a&gt;,
and other astronomical tools. While originally written for Astronomical
images, it should be easily extendable to any kind of map (such as
Earth-based geospatial data) provided that the projection and coordinate
system can be represented by a pixel-to-world transformation.&lt;/p&gt;
</summary><category term="astronomy"></category><category term="gis"></category></entry><entry><title>Maps of Imaginary Lands</title><link href="http://pyvideo.org/djangocon-2010/djangocon-2010--maps-of-imaginary-lands.html" rel="alternate"></link><published>2010-09-07T00:00:00+00:00</published><updated>2010-09-07T00:00:00+00:00</updated><author><name>Malcolm Tredinnick</name></author><id>tag:pyvideo.org,2010-09-07:djangocon-2010/djangocon-2010--maps-of-imaginary-lands.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The GIS features of Django aren't restricted to being applied to real
world maps and planets. This talk will show how to display and interact
with maps of imaginary lands, such as game maps or lands in science
fiction novels. We'll uncover a bit of how Django GIS works in the
process, separating the map display from the modeling.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Whilst django.contrib.gis isn't particularly difficult to get started
with, particularly if you follow the tutorials, it can sometimes seem a
bit overwhelming in the way it goes from zero to fancy maps in only a
couple of steps. I'd like to demystify some of the pieces of the stack,
pulling apart the modeling support — specifying the data are we trying
to work with — from the display and client-side portion.&lt;/p&gt;
&lt;p&gt;To make this more than a dry technical dive, I'll show how to add extras
to an imaginary map, rather than something pulled from Google Maps or
Open Street Map. We'll take on the task of plotting features on a
landscape from a potential role-playing game and show how the GIS data
manipulation features, such as calculating region intersections, nearby
points, and javascript client-side display work the in a familiar way
against this slightly unusual background.&lt;/p&gt;
&lt;p&gt;Some basic familiarity with Django's GIS features would be useful for
this talk, although it might also serve as a motivating introduction to
trying things out. The code shown will be available for download after
the talk.&lt;/p&gt;
</summary><category term="djangocon"></category><category term="djangocon2010"></category><category term="geodjango"></category><category term="gis"></category></entry><entry><title>Making interactive maps for the web</title><link href="http://pyvideo.org/djangocon-2011/djangocon-2011--making-interactive-maps-for-the-w.html" rel="alternate"></link><published>1990-01-01T00:00:00+00:00</published><updated>1990-01-01T00:00:00+00:00</updated><author><name>Zain Memon</name></author><id>tag:pyvideo.org,1990-01-01:djangocon-2011/djangocon-2011--making-interactive-maps-for-the-w.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Making Interactive Maps for the Web&lt;/p&gt;
&lt;p&gt;Presented by Zain Memon&lt;/p&gt;
&lt;p&gt;When tasked with displaying geo-data, most developers decide to put some
big red markers on an embeddable Google Map and call it a day. If you're
interested in creating maps that are more beautiful, more interactive,
and more usable, this talk is for you.&lt;/p&gt;
</summary><category term="djangocon"></category><category term="djangocon2011"></category><category term="geodjango"></category><category term="gis"></category><category term="maps"></category><category term="polymaps"></category><category term="tilestash"></category></entry><entry><title>Making use of OpenStreetMap data with Python</title><link href="http://pyvideo.org/europython-2011/making-use-of-openstreetmap-data-with-python.html" rel="alternate"></link><published>2011-07-13T00:00:00+00:00</published><updated>2011-07-13T00:00:00+00:00</updated><author><name>Andrii Mishkovskyi</name></author><id>tag:pyvideo.org,2011-07-13:europython-2011/making-use-of-openstreetmap-data-with-python.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Andrii Mishkovskyi - 22 June 2011 in &amp;quot;Track Lasagne&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Ever wondered how web maps are created? Ever wondered if you could build
something like Google Maps over a weekend? You probably can't, but this
talk will show you the basics of what you need to know, such as
importing data, rendering maps and even building simple routes. And all
of this in Python!&lt;/p&gt;
&lt;p&gt;Abstract: * Learning how OSM data looks * Parsing and importing the
data * Rendering maps with Mapnik * Bits of code required to build
geocoder * Building simple router with Python and PostGIS * And anything
else I forgot to mention in this abstract but will talk about&lt;/p&gt;
&lt;p&gt;Definitions: OpenStreetMap - the so-called &amp;quot;Wikipedia of maps&amp;quot; project,
with thousands of contributors who edit the map data of the whole world.
Unlike similar projects, the map data is completely free (both as in
beer and as in speech) and thus anyone can make use of it. Mapnik -
rendering framework, created specifically for OpenStreetMap, written in
C++ and Python. PostGIS - an extension of PostgreSQL database, with
support for many useful GIS features.&lt;/p&gt;
</summary><category term="gis"></category><category term="google"></category><category term="importing"></category><category term="learning"></category><category term="maps"></category><category term="parsing"></category><category term="postgresql"></category><category term="web"></category></entry><entry><title>PyConAU 2010: Displaying Australian datasets with Django</title><link href="http://pyvideo.org/pycon-au-2010/pyconau-2010--displaying-australian-datasets-with.html" rel="alternate"></link><published>1990-01-01T00:00:00+00:00</published><updated>1990-01-01T00:00:00+00:00</updated><author><name>Malcolm Tredinnick</name></author><id>tag:pyvideo.org,1990-01-01:pycon-au-2010/pyconau-2010--displaying-australian-datasets-with.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Displaying Australian datasets with Django&lt;/p&gt;
&lt;p&gt;Presented by Malcolm Tredinnick&lt;/p&gt;
&lt;p&gt;The last 18 months or so in Australia have seen an increased number of
government and public sector organisations releasing datasets to the
public under reasonable reuse terms (often Creative Commons license).
This talk will take a couple of those local real-world datasets and
create a minimal website for remixing them, using Django as the
underlying framework. The goals are to provide a short walk through the
process of importing and extracting such data in practice, show how to
incorporate Django's GIS features into an application, as well as
highlighting that real world is messy and so is the data it produces.
Working with datasets for journalism or research purposes, or simply
fun, requires a certain attention to detail.&lt;/p&gt;
&lt;p&gt;Basic knowledge of Django is assumed, although the GIS components will
be introduced carefully as they are less familiar to many developers.&lt;/p&gt;
</summary><category term="datasets"></category><category term="gis"></category><category term="pyconau"></category><category term="pyconau2010"></category></entry><entry><title>TurboGears Geospatial Framework (#19)</title><link href="http://pyvideo.org/pycon-us-2010/pycon-2010--turbogears-geospatial-framework---19.html" rel="alternate"></link><published>2010-02-19T00:00:00+00:00</published><updated>2010-02-19T00:00:00+00:00</updated><author><name>Sanjiv Singh</name></author><id>tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--turbogears-geospatial-framework---19.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;TurboGears Geospatial Framework&lt;/p&gt;
&lt;p&gt;Presented by Sanjiv Singh&lt;/p&gt;
&lt;p&gt;It is now possible to develop feature rich GIS web applications using
TurboGears by harnessing the power of spatial databases using GeoAlchemy
and integrating python GIS frameworks &amp;amp; utilities with TurboGears using
tgext.geo&lt;/p&gt;
</summary><category term="geoalchemy"></category><category term="gis"></category><category term="pycon"></category><category term="pycon2010"></category><category term="turbogears"></category></entry><entry><title>27. Reading and writing spatial data for the non-spatial programmer</title><link href="http://pyvideo.org/pycon-us-2012/27-reading-and-writing-spatial-data-for-the-non-.html" rel="alternate"></link><published>2012-03-11T00:00:00+00:00</published><updated>2012-03-11T00:00:00+00:00</updated><author><name>Chad Cooper</name></author><id>tag:pyvideo.org,2012-03-11:pycon-us-2012/27-reading-and-writing-spatial-data-for-the-non-.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Location has become mainstream in society and computing. Developers are
being tasked with working with spatial data of varying formats. Lucky
for Python developers, there are many packages and libraries that can
help us make sense of and utilize spatial data, and this poster will
explain some of those options.&lt;/p&gt;
</summary><category term="geographic information systems"></category><category term="gis"></category><category term="mapping"></category><category term="spatial"></category></entry></feed>