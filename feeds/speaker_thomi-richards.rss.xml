<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>http://pyvideo.org/</link><description></description><lastBuildDate>Sat, 05 Sep 2015 00:00:00 +0000</lastBuildDate><item><title>Using Autopilot for Functional UI Testing</title><link>http://pyvideo.org/kiwi-pycon-2013/using-autopilot-for-functional-ui-testing.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Autopilot is a tool designed for writing high-level functional tests for
GUI applications. It is written by a team of engineers at Canonical, and
is being used to test everything from the Unity desktop shell to desktop
applications, to core phone applications for the Ubuntu Touch project.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&amp;#64; Kiwi PyCon 2013 - Saturday, 07 Sep 2013 - Track 1&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Novice&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This talk will cover:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;What autopilot is, how it's made, and how it works.&lt;/li&gt;
&lt;li&gt;How we use it at Canonical, and what benefits we've seen from using
it.&lt;/li&gt;
&lt;li&gt;How you can use it to test your own applications.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Slides&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/nzpug/thomi-richards-using-autopilot-for-functional-ui-testing"&gt;https://speakerdeck.com/nzpug/thomi-richards-using-autopilot-for-functional-ui-testing&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Thomi Richards</dc:creator><pubDate>Thu, 12 Sep 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-09-12:kiwi-pycon-2013/using-autopilot-for-functional-ui-testing.html</guid></item><item><title>A Testing Talk</title><link>http://pyvideo.org/kiwi-pycon-2014/a-testing-talk.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Intermediate&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This talk will contain my opinionated views on several topics,
including, but not limited to:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Which areas of testing are well catered for, and which are not?&lt;/li&gt;
&lt;li&gt;What sources of bugs are frequent, and very hard to test?&lt;/li&gt;
&lt;li&gt;Should we perhaps start talking about unit tests less, and start
talking about other forms of testing more?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In my day job I spend a lot of time looking at projects that are part of
Ubuntu, and trying to find out why theyâ€™re being released with bugs.
This in turn leads to a lot of dissection of test suites, and a lot of
discussion with my colleagues around tests, names of tests, why some
tests are better than others, where the common gaps in test coverage
are, how applications should be tested, where, when, and why certain
test suites should be run, and other subjects too boring to mention.&lt;/p&gt;
&lt;p&gt;Having done this for several years, I've started to form a few troubling
thoughts about the state of automated testing in software development,
and in python specifically. When taken together, these can start to form
a rough and ready 'testing philosophy' - a way of looking at code and,
by analysing it's structure and visibility, start to find gaps in it's
test coverage.&lt;/p&gt;
&lt;p&gt;This talk contains no silver bullets - no magical solutions, but does
(hopefully) contain some interesting questions.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Slides&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/nzpug/thomi-richards-a-testing-talk"&gt;https://speakerdeck.com/nzpug/thomi-richards-a-testing-talk&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Thomi Richards</dc:creator><pubDate>Sat, 13 Sep 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-09-13:kiwi-pycon-2014/a-testing-talk.html</guid><category>talk</category></item><item><title>Connascence in Python</title><link>http://pyvideo.org/kiwi-pycon-2015/connascence-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Connascence is the taxonomy of coupling: it allows us to specify how two
or more pieces of code are connected, and suggests ways of minimising
the impact of that coupling. Ultimately this allows developers to write
software that is more flexible to change.&lt;/p&gt;
&lt;p&gt;At the end of the talk the audience will have learned some of the forms
of connascence with real python code examples, and will understand how
to apply those principles to their own code.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Thomi Richards</dc:creator><pubDate>Sat, 05 Sep 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-09-05:kiwi-pycon-2015/connascence-in-python.html</guid></item></channel></rss>