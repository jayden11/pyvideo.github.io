<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="http://pyvideo.org/" rel="alternate"></link><link href="http://pyvideo.org/feeds/speaker_stephane-wirtel.atom.xml" rel="self"></link><id>http://pyvideo.org/</id><updated>2016-11-13T00:00:00+00:00</updated><entry><title>Python &amp; PostgreSQL, a Wonderful Wedding</title><link href="http://pyvideo.org/pycon-ireland-2015/python-postgresql-a-wonderful-wedding.html" rel="alternate"></link><published>2015-10-25T00:00:00+00:00</published><updated>2015-10-25T00:00:00+00:00</updated><author><name>Stéphane Wirtel</name></author><id>tag:pyvideo.org,2015-10-25:pycon-ireland-2015/python-postgresql-a-wonderful-wedding.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python and PostgreSQL, two tools we like to use for our projects but do you know everything about them?&lt;/p&gt;
&lt;p&gt;The talk will give an overview of psycopg2, Peewee, SQLAlchemy, Alembic and multicorn, PL/Python, these libraries can be used with PostgreSQL.&lt;/p&gt;
&lt;p&gt;psycopg2, the well known connector, this basic component is really useful, well documented and battle-tested and used by the most famous toolkits of the Python ecosystem.
Peewee, a minimalist ORM for Python, clear and brief, this ORM can be used if you want create a software with a minimalist ORM.
SQLAlchemy, a Python SQL toolkit and Object Relational Mapper, you can use this library to create your models and interact with them.
Alembic, a lightweight database migration tool for usage with SQLAlchemy, allows to create some migration scripts for your project.
multicorn is a Python wrapper over the Foreign Data Wrapper of PostgreSQL
PL/Python, a procedural language for PostgreSQL, allows to write functions in the Python language.&lt;/p&gt;
</summary></entry><entry><title>Exploring our Python Interpreter</title><link href="http://pyvideo.org/pycon-ireland-2015/exploring-our-python-interpreter.html" rel="alternate"></link><published>2015-10-24T00:00:00+00:00</published><updated>2015-10-24T00:00:00+00:00</updated><author><name>Stéphane Wirtel</name></author><id>tag:pyvideo.org,2015-10-24:pycon-ireland-2015/exploring-our-python-interpreter.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;During my last CPython sprint, I started to contribute to the CPython code, and I wanted to understand the beast.&lt;/p&gt;
&lt;p&gt;In this case, there is only one solution, trace the code from the beginning. From the command line to the interpreter, we will take part to an adventure.&lt;/p&gt;
&lt;p&gt;Overview of the structure of the Project and the directories.
From the Py_Main function, to the interpreter
the used technics for the Lexer, Parser and the generation of the AST and of course of the Byte Code.
we will see some byte codes with the dis module
How does VM works, it’s a stack machine.
the Interpreter and its main loop of the Virtual Machine.
The idea behind is just to show how CPython works for a new contributor to CPython&lt;/p&gt;
</summary></entry><entry><title>Architecture of CPython, the bricks!</title><link href="http://pyvideo.org/pycon-ca-2016/architecture-of-cpython-the-bricks.html" rel="alternate"></link><published>2016-11-13T00:00:00+00:00</published><updated>2016-11-13T00:00:00+00:00</updated><author><name>Stéphane Wirtel</name></author><id>tag:pyvideo.org,2016-11-13:pycon-ca-2016/architecture-of-cpython-the-bricks.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Contribution to CPython is really funny, you can learn how the language
is designed, but you want to know where you should start when you have a
patch to provide. In this talk, I will explain the several components of
CPython and the architecture, how is the code designed.&lt;/p&gt;
&lt;div class="section" id="stephane-wirtel-bio"&gt;
&lt;h4&gt;Stéphane Wirtel Bio&lt;/h4&gt;
&lt;p&gt;Stéphane is Belgian software hacker, engaged and dad. Organiser of
PythonFOSDEM, &amp;#64;ThePSF Fellow, EuroPython Society Member and Member of
Association Francophone de Python and former OpenERP Core Dev (6y). He
has received a Community Service Award from the Python Software
Foundation.&lt;/p&gt;
&lt;p&gt;If you think distributed, asynchronous and others interesting subjects,
he will be happy to discuss with you.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>CPython - Bytecode and Virtual Machine</title><link href="http://pyvideo.org/pycon-ireland-2016/cpython-bytecode-and-virtual-machine.html" rel="alternate"></link><published>2016-11-05T00:00:00+00:00</published><updated>2016-11-05T00:00:00+00:00</updated><author><name>Stephane Wirtel</name></author><id>tag:pyvideo.org,2016-11-05:pycon-ireland-2016/cpython-bytecode-and-virtual-machine.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;From a small example of code, we will generate the bytecode with the
compiler, we will study the generated bytecode with the tools of CPython
and especially we will see the execution of this bytecode by the virtual
machine with a modified version of CPython, just for this talk.This talk
is based on my previous talk &amp;quot;Exploring our Python Interpreter&amp;quot; but in
this talk, we will go more in the details of the interpreter and
especially of the virtual machine.&lt;/p&gt;
</summary></entry><entry><title>Python and PostgreSQL a Wonderful Wedding</title><link href="http://pyvideo.org/pycon-uk-2015/python-and-postgresql-a-wonderful-wedding.html" rel="alternate"></link><published>2015-09-20T00:00:00+00:00</published><updated>2015-09-20T00:00:00+00:00</updated><author><name>Stephane Wirtel</name></author><id>tag:pyvideo.org,2015-09-20:pycon-uk-2015/python-and-postgresql-a-wonderful-wedding.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python and PostgreSQL, two tools we like to use for our projects but do
you know everything about them?&lt;/p&gt;
&lt;p&gt;The talk will give an overview of psycopg2, Peewee, SQLAlchemy, Alembic
and multicorn, PL/Python, these libraries can be used with PostgreSQL.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;psycopg2, the well known connector, this basic component is really
useful, well documented and battle-tested and used by the most famous
toolkits of the Python ecosystem.&lt;/li&gt;
&lt;li&gt;Peewee, a minimalist ORM for Python, clear and brief, this ORM can be
used if you want create a software with a minimalist ORM.&lt;/li&gt;
&lt;li&gt;SQLAlchemy, a Python SQL toolkit and Object Relational Mapper, you
can use this library to create your models and interact with them.&lt;/li&gt;
&lt;li&gt;Alembic, a lightweight database migration tool for usage with
SQLAlchemy, allows to create some migration scripts for your project.&lt;/li&gt;
&lt;li&gt;multicorn is a Python wrapper over the Foreign Data Wrapper of
PostgreSQL&lt;/li&gt;
&lt;li&gt;PL/Python, a procedural language for PostgreSQL, allows to write
functions in the Python language.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can find this talk on &lt;a class="reference external" href="https://speakerdeck.com/matrixise/python-and"&gt;https://speakerdeck.com/matrixise/python-and&lt;/a&gt;-
postgresql-a-wonderful-wedding-english&lt;/p&gt;
</summary></entry><entry><title>Voyage au centre du monde CPython</title><link href="http://pyvideo.org/pycon-fr-2016/voyage-au-centre-du-monde-cpython.html" rel="alternate"></link><published>2016-10-15T00:00:00+00:00</published><updated>2016-10-15T00:00:00+00:00</updated><author><name>Stephane Wirtel</name></author><id>tag:pyvideo.org,2016-10-15:pycon-fr-2016/voyage-au-centre-du-monde-cpython.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Vous desirez contribuer a CPython et vous ne savez pas comment ? Alors ce talk est fait pour vous!
En 2014, lors du PyCon US 2014 a Montreal, j'ai commence a contribuer a CPython via un sprint,
c'est ainsi que j'ai pu decouvrir les joies du dev de notre interpreteur favori.
A partir d'un exemple de code Python, nous allons decomposer l'interpreteur et voir ce
qu'il se passe dans ses entrailles.
De la simple expression &amp;quot;x = 2 + 2&amp;quot; executee sur la ligne de commande, nous voyagerons a travers le parser, et l'interpreteur.
Nous aurons le plaisir de rencontrer notre ami le compilateur qui transforme le code Python en ByteCode,
et ensuite la machine virtuelle qui execute le bytecode pour execute votre expression Python.
De plus, une section specifique sera presentee pour vous expliquer comment discuter et proposer
vos idees sur les contributions futures que vous pourrez apporter a CPython, tout en suivant
le workflow des Core Dev CPython.
Ce voyage interessant, permettra a toute personne de demarrer comme contributeur CPython
et d'apporter enfin une reponse a l'expression x = 2 + 2
Venez me rejoindre dans CPython.
Presente a EuroPython, PyCon IE, PyCon UK, PythonFOSDEM&lt;/p&gt;
</summary></entry><entry><title>Exploring our Python Interpreter</title><link href="http://pyvideo.org/europython-2016/exploring-our-python-interpreter.html" rel="alternate"></link><published>2016-07-31T00:00:00+00:00</published><updated>2016-07-31T00:00:00+00:00</updated><author><name>Stephane Wirtel</name></author><id>tag:pyvideo.org,2016-07-31:europython-2016/exploring-our-python-interpreter.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Stephane Wirtel - Exploring our Python Interpreter
[EuroPython 2016]
[19 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/exploring-our-python-interpreter"&gt;https://ep2016.europython.eu//conference/talks/exploring-our-python-interpreter&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;During the last CPython sprints at PyCon US (Montreal), I started to
contribute to the CPython project and I
wanted to understand the beast.
In this case, there is only one solution, trace the code from the beginning.
From the command line to the interpreter, we will take part to an
adventure. The idea behind is just to show how CPython works for a new
contributor.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;During my last CPython sprint, I started to contribute to the CPython code and I
wanted to understand the beast.&lt;/p&gt;
&lt;p&gt;In this case, there is only one solution, trace the code from the beginning.
From the command line to the interpreter, we will take part to an adventure&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Overview of the structure of the project and the directories.&lt;/li&gt;
&lt;li&gt;From the Py_Main function to the interpreter.&lt;/li&gt;
&lt;li&gt;The used technics for the Lexer, Parser and the generation of the AST and of course of the Bytecodes.&lt;/li&gt;
&lt;li&gt;We will see some bytecodes with the dis module.&lt;/li&gt;
&lt;li&gt;How does VM works, it's a stack machine.&lt;/li&gt;
&lt;li&gt;The interpreter and its main loop of the Virtual Machine.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The idea behind is just to show how CPython works for a new contributor to
CPython.&lt;/p&gt;
&lt;p&gt;From the command line, we will learn that Python is a library and that we can
embed it in a C project. In fact we will see the Py_Main function to the ceval.c
file of the interpreter.&lt;/p&gt;
&lt;p&gt;But there is no magic in the CPython code, we will travel in the lexer and the
parser of CPython, and why not, by the AST for one Python expression.&lt;/p&gt;
&lt;p&gt;After the AST, we will visit the Compiler and the Bytecodes for the
interpreter.
Of course, we will learn there is the peepholer where some basic instructions
are optimised by the this component.&lt;/p&gt;
&lt;p&gt;And of course, the interpreter, this virtual machine is really interesting for
the newbiew, because it's a big stack where the bytecodes are executed one by
one on the stack and the ceval.c file.&lt;/p&gt;
</summary></entry><entry><title>Exploring our Python interpreter</title><link href="http://pyvideo.org/pycon-ca-2015/exploring-our-python-interpreter-stephane-wirtel.html" rel="alternate"></link><published>2015-11-07T00:00:00+00:00</published><updated>2015-11-07T00:00:00+00:00</updated><author><name>Stephane Wirtel</name></author><id>tag:pyvideo.org,2015-11-07:pycon-ca-2015/exploring-our-python-interpreter-stephane-wirtel.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;During my last CPython sprint, I started to contribute to the CPython code, and I wanted to understand the beast.&lt;/p&gt;
&lt;p&gt;In this case, there is only one solution, trace the code from the beginning. From the command line to the interpreter, we will take part to an adventure.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Overview of the structure of the Project and the directories.&lt;/li&gt;
&lt;li&gt;From the Py_Main function, to the interpreter&lt;/li&gt;
&lt;li&gt;the used technics for the Lexer, Parser and the generation of the AST and of course of the Byte Code.&lt;/li&gt;
&lt;li&gt;we will see some byte codes with the dis module&lt;/li&gt;
&lt;li&gt;How does VM works, it’s a stack machine.&lt;/li&gt;
&lt;li&gt;the Interpreter and its main loop of the Virtual Machine.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The idea behind is just to show how CPython works for a new contributor to CPython&lt;/p&gt;
</summary></entry><entry><title>Evy</title><link href="http://pyvideo.org/pycon-fr-2013/evy.html" rel="alternate"></link><published>2013-11-30T00:00:00+00:00</published><updated>2013-11-30T00:00:00+00:00</updated><author><name>Stephane Wirtel</name></author><id>tag:pyvideo.org,2013-11-30:pycon-fr-2013/evy.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Evy est un serveur d'intégration continu, distribué et modulaire. Basé
sur Redis, Evy donna la possibilité de distribuer des jobs à travers un
réseau de Workers.&lt;/p&gt;
&lt;p&gt;De plus, de par son aspect modulaire, Evy permet à tout développeur
d'ajouter facilement de nouveaux modules qui réaliseront diverses
taches.&lt;/p&gt;
&lt;p&gt;Le projet est en cours de développement.&lt;/p&gt;
</summary></entry></feed>