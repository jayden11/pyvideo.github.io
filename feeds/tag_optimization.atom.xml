<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="http://pyvideo.org/" rel="alternate"></link><link href="http://pyvideo.org/feeds/tag_optimization.atom.xml" rel="self"></link><id>http://pyvideo.org/</id><updated>2016-10-07T00:00:00+00:00</updated><entry><title>Educational framework for Black Box optimization methods design</title><link href="http://pyvideo.org/pydata-dc-2016/educational-framework-for-black-box-optimization-methods-design.html" rel="alternate"></link><published>2016-10-07T00:00:00+00:00</published><updated>2016-10-07T00:00:00+00:00</updated><author><name>Nadia Udler</name></author><id>tag:pyvideo.org,2016-10-07:pydata-dc-2016/educational-framework-for-black-box-optimization-methods-design.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData DC 2016&lt;/p&gt;
&lt;p&gt;Many pressing real world problems can be stated as problems of global optimization, where target function is a black box. Such problems are best approached with a library of optimization methods to help study the nature of the problem. We show how to use Scipy.optimize and Scikit-learn modules to create global optimization methods with desired properties.&lt;/p&gt;
</summary><category term="Design"></category><category term="framework"></category><category term="optimization"></category></entry><entry><title>PyOhio 2010: Implementation of a Numerical Simulation in Python</title><link href="http://pyvideo.org/pyohio-2010/pyohio-2010--implementation-of-a-numerical-simula.html" rel="alternate"></link><published>1990-01-01T00:00:00+00:00</published><updated>1990-01-01T00:00:00+00:00</updated><author><name>Jeffrey Armstrong</name></author><id>tag:pyvideo.org,1990-01-01:pyohio-2010/pyohio-2010--implementation-of-a-numerical-simula.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Implementation of a Numerical Simulation in Python&lt;/p&gt;
&lt;p&gt;Presented by Jeffrey B. Armstrong&lt;/p&gt;
&lt;p&gt;The Python programming language is well suited for numerical computation
under a variety of circumstances. Python offers advantages over
competing free and commercial technologies, including price,
functionality, and maintainability. Specifically, the combination of
mature numerical libraries and liberal licensing allow complex
simulations to be coded with ease and to be made available to nearly all
interested parties. !NumPy/!SciPy, database access, networking, and
optimization techniques are examined in detail with respect to numerical
computation. A practical example involving an aerothermal commercial
turbofan aircraft engine simulation showcases these advantages. An
aircraft engine is broken down into discrete stages, including
compressors, turbines, and other flow-related components. Commonalities
between components, such as rotation and the presence of inlet and exit
conditions, map cleanly to the object-oriented nature of Python. Based
on simulation needs and hardware availability, Python allows for the
parallel computation of simulations without the expense and complexity
of commercial parallelization packages.&lt;/p&gt;
</summary><category term="database"></category><category term="networking"></category><category term="numpy"></category><category term="optimization"></category><category term="pyohio"></category><category term="pyohio2010"></category><category term="scipy"></category><category term="simulation"></category></entry><entry><title>PyPy and Unladen Swallow: Making your Python Fast</title><link href="http://pyvideo.org/chipy/pypy-and-unladen-swallow--making-your-python-fast.html" rel="alternate"></link><published>2010-07-08T00:00:00+00:00</published><updated>2010-07-08T00:00:00+00:00</updated><author><name>Alex Gaynor</name></author><id>tag:pyvideo.org,2010-07-08:chipy/pypy-and-unladen-swallow--making-your-python-fast.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Python has a reputation for being a bit slow, but it doesn't have to be
that way. This talk will cover why Python is slow, and what two of the
most exciting virtual machines are doing about it.&lt;/p&gt;
</summary><category term="chipy"></category><category term="optimization"></category><category term="performance"></category><category term="pypy"></category><category term="unladenswallow"></category></entry><entry><title>Alice in Performanceland -- Down the Rabbit Hole with Frank Wiles</title><link href="http://pyvideo.org/djangocon-2010/djangocon-2010--alice-in-performanceland----down-.html" rel="alternate"></link><published>2010-09-09T00:00:00+00:00</published><updated>2010-09-09T00:00:00+00:00</updated><author><name>Frank Wiles</name></author><id>tag:pyvideo.org,2010-09-09:djangocon-2010/djangocon-2010--alice-in-performanceland----down-.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;While pre-optimization is often the root of all evil, knowing how to
think about performance and scalability are important skills for any
geek. Learn about all the knobs you didn't know you could or should
tweak.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Code profiling and dealing with your database aren't the only places to
find performance gains. Performance and scalability are holistic
endeavors.&lt;/p&gt;
</summary><category term="djangocon"></category><category term="djangocon2010"></category><category term="optimization"></category><category term="performance"></category><category term="scaling"></category></entry><entry><title>Advanced Python</title><link href="http://pyvideo.org/europython-2011/advanced-python.html" rel="alternate"></link><published>2011-07-20T00:00:00+00:00</published><updated>2011-07-20T00:00:00+00:00</updated><author><name>Raymond Hettinger</name></author><id>tag:pyvideo.org,2011-07-20:europython-2011/advanced-python.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Raymond Hettinger - 21 June 2011 in &amp;quot;Training Pizza
Margherita&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This tutorial will work through a series of real-world examples, showing
how an understanding of the tools built into the Python interpreter or
included in the standard library can be combined to solve difficult
problems clearly and Pythonically. We will also discuss when and how to
reach beyond the standard library when needed to address difficult
algorithmic and optimization problems.&lt;/p&gt;
</summary><category term="optimization"></category><category term="tutorial"></category></entry><entry><title>Building Scalable Web Apps</title><link href="http://pyvideo.org/europython-2011/building-scalable-web-apps.html" rel="alternate"></link><published>2011-07-07T00:00:00+00:00</published><updated>2011-07-07T00:00:00+00:00</updated><author><name>David Cramer</name></author><id>tag:pyvideo.org,2011-07-07:europython-2011/building-scalable-web-apps.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] David Cramer - 21 June 2011 in &amp;quot;Track Spaghetti&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Building scalable web applications may seem like a distant problem, but
the problem is not thinking about it before it's too late. This talk
will focus on designing a scalable web application before it needs to be
(and avoiding the premature optimization dilemma). It will cover topics
such as efficient usage of your database, appropriate caching (and
invalidation!), and what the speaker considers as best practices.&lt;/p&gt;
</summary><category term="optimization"></category><category term="scalable"></category><category term="web"></category></entry><entry><title>PyCon 2009: Faster Python Programs through Optimization (Part 1 of 3)</title><link href="http://pyvideo.org/pycon-us-2009/pycon-2009--faster-python-programs-through-optim0.html" rel="alternate"></link><published>1990-01-01T00:00:00+00:00</published><updated>1990-01-01T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,1990-01-01:pycon-us-2009/pycon-2009--faster-python-programs-through-optim0.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;[VIDEO HAS ISSUES: vga blurry] Although Python programs may be slow for
certain types of tasks, there are many different ways to improve
performance. This tutorial will introduce optimization strategies and
demonstrate techniques to implement them. Another of the objectives of
this course is to give participants the ability to decide what might be
the optimal solution for a certain performance problem. Participants are
strongly recommended to bring laptops because all techniques are
introduced with examples and exercises.&lt;/p&gt;
</summary><category term="optimization"></category><category term="pycon"></category><category term="pycon2009"></category><category term="python-advanced"></category></entry><entry><title>PyCon 2009: Faster Python Programs through Optimization (Part 3 of 3)</title><link href="http://pyvideo.org/pycon-us-2009/pycon-2009--faster-python-programs-through-optim1.html" rel="alternate"></link><published>1990-01-01T00:00:00+00:00</published><updated>1990-01-01T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,1990-01-01:pycon-us-2009/pycon-2009--faster-python-programs-through-optim1.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;[VIDEO HAS ISSUES: vga blurry] Although Python programs may be slow for
certain types of tasks, there are many different ways to improve
performance. This tutorial will introduce optimization strategies and
demonstrate techniques to implement them. Another of the objectives of
this course is to give participants the ability to decide what might be
the optimal solution for a certain performance problem. Participants are
strongly recommended to bring laptops because all techniques are
introduced with examples and exercises.&lt;/p&gt;
</summary><category term="optimization"></category><category term="pycon"></category><category term="pycon2009"></category><category term="python-advanced"></category></entry><entry><title>PyCon 2009: Faster Python Programs through Optimization (Part 2 of 3)</title><link href="http://pyvideo.org/pycon-us-2009/pycon-2009--faster-python-programs-through-optimi.html" rel="alternate"></link><published>1990-01-01T00:00:00+00:00</published><updated>1990-01-01T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,1990-01-01:pycon-us-2009/pycon-2009--faster-python-programs-through-optimi.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;[VIDEO HAS ISSUES: vga blurry] Although Python programs may be slow for
certain types of tasks, there are many different ways to improve
performance. This tutorial will introduce optimization strategies and
demonstrate techniques to implement them. Another of the objectives of
this course is to give participants the ability to decide what might be
the optimal solution for a certain performance problem. Participants are
strongly recommended to bring laptops because all techniques are
introduced with examples and exercises.&lt;/p&gt;
</summary><category term="optimization"></category><category term="pycon"></category><category term="pycon2009"></category><category term="python-advanced"></category></entry><entry><title>Faster Python Programs Through Optimization</title><link href="http://pyvideo.org/pycon-us-2010/pycon-2010--faster-python-programs-through-optimi.html" rel="alternate"></link><published>2010-02-19T00:00:00+00:00</published><updated>2010-02-19T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--faster-python-programs-through-optimi.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Faster Python Programs Through Optimization&lt;/p&gt;
&lt;p&gt;Mike MÃ¼ller&lt;/p&gt;
&lt;p&gt;Although Python programs may be slow for certain types of tasks, there
are many different ways to improve performance. This tutorial will
introduce optimization strategies and demonstrate techniques to
implement them. Another of the objectives of this course is to give
participants the ability to decide what might be the optimal solution
for a certain performance problem. Participants are strongly recommended
to bring laptops because all techniques are introduced with examples and
exercises.&lt;/p&gt;
&lt;p&gt;Intended Audience&lt;/p&gt;
&lt;p&gt;Python programmers with intermediate knowledge.&lt;/p&gt;
&lt;p&gt;Class Outline&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;How Fast is Fast Enough?&lt;/li&gt;
&lt;li&gt;Optimization Guidelines&lt;ul&gt;
&lt;li&gt;Premature optimization&lt;/li&gt;
&lt;li&gt;Optimization rules&lt;/li&gt;
&lt;li&gt;Seven steps for incremental optimization&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Optimization strategy&lt;ul&gt;
&lt;li&gt;Measuring in stones&lt;/li&gt;
&lt;li&gt;Profiling CPU usage&lt;/li&gt;
&lt;li&gt;Profiling memory usage&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Algorithms and Anti-patterns&lt;ul&gt;
&lt;li&gt;String Concatenation&lt;/li&gt;
&lt;li&gt;List and Generator Comprehensions&lt;/li&gt;
&lt;li&gt;The Right Data Structure&lt;/li&gt;
&lt;li&gt;Caching&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The Example&lt;/li&gt;
&lt;li&gt;Testing Speed&lt;/li&gt;
&lt;li&gt;Pure Python&lt;/li&gt;
&lt;li&gt;Meet Psyco, the JIT&lt;/li&gt;
&lt;li&gt;Numpy for Numeric Arrays&lt;/li&gt;
&lt;li&gt;Using multiple CPUs with pyprocessing/multiprocessing&lt;/li&gt;
&lt;li&gt;Combination of optimization strategies&lt;/li&gt;
&lt;li&gt;Results of Different Example Implementations&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The following third-party packages are needed:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;psyco (version 1.5.2 or higher)&lt;/li&gt;
&lt;li&gt;numpy (version 1.2 or higher)&lt;/li&gt;
&lt;li&gt;pyprocessing (2.5 or lower only)&lt;/li&gt;
&lt;li&gt;Guppy_PE framework&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="optimization"></category><category term="pycon"></category><category term="pycon2010"></category><category term="tutorial"></category></entry><entry><title>Optimizations And Micro-Optimizations In CPython (#38)</title><link href="http://pyvideo.org/pycon-us-2010/pycon-2010--optimizations-and-micro-optimizations.html" rel="alternate"></link><published>2010-02-19T00:00:00+00:00</published><updated>2010-02-19T00:00:00+00:00</updated><author><name>Larry Hastings</name></author><id>tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--optimizations-and-micro-optimizations.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Optimizations and Micro-Optimizations in CPython&lt;/p&gt;
&lt;p&gt;Presented by Mr. Larry Hastings&lt;/p&gt;
&lt;p&gt;CPython mostly gets faster from one version to the next. And when
CPython gets faster, your programs get faster. This talk is a survey of
optimizations made to CPython, recent and historical, large and small.
Audience doesn't need to be familiar with CPython internals, but should
be familiar with Python and conversant in C.&lt;/p&gt;
&lt;p&gt;[VIDEO HAS ISSUES: Audio interference]&lt;/p&gt;
</summary><category term="cpython"></category><category term="optimization"></category><category term="pycon"></category><category term="pycon2010"></category></entry></feed>