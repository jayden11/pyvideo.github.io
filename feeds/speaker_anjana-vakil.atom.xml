<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="http://pyvideo.org/" rel="alternate"></link><link href="http://pyvideo.org/feeds/speaker_anjana-vakil.atom.xml" rel="self"></link><id>http://pyvideo.org/</id><updated>2016-08-05T00:00:00+00:00</updated><entry><title>Exploring Python Bytecode</title><link href="http://pyvideo.org/europython-2016/exploring-python-bytecode.html" rel="alternate"></link><published>2016-08-05T00:00:00+00:00</published><updated>2016-08-05T00:00:00+00:00</updated><author><name>Anjana Vakil</name></author><id>tag:pyvideo.org,2016-08-05:europython-2016/exploring-python-bytecode.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Anjana Vakil - Exploring Python Bytecode
[EuroPython 2016]
[20 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/exploring-python-bytecode"&gt;https://ep2016.europython.eu//conference/talks/exploring-python-bytecode&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Do you ever wonder how your Python code looks to the interpreter? What
those &lt;cite&gt;.pyc&lt;/cite&gt; files are? Why one program outperforms another, even if
the code is similar? Then let’s dive into Python bytecode! Bytecode is
the &amp;quot;intermediate language&amp;quot; that expresses your source code as machine
instructions the interpreter can understand. In this talk we’ll see
what role it plays in executing Python programs, learn to read it with
the &lt;cite&gt;dis&lt;/cite&gt; module, and analyze it to better understand a program’s
performance.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Do you ever wonder what your simple, beautiful Python code looks like
to the interpreter? Are you starting to get curious about those &lt;cite&gt;.pyc&lt;/cite&gt;
files that always pop up in your project, and you always ignore? Would
you like to start investigating your Python code's performance, and
learn why some programs you write run faster than others, even if the
code looks more or less the same? Have you simply fallen so completely
in love with Python that you're ready to peer deep inside its soul?&lt;/p&gt;
&lt;p&gt;If you, like me, answered &amp;quot;yes&amp;quot; to any of these questions, join me in
an illuminating adventure into the world of Python bytecode! Bytecode
is the &amp;quot;intermediate language&amp;quot; that expresses your Python source code
as machine instructions the interpreter (specifically CPython, the
&amp;quot;standard&amp;quot; interpreter) can understand. Together we'll investigate
what that means, and what role bytecode plays in the execution of a
Python program. We'll discover how we simple humans can read this
machine language using the &lt;cite&gt;dis&lt;/cite&gt; module, and inspect the bytecode for
some simple programs. We'll learn the meaning of a few instructions
that often appear in our bytecode, and we'll find out how to learn the
rest. Finally, we'll use bytecode to understand why a piece of Python
code runs faster if we put it inside of a function.&lt;/p&gt;
&lt;p&gt;When you go home, you'll be able to use bytecode to get a deeper
understanding of your Python code and its performance. The adventure
simply starts here; where it ends is up to you!&lt;/p&gt;
</summary></entry><entry><title>Using and abusing Python’s double-underscore methods and attributes</title><link href="http://pyvideo.org/europython-2016/using-and-abusing-pythons-double-underscore-methods-and-attributes.html" rel="alternate"></link><published>2016-08-04T00:00:00+00:00</published><updated>2016-08-04T00:00:00+00:00</updated><author><name>Anjana Vakil</name></author><id>tag:pyvideo.org,2016-08-04:europython-2016/using-and-abusing-pythons-double-underscore-methods-and-attributes.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Anjana Vakil - Using and abusing Python’s double-underscore methods and attributes
[EuroPython 2016]
[21 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/using-and-abusing-pythons-double-underscore-methods-and-attributes"&gt;https://ep2016.europython.eu//conference/talks/using-and-abusing-pythons-double-underscore-methods-and-attributes&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Python’s double-underscore ('&lt;cite&gt;__&lt;/cite&gt;') methods and attributes go by many
names, including “special”, “dunder”, and “magic”. You already use
some, like &lt;cite&gt;__init__&lt;/cite&gt;, but there are many more!&lt;/p&gt;
&lt;p&gt;In this talk, we’ll see how dunders can be useful, silly, dangerous,
and fun! We’ll trick Python’s arithmetic and comparison operators.
We’ll make objects behave like dictionaries and containers. We’ll
reduce an object’s memory usage, and speed up membership tests. We’ll
even try some naughty function hacks!&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;The curious Python methods and attributes surrounded by double
underscores ('&lt;cite&gt;__&lt;/cite&gt;') go by many names, including “special”, “dunder”,
and “magic”. You probably use some of them, like &lt;cite&gt;__init__&lt;/cite&gt;, every
day. But that’s just the tip of the iceberg!&lt;/p&gt;
&lt;p&gt;In this talk, we’ll explore the weird and wonderful world of the
double-underscore, and find out how dunders can be useful, silly,
dangerous, and just fun! We’ll play pranks on Python’s builtin
operators for arithmetic and comparison. We’ll make arbitrary objects
behave like dictionaries and containers. We’ll reduce an object’s
memory usage, and speed up tests for membership. We’ll even try some
naughty function hacks that we should never use in real life!&lt;/p&gt;
&lt;p&gt;You'll get the most out of this talk if you're already comfortable
writing object-oriented Python code. If you already use special dunder
magic in your own code, that's excellent! You’ll have a chance to
share your tips &amp;amp; tricks with the rest of the audience at the end of
the talk.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Talk repo&lt;/strong&gt;: &lt;a class="reference external" href="https://github.com/vakila/dunders"&gt;https://github.com/vakila/dunders&lt;/a&gt;&lt;/p&gt;
</summary></entry></feed>